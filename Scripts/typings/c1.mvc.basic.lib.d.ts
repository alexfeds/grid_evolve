
declare module wijmo.chart.finance {
  /**This is declare module for typing purpose only */
  function castObj();
}
declare module wijmo.grid.multirow {
    /**This is declare module for typing purpose only */
    function castObj();
}

declare module wijmo.grid.sheet {
    /**This is declare module for typing purpose only */
    function castObj();
}
declare module wijmo.olap {
    /**This is declare module for typing purpose only */
    function castObj();
}

declare module wijmo.grid.transposed {
    /**This is declare module for typing purpose only */
    function castObj();
}

declare module wijmo.grid.transposedmultirow {
    /**This is declare module for typing purpose only */
    function castObj();
}


declare module wijmo {
    function isMobile(): boolean;
    function isiOS(): boolean;
    function isFirefox(): boolean;
    function isSafari(): boolean;
    function isEdge(): boolean;
    function isIE(): boolean;
    function isIE9(): boolean;
    function isIE10(): boolean;
    function getEventOptions(capture: boolean, passive: boolean): any;
    function supportsFocusOptions(): boolean;
    function _startDrag(dataTransfer: any, effectAllowed: string): void;
}
declare module wijmo {
    function _getCalculatedArray(arr: any[], calculatedFields: any, newItem?: any): any[];
}
declare module wijmo {
    /**
     * Provides binding to complex properties (e.g. 'customer.address.city')
     */
    class Binding {
        _path: string;
        _parts: any[];
        _key: string;
        /**
         * Initializes a new instance of the {@link Binding} class.
         *
         * @param path Name of the property to bind to.
         */
        constructor(path: string);
        /**
         * Gets or sets the path for the binding.
         *
         * In the simplest case, the path is the name of the property of the source
         * object to use for the binding (e.g. 'street').
         *
         * Sub-properties of a property can be specified by a syntax similar to that
         * used in JavaScript (e.g. 'address.street').
         */
        path: string;
        /**
         * Gets the binding value for a given object.
         *
         * If the object does not contain the property specified by the
         * binding {@link path}, the method returns null.
         *
         * @param object The object that contains the data to be retrieved.
         */
        getValue(object: any): any;
        /**
         * Sets the binding value on a given object.
         *
         * If the object does not contain the property specified by the
         * binding {@link path}, the value is not set.
         *
         * @param object The object that contains the data to be set.
         * @param value Data value to set.
         */
        setValue(object: any, value: any): void;
    }
}
declare module wijmo {
    /**
     * Represents an event handler.
     *
     * Event handlers are functions invoked when events are raised.
     *
     * Every event handler has two arguments:
     * <ul>
     *   <li><b>sender</b> is the object that raised the event, and</li>
     *   <li><b>args</b> is an optional object that contains the event parameters.</li>
     * </ul>
     *
     * Read more about <a href="https://www.grapecity.com/blogs/html-and-wijmo-events" target="_blank">Wijmo Events</a>.
     *
     */
    interface IEventHandler<S = any, T = EventArgs> {
        (sender: S, args: T): void;
    }
    /**
     * Represents an event.
     *
     * Wijmo events are similar to .NET events. Any class may define events by
     * declaring them as fields. Any class may subscribe to events using the
     * event's {@link addHandler} method and unsubscribe using the {@link removeHandler}
     * method.
     *
     * Wijmo event handlers take two parameters: <i>sender</i> and <i>args</i>.
     * The first is the object that raised the event, and the second is an object
     * that contains the event parameters.
     *
     * Classes that define events follow the .NET pattern where for every event
     * there is an <i>on[EVENTNAME]</i> method that raises the event. This pattern
     * allows derived classes to override the <i>on[EVENTNAME]</i> method and
     * handle the event before and/or after the base class raises the event.
     * Derived classes may even suppress the event by not calling the base class
     * implementation.
     *
     * For example, the TypeScript code below overrides the <b>onValueChanged</b>
     * event for a control to perform some processing before and after the
     * <b>valueChanged</b> event fires:
     *
     * <pre>// override base class
     * onValueChanged(e: EventArgs) {
     *   // execute some code before the event fires
     *   console.log('about to fire valueChanged');
     *   // optionally, call base class to fire the event
     *   super.onValueChanged(e);
     *   // execute some code after the event fired
     *   console.log('valueChanged event just fired');
     * }</pre>
     */
    class Event<S = any, T = EventArgs> {
        private _handlers;
        private _handlersChanged;
        /**
         * Initializes a new instance of an {@link Event}.
         *
         * @param handlersChanged Optional callback invoked when handlers are
         * added or removed from this {@link Event}.
         */
        constructor(handlersChanged?: Function);
        /**
         * Adds a handler to this event.
         *
         * @param handler Function invoked when the event is raised.
         * @param self Object that defines the event handler
         * (accessible as 'this' from the handler code).
         */
        addHandler(handler: IEventHandler<S, T>, self?: any): void;
        /**
         * Removes a handler from this event.
         *
         * @param handler Function invoked when the event is raised.
         * @param self Object that defines the event handler (accessible as 'this' from the handler code).
         */
        removeHandler(handler: IEventHandler<S, T>, self?: any): void;
        /**
         * Removes all handlers associated with this event.
         */
        removeAllHandlers(): void;
        /**
         * Raises this event, causing all associated handlers to be invoked.
         *
         * @param sender Source object.
         * @param args Event parameters.
         */
        raise(sender: any, args?: EventArgs): void;
        /**
         * Gets a value that indicates whether this event has any handlers.
         */
        readonly hasHandlers: boolean;
        /**
         * Gets the number of handlers added to this event.
         */
        readonly handlerCount: number;
    }
    /**
     * Base class for event arguments.
     */
    class EventArgs {
        /**
         * Provides a value to use with events that do not have event data.
         */
        static empty: EventArgs;
    }
    /**
     * Provides arguments for cancellable events.
     */
    class CancelEventArgs extends EventArgs {
        /**
         * Gets or sets a value that indicates whether the event should be canceled.
         */
        cancel: boolean;
    }
    /**
     * Provides arguments for property change events.
     */
    class PropertyChangedEventArgs extends EventArgs {
        _name: string;
        _oldVal: any;
        _newVal: any;
        /**
         * Initializes a new instance of the {@link PropertyChangedEventArgs} class.
         *
         * @param propertyName The name of the property whose value changed.
         * @param oldValue The old value of the property.
         * @param newValue The new value of the property.
         */
        constructor(propertyName: string, oldValue: any, newValue: any);
        /**
         * Gets the name of the property whose value changed.
         */
        readonly propertyName: string;
        /**
         * Gets the old value of the property.
         */
        readonly oldValue: any;
        /**
         * Gets the new value of the property.
         */
        readonly newValue: any;
    }
    /**
     * Provides arguments for
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" target="_blank">XMLHttpRequest</a>
     * error events.
     */
    class RequestErrorEventArgs extends CancelEventArgs {
        _xhr: XMLHttpRequest;
        _msg: string;
        /**
         * Initializes a new instance of the {@link RequestErrorEventArgs} class.
         *
         * @param xhr The <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" target="_blank">XMLHttpRequest</a>
         * that detected the error.
         * The 'status' and 'statusText' properties of the request object contain details about the error.
         * @param msg Optional error message.
         */
        constructor(xhr: XMLHttpRequest, msg?: string);
        /**
         * Gets a reference to the <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" target="_blank">XMLHttpRequest</a>
         * that detected the error.
         *
         * The status and statusText properties of the request object contain
         * details about the error.
         */
        readonly request: XMLHttpRequest;
        /**
         * Gets or sets an error message to display to the user.
         */
        message: string;
    }
}
declare module wijmo.collections {
    /**
     * Notifies listeners of dynamic changes, such as when items get added and
     * removed or when the collection is sorted, filtered, or grouped.
     */
    interface INotifyCollectionChanged {
        /**
         * Occurs when the collection changes.
         */
        collectionChanged: wijmo.Event<INotifyCollectionChanged, NotifyCollectionChangedEventArgs>;
    }
    /**
     * Describes the action that caused the {@link INotifyCollectionChanged.collectionChanged}
     * event to fire.
     */
    enum NotifyCollectionChangedAction {
        /** An item was added to the collection. */
        Add = 0,
        /** An item was removed from the collection. */
        Remove = 1,
        /** An item was changed or replaced. */
        Change = 2,
        /**
         * Several items changed simultaneously
         * (for example, the collection was sorted, filtered, or grouped).
         */
        Reset = 3
    }
    /**
     * Provides data for the {@link INotifyCollectionChanged.collectionChanged} event.
     */
    class NotifyCollectionChangedEventArgs<T = any> extends wijmo.EventArgs {
        /**
         * Provides a reset notification.
         */
        static reset: NotifyCollectionChangedEventArgs<any>;
        /**
         * Gets the action that caused the event to fire.
         */
        action: NotifyCollectionChangedAction;
        /**
         * Gets the item that was added, removed, or changed.
         */
        item: T;
        /**
         * Gets the index at which the change occurred.
         */
        index: number;
        /**
         * Initializes a new instance of the {@link NotifyCollectionChangedEventArgs} class.
         *
         * @param action Type of action that caused the event to fire.
         * @param item Item that was added or changed.
         * @param index Index of the item.
         */
        constructor(action?: NotifyCollectionChangedAction, item?: T, index?: number);
    }
    /**
     * Represents a method that takes an item of any type and returns a
     * boolean that indicates whether the object meets a set of criteria.
     */
    interface IPredicate<T = any> {
        /**
         * @param item Data item to test.
         * @returns true if the item passes the test, false otherwise.
         */
        (item: T): boolean;
    }
    /**
     * Represents a method that compares two objects.
     */
    interface IComparer<T = any> {
        /**
         * @param: item1 First object to compare.
         * @param: item2 Second object to compare.
         * @returns -1, 0, or +1 to indicate that the first item is smaller than, equal to, or created than the second.
         */
        (item1: T, item2: T): number;
    }
    /**
     * Represents a method that takes an item and a property name
     * and returns a group name.
     */
    interface IGroupConverter<T = any> {
        /**
         * @param item Data item being grouped.
         * @param property Name of the property being grouped on.
         * @return Name of the group to use for this data item.
         */
        (item: T, property: string): string;
    }
    /**
     * Describes a sorting criterion.
     */
    class SortDescription {
        _bnd: wijmo.Binding;
        _asc: boolean;
        /**
         * Initializes a new instance of the {@link SortDescription} class.
         *
         * @param property Name of the property to sort on.
         * @param ascending Whether to sort in ascending order.
         */
        constructor(property: string, ascending: boolean);
        /**
         * Gets the name of the property used to sort.
         */
        readonly property: string;
        /**
         * Gets a value that determines whether to sort the values in ascending order.
         */
        readonly ascending: boolean;
    }
    /**
     * Enables collections to have the functionalities of current record management,
     * custom sorting, filtering, and grouping.
     *
     * This is a JavaScript version of the <b>ICollectionView</b> interface used in
     * Microsoft's XAML platform. It provides a consistent, powerful, and  MVVM-friendly
     * way to bind data to UI elements.
     *
     * Wijmo includes several classes that implement {@link ICollectionView}. The most
     * common is {@link CollectionView}, which works based on regular JavsScript
     * arrays.
     */
    interface ICollectionView<T = any> extends INotifyCollectionChanged, wijmo.IQueryInterface {
        /**
         * Gets a value that indicates whether this view supports filtering via the
         * {@link filter} property.
         */
        canFilter: boolean;
        /**
         * Gets a value that indicates whether this view supports grouping via the
         * {@link groupDescriptions} property.
         */
        canGroup: boolean;
        /**
         * Gets a value that indicates whether this view supports sorting via the
         * {@link sortDescriptions} property.
         */
        canSort: boolean;
        /**
         * Gets the current item in the view.
         */
        currentItem: T;
        /**
         * Gets the ordinal position of the current item in the view.
         */
        currentPosition: number;
        /**
         * Gets or sets a callback used to determine if an item is suitable for
         * inclusion in the view.
         *
         * NOTE: If the filter function needs a scope (i.e. a meaningful 'this'
         * value), then remember to set the filter using the 'bind' function to
         * specify the 'this' object. For example:
         * <pre>
         *   collectionView.filter = this._filter.bind(this);
         * </pre>
         */
        filter: IPredicate<T>;
        /**
         * Gets a collection of {@link GroupDescription} objects that describe how the
         * items in the collection are grouped in the view.
         */
        groupDescriptions: ObservableArray<GroupDescription>;
        /**
         * Gets the top-level groups.
         */
        groups: any[];
        /**
         * Gets a value that indicates whether this view contains no items.
         */
        isEmpty: boolean;
        /**
         * Gets a collection of {@link SortDescription} objects that describe how the items
         * in the collection are sorted in the view.
         */
        sortDescriptions: ObservableArray<SortDescription>;
        /**
         * Gets or sets the collection object from which to create this view.
         */
        sourceCollection: any;
        /**
         * Returns a value that indicates whether a given item belongs to this view.
         *
         * @param item The item to locate in the collection.
         */
        contains(item: T): boolean;
        /**
         * Sets the specified item to be the current item in the view.
         *
         * @param item The item to set as the {@link currentItem}.
         */
        moveCurrentTo(item: T): boolean;
        /**
         * Sets the first item in the view as the current item.
         */
        moveCurrentToFirst(): boolean;
        /**
         * Sets the last item in the view as the current item.
         */
        moveCurrentToLast(): boolean;
        /**
         * Sets the item after the current item in the view as the current item.
         */
        moveCurrentToNext(): boolean;
        /**
         * Sets the item at the specified index in the view as the current item.
         *
         * @param index The index of the item to set as the {@link currentItem}.
         */
        moveCurrentToPosition(index: number): boolean;
        /**
         * Sets the item before the current item in the view as the current item.
         */
        moveCurrentToPrevious(): boolean;
        /**
         * Re-creates the view using the current sort, filter, and group parameters.
         */
        refresh(): void;
        /**
         * Occurs after the current item changes.
         */
        currentChanged: wijmo.Event<ICollectionView, wijmo.EventArgs>;
        /**
         * Occurs before the current item changes.
         */
        currentChanging: wijmo.Event<ICollectionView, wijmo.EventArgs>;
        /**
         * Suspends refreshes until the next call to {@link endUpdate}.
         */
        beginUpdate(): void;
        /**
         * Resumes refreshes suspended by a call to {@link beginUpdate}.
         *
         * @param force Whether to force a refresh when ending the update.
         */
        endUpdate(force?: boolean): void;
        /**
         * Executes a function within a beginUpdate/endUpdate block.
         *
         * The collection will not be refreshed until the function has been executed.
         * This method ensures endUpdate is called even if the function throws.
         *
         * @param fn Function to be executed within the beginUpdate/endUpdate block.
         * @param force Whether to force a refresh when ending the update.
         */
        deferUpdate(fn: Function, force?: boolean): void;
        /**
         * Gets the filtered, sorted, grouped items in the view.
         */
        items: T[];
    }
    /**
     * Defines methods and properties that extend {@link ICollectionView} to provide
     * editing capabilities.
     */
    interface IEditableCollectionView extends ICollectionView {
        /**
         * Gets a value that indicates whether a new item can be added to the collection.
         */
        canAddNew: boolean;
        /**
         * Gets a value that indicates whether the collection view can discard pending changes
         * and restore the original values of an edited object.
         */
        canCancelEdit: boolean;
        /**
         * Gets a value that indicates whether items can be removed from the collection.
         */
        canRemove: boolean;
        /**
         * Gets the item that is being added during the current add transaction.
         */
        currentAddItem: any;
        /**
         * Gets the item that is being edited during the current edit transaction.
         */
        currentEditItem: any;
        /**
         * Gets a value that indicates whether an add transaction is in progress.
         */
        isAddingNew: boolean;
        /**
         * Gets a value that indicates whether an edit transaction is in progress.
         */
        isEditingItem: boolean;
        /**
         * Adds a new item to the collection.
         *
         * @return The item that was added to the collection.
         */
        addNew(): any;
        /**
         * Ends the current edit transaction and, if possible,
         * restores the original value to the item.
         */
        cancelEdit(): void;
        /**
         * Ends the current add transaction and discards the pending new item.
         */
        cancelNew(): void;
        /**
         * Ends the current edit transaction and saves the pending changes.
         */
        commitEdit(): void;
        /**
         * Ends the current add transaction and saves the pending new item.
         */
        commitNew(): void;
        /**
         * Begins an edit transaction of the specified item.
         *
         * @param item Item to edit.
         */
        editItem(item: any): void;
        /**
         * Removes the specified item from the collection.
         *
         * @param item Item to remove from the collection.
         */
        remove(item: any): void;
        /**
         * Removes the item at the specified index from the collection.
         *
         * @param index Index of the item to remove from the collection.
         */
        removeAt(index: number): void;
    }
    /**
     * Defines methods and properties that extend {@link ICollectionView} to provide
     * paging capabilities.
     */
    interface IPagedCollectionView extends ICollectionView {
        /**
         * Gets a value that indicates whether the {@link pageIndex} value can change.
         */
        canChangePage: boolean;
        /**
         * Gets a value that indicates whether the index is changing.
         */
        isPageChanging: boolean;
        /**
         * Gets the number of items in the view taking paging into account.
         *
         * To get the total number of items, use the {@link totalItemCount} property.
         *
         * Notice that this is different from the .NET <b>IPagedCollectionView</b>,
         * where <b>itemCount</b> and <b>totalItemCount</b> both return the count
         * before paging is applied.
         */
        itemCount: number;
        /**
         * Gets the zero-based index of the current page.
         */
        pageIndex: number;
        /**
         * Gets or sets the number of items to display on each page.
         */
        pageSize: number;
        /**
         * Gets the total number of items in the view before paging is applied.
         *
         * To get the number of items in the current view not taking paging into
         * account, use the {@link itemCount} property.
         *
         * Notice that this is different from the .NET <b>IPagedCollectionView</b>,
         * where <b>itemCount</b> and <b>totalItemCount</b> both return the count
         * before paging is applied.
         */
        totalItemCount: number;
        /**
         * Sets the first page as the current page.
         */
        moveToFirstPage(): boolean;
        /**
         * Sets the last page as the current page.
         */
        moveToLastPage(): boolean;
        /**
         * Moves to the page after the current page.
         */
        moveToNextPage(): boolean;
        /**
         * Moves to the page at the specified index.
         *
         * @param index Index of the page to move to.
         */
        moveToPage(index: number): boolean;
        /**
         * Moves to the page before the current page.
         */
        moveToPreviousPage(): boolean;
        /**
        * Occurs after the page index changes.
        */
        pageChanged: wijmo.Event<IPagedCollectionView, wijmo.EventArgs>;
        /**
         * Occurs before the page index changes.
         */
        pageChanging: wijmo.Event<IPagedCollectionView, PageChangingEventArgs>;
    }
    /**
     * Provides data for the {@link IPagedCollectionView.pageChanging} event
     */
    class PageChangingEventArgs extends wijmo.CancelEventArgs {
        /**
         * Gets the index of the page that is about to become current.
         */
        newPageIndex: number;
        /**
         * Initializes a new instance of the {@link PageChangingEventArgs} class.
         *
         * @param newIndex Index of the page that is about to become current.
         */
        constructor(newIndex: number);
    }
    /**
     * Represents a base class for types defining grouping conditions.
     *
     * The concrete class which is commonly used for this purpose is
     * {@link PropertyGroupDescription}.
     */
    class GroupDescription {
        /**
         * Returns the group name for the given item.
         *
         * @param item The item to get group name for.
         * @param level The zero-based group level index.
         * @return The name of the group the item belongs to.
         */
        groupNameFromItem(item: any, level: number): any;
        /**
         * Returns a value that indicates whether the group name and the item name
         * match (which implies that the item belongs to the group).
         *
         * @param groupName The name of the group.
         * @param itemName The name of the item.
         * @return True if the names match; otherwise, false.
         */
        namesMatch(groupName: any, itemName: any): boolean;
    }
    /**
     * Describes the grouping of items using a property name as the criterion.
     *
     * For example, the code below causes a {@link CollectionView} to group items
     * by the value of their 'country' property:
     * <pre>
     * var cv = new wijmo.collections.CollectionView(items);
     * var gd = new wijmo.collections.PropertyGroupDescription('country');
     * cv.groupDescriptions.push(gd);
     * </pre>
     *
     * You may also specify a callback function that generates the group name.
     * For example, the code below causes a {@link CollectionView} to group items
     * by the first letter of the value of their 'country' property:
     * <pre>
     * var cv = new wijmo.collections.CollectionView(items);
     * var gd = new wijmo.collections.PropertyGroupDescription('country',
     *   function(item, propName) {
     *     return item[propName][0]; // return country's initial
     * });
     * cv.groupDescriptions.push(gd);
     * </pre>
     */
    class PropertyGroupDescription extends GroupDescription {
        _bnd: wijmo.Binding;
        _converter: IGroupConverter;
        /**
         * Initializes a new instance of the {@link PropertyGroupDescription} class.
         *
         * @param property The name of the property that specifies
         * which group an item belongs to.
         * @param converter A callback function that takes an item and
         * a property name and returns the group name. If not specified,
         * the group name is the property value for the item.
         */
        constructor(property: string, converter?: IGroupConverter);
        /**
         * Gets the name of the property that is used to determine which
         * group an item belongs to.
         */
        readonly propertyName: string;
        /**
         * Returns the group name for the given item.
         *
         * @param item The item to get group name for.
         * @param level The zero-based group level index.
         * @return The name of the group the item belongs to.
         */
        groupNameFromItem(item: any, level: number): any;
        /**
         * Returns a value that indicates whether the group name and the item name
         * match (which implies that the item belongs to the group).
         *
         * @param groupName The name of the group.
         * @param itemName The name of the item.
         * @return True if the names match; otherwise, false.
         */
        namesMatch(groupName: any, itemName: any): boolean;
    }
}
declare module wijmo {
    /**
     * Gets the version of the Wijmo library that is currently loaded.
     */
    function getVersion(): string;
    /**
     * Sets the license key that identifies licensed Wijmo applications.
     *
     * If you do not set the license key, Wijmo will run in evaluation mode,
     * adding a watermark element to the page.
     *
     * Licensed users may obtain keys at the
     * <a href="https://www.grapecity.com/my-account" target="_blank">My Account</a>
     * section of the Wijmo site.
     *
     * Note that Wijmo does not send keys or any licensing information to any servers.
     * It only checks the internal consistency of the key provided.
     *
     * @param licenseKey String containing the license key to use in this application.
     */
    function setLicenseKey(licenseKey: string): void;
    /**
     * Specifies constants that represent keyboard codes.
     *
     * This enumeration is useful when handling <b>keyDown</b> events.
     */
    enum Key {
        /** The backspace key. */
        Back = 8,
        /** The tab key. */
        Tab = 9,
        /** The enter key. */
        Enter = 13,
        /** The escape key. */
        Escape = 27,
        /** The space key. */
        Space = 32,
        /** The page up key. */
        PageUp = 33,
        /** The page down key. */
        PageDown = 34,
        /** The end key. */
        End = 35,
        /** The home key. */
        Home = 36,
        /** The left arrow key. */
        Left = 37,
        /** The up arrow key. */
        Up = 38,
        /** The right arrow key. */
        Right = 39,
        /** The down arrow key. */
        Down = 40,
        /** The delete key. */
        Delete = 46,
        /** The F1 key. */
        F1 = 112,
        /** The F2 key. */
        F2 = 113,
        /** The F3 key. */
        F3 = 114,
        /** The F4 key. */
        F4 = 115,
        /** The F5 key. */
        F5 = 116,
        /** The F6 key. */
        F6 = 117,
        /** The F7 key. */
        F7 = 118,
        /** The F8 key. */
        F8 = 119,
        /** The F9 key. */
        F9 = 120,
        /** The F10 key. */
        F10 = 121,
        /** The F11 key. */
        F11 = 122,
        /** The F12 key. */
        F12 = 123
    }
    /**
     * Specifies constants that represent data types.
     *
     * Use the {@link getType} method to get a {@link DataType} from a value.
     */
    enum DataType {
        /** Object (anything). */
        Object = 0,
        /** String. */
        String = 1,
        /** Number. */
        Number = 2,
        /** Boolean. */
        Boolean = 3,
        /** Date (date and time). */
        Date = 4,
        /** Array. */
        Array = 5
    }
    /**
     * Allows callers to verify whether an object implements an interface.
     */
    interface IQueryInterface {
        /**
         * Returns true if the object implements a given interface.
         *
         * @param interfaceName Name of the interface to look for.
         */
        implementsInterface(interfaceName: string): boolean;
    }
    /**
     * Casts a value to a type if possible.
     *
     * @param value Value to cast.
     * @param type Type or interface name to cast to.
     * @return The value passed in if the cast was successful, null otherwise.
     */
    function tryCast(value: any, type: any): any;
    /**
     * Determines whether an object is a primitive type (string, number, Boolean, or Date).
     *
     * @param value Value to test.
     */
    function isPrimitive(value: any): value is string | number | Boolean | Date;
    /**
     * Determines whether an object is a string.
     *
     * @param value Value to test.
     */
    function isString(value: any): value is string;
    /**
     * Determines whether a string is null, empty, or whitespace only.
     *
     * @param value Value to test.
     */
    function isNullOrWhiteSpace(value: string): boolean;
    /**
     * Determines whether an object is a number.
     *
     * @param value Value to test.
     */
    function isNumber(value: any): value is number;
    /**
     * Determines whether an object is an integer.
     *
     * @param value Value to test.
     */
    function isInt(value: any): value is number;
    /**
     * Determines whether an object is a Boolean.
     *
     * @param value Value to test.
     */
    function isBoolean(value: any): value is boolean;
    /**
     * Determines whether an object is a function.
     *
     * @param value Value to test.
     */
    function isFunction(value: any): value is Function;
    /**
     * Determines whether an object is undefined.
     *
     * @param value Value to test.
     */
    function isUndefined(value: any): value is undefined;
    /**
     * Determines whether an object is a Date.
     *
     * @param value Value to test.
     */
    function isDate(value: any): value is Date;
    /**
     * Determines whether an object is an Array.
     *
     * @param value Value to test.
     */
    function isArray(value: any): value is Array<any>;
    /**
     * Determines whether a value is an object
     * (as opposed to a value type, an array, or a Date).
     *
     * @param value Value to test.
     */
    function isObject(value: any): boolean;
    /**
     * Determines whether an object is empty
     * (contains no enumerable properties).
     *
     * @param obj Object to test.
     */
    function isEmpty(obj: any): boolean;
    /**
     * Creates a new unique id for an element by adding sequential
     * numbers to a given base id.
     *
     * @param baseId String to use as a basis for generating the unique id.
     */
    function getUniqueId(baseId: string): string;
    /**
     * Converts mouse or touch event arguments into a {@link Point} in page coordinates.
     */
    function mouseToPage(e: any): Point;
    /**
     * Gets the type of a value.
     *
     * @param value Value to test.
     * @return A {@link DataType} value representing the type of the value passed in.
     */
    function getType(value: any): DataType;
    /**
     * Provides binding information for object properties.
     */
    interface IBindingInfo {
        binding: string;
        dataType: DataType;
        isReadOnly?: boolean;
    }
    /**
     * Gets an array containing the names and types of items in an array.
     *
     * @param arr Array containing data items.
     * @return An array containing objects with the binding and type of each
     * primitive property in the items found in the input array.
     */
    function getTypes(arr: any[]): IBindingInfo[];
    /**
     * Changes the type of a value.
     *
     * If the conversion fails, the original value is returned. To check if a
     * conversion succeeded, you should check the type of the returned value.
     *
     * @param value Value to convert.
     * @param type {@link DataType} to convert the value to.
     * @param format Format to use when converting to or from strings.
     * @return The converted value, or the original value if a conversion was not possible.
     */
    function changeType(value: any, type: DataType, format?: string): any;
    /**
     * Rounds or truncates a number to a specified precision.
     *
     * @param value Value to round or truncate.
     * @param prec Number of decimal digits for the result.
     * @param truncate Whether to truncate or round the original value.
     */
    function toFixed(value: number, prec: number, truncate: boolean): number;
    /**
     * Replaces each format item in a specified string with the text equivalent of an
     * object's value.
     *
     * The function works by replacing parts of the <b>formatString</b> with the pattern
     * '{name:format}' with properties of the <b>data</b> parameter. For example:
     *
     * ```typescript
     * import { format } from '@grapecity/wijmo';
     * let data = { name: 'Joe', amount: 123456 },
     *     msg = format('Hello {name}, you won {amount:n2}!', data);
     * ```
     *
     * The {@link format} function supports pluralization. If the format string is a
     * JSON-encoded object with 'count' and 'when' properties, the method uses
     * the 'count' parameter of the data object to select the appropriate format
     * from the 'when' property. For example:
     *
     * ```typescript
     * import { format } from '@grapecity/wijmo';
     * fmtObj fmt = {
     *     count: 'count',
     *     when: {
     *         0: 'No items selected.',
     *         1: 'One item is selected.',
     *         2: 'A pair is selected.',
     *         'other': '{count:n0} items are selected.'
     *     }
     * };
     * let fmt = JSON.stringify(fmtObj);
     * console.log(format(fmt, { count: 0 }));  // No items selected.
     * console.log(format(fmt, { count: 1 }));  // One item is selected.
     * console.log(format(fmt, { count: 2 }));  // A pair is selected.
     * console.log(format(fmt, { count: 12 })); // 12 items are selected.
     * ```
     *
     * The optional <b>formatFunction</b> allows you to customize the content by
     * providing context-sensitive formatting. If provided, the format function
     * gets called for each format element and gets passed the data object, the
     * parameter name, the format, and the value; it should return an output string.
     * For example:
     *
     * ```typescript
     * import { format, isString, escapeHtml } from '@grapecity/wijmo';
     * let data = { name: 'Joe', amount: 123456 },
     *     msg = format('Hello {name}, you won {amount:n2}!', data,
     *     (data, name, fmt, val) => {
     *         if (isString(data[name])) {
     *             val = escapeHtml(data[name]);
     *         }
     *         return val;
     *     }
     * );
     * ```
     *
     * @param format A composite format string.
     * @param data The data object used to build the string.
     * @param formatFunction An optional function used to format items in context.
     * @return The formatted string.
     */
    function format(format: string, data: any, formatFunction?: Function): string;
    /**
     * Tag function for use with template literals.
     *
     * The {@link glbz} tag function allows you to specify formatting for
     * variables in template literal expressions.
     *
     * To format a variable in a template literal using {@link glbz}, add a
     * colon and the format string after the name of the variable you want
     * to format.
     *
     * For example:
     *
     * ```typescript
     * import { glbz } from '@grapecity/wijmo';
     * let num = 42,
     *     dt = new Date(),
     *     msg = glbz`the number is ${num}:n2, and the date is ${dt}:'MMM d, yyyy'!`;
     * ```
     */
    function glbz(...args: any[]): string;
    /**
     * Evaluates a string in template literal notation.
     *
     * This function allows you to evaluate template literals on-demand,
     * rather than when they are declared.
     *
     * The template string uses the standard template literal syntax,
     * except it is a regular string (enclosed in single or double
     * quotes) rather than a template literal (enclosed in back-quotes).
     *
     * The template string may contain references to variables provided
     * in a context object passed as a parameter.
     *
     * The template string may contain formatting information as
     * used with the {@link glbz} tag function.
     *
     * For example:
     * ```typescript
     * import { evalTemplate } from '@grapecity/wijmo';
     * const msg = evalTemplate('hello ${user}, want some ${Math.PI}:n2?', { user: 'Chris' }));
     * console.log(msg);
     * > hello Chris, want some 3.14?
     * ```
     *
     * @param template String in template literal notation.
     * @param ctx Object with properties acessible to the template.
     * @returns A string containing the result.
     */
    function evalTemplate(template: string, ctx?: any): string;
    /**
     * Clamps a value between a minimum and a maximum.
     *
     * @param value Original value.
     * @param min Minimum allowed value.
     * @param max Maximum allowed value.
     */
    function clamp(value: number, min: number, max: number): number;
    /**
     * Copies properties from an object to another.
     *
     * This method is typically used to initialize controls and other Wijmo objects
     * by setting their properties and assigning event handlers.
     *
     * The destination object must define all the properties defined in the source,
     * or an error will be thrown.
     *
     * @param dst The destination object.
     * @param src The source object.
     * @returns The destination object.
     */
    function copy(dst: any, src: any): any;
    /**
     * Throws an exception if a condition is false.
     *
     * @param condition Condition expected to be true.
     * @param msg Message of the exception if the condition is not true.
     */
    function assert(condition: boolean, msg: string): void;
    /**
     * Outputs a message to indicate a member has been deprecated.
     *
     * @param oldMember Member that has been deprecated.
     * @param newMember Member that replaces the one that has been deprecated.
     */
    function _deprecated(oldMember: string, newMember: string): void;
    /**
     * Asserts that a value is a string.
     *
     * @param value Value supposed to be a string.
     * @param nullOK Whether null values are acceptable.
     * @return The string passed in.
     */
    function asString(value: string, nullOK?: boolean): string;
    /**
     * Asserts that a value is a number.
     *
     * @param value Value supposed to be numeric.
     * @param nullOK Whether null values are acceptable.
     * @param positive Whether to accept only positive numeric values.
     * @return The number passed in.
     */
    function asNumber(value: number, nullOK?: boolean, positive?: boolean): number;
    /**
     * Asserts that a value is an integer.
     *
     * @param value Value supposed to be an integer.
     * @param nullOK Whether null values are acceptable.
     * @param positive Whether to accept only positive integers.
     * @return The number passed in.
     */
    function asInt(value: number, nullOK?: boolean, positive?: boolean): number;
    /**
     * Asserts that a value is a Boolean.
     *
     * @param value Value supposed to be Boolean.
     * @param nullOK Whether null values are acceptable.
     * @return The Boolean passed in.
     */
    function asBoolean(value: boolean, nullOK?: boolean): boolean;
    /**
     * Asserts that a value is a Date.
     *
     * @param value Value supposed to be a Date.
     * @param nullOK Whether null values are acceptable.
     * @return The Date passed in.
     */
    function asDate(value: Date, nullOK?: boolean): Date;
    /**
     * Asserts that a value is a function.
     *
     * @param value Value supposed to be a function.
     * @param nullOK Whether null values are acceptable.
     * @return The function passed in.
     */
    function asFunction(value: any, nullOK?: boolean): Function;
    /**
     * Asserts that a value is an array.
     *
     * @param value Value supposed to be an array.
     * @param nullOK Whether null values are acceptable.
     * @return The array passed in.
     */
    function asArray(value: any, nullOK?: boolean): any[];
    /**
     * Asserts that a value is an instance of a given type.
     *
     * @param value Value to be checked.
     * @param type Type of value expected.
     * @param nullOK Whether null values are acceptable.
     * @return The value passed in.
     */
    function asType(value: any, type: any, nullOK?: boolean): any;
    /**
     * Asserts that a value is a valid setting for an enumeration.
     *
     * @param value Value supposed to be a member of the enumeration.
     * @param enumType Enumeration to test for.
     * @param nullOK Whether null values are acceptable.
     * @return The value passed in.
     */
    function asEnum(value: number, enumType: any, nullOK?: boolean): number;
    /**
     * Asserts that a value is an {@link ICollectionView} or an Array.
     *
     * @param value Array or {@link ICollectionView}.
     * @param nullOK Whether null values are acceptable.
     * @return The {@link ICollectionView} that was passed in or a {@link CollectionView}
     * created from the array that was passed in.
     */
    function asCollectionView(value: any, nullOK?: boolean): wijmo.collections.ICollectionView;
    /**
     * Checks whether an {@link ICollectionView} is defined and not empty.
     *
     * @param value {@link ICollectionView} to check.
     */
    function hasItems(value: wijmo.collections.ICollectionView): boolean;
    /**
     * Converts a camel-cased string into a header-type string by capitalizing the first letter
     * and adding spaces before uppercase characters preceded by lower-case characters.
     *
     * For example, 'somePropertyName' becomes 'Some Property Name'.
     *
     * @param text String to convert to header case.
     */
    function toHeaderCase(text: string): string;
    /**
     * Escapes a string by replacing HTML characters with text entities.
     *
     * Strings entered by users should always be escaped before they are displayed
     * in HTML pages. This helps ensure page integrity and prevent HTML/javascript
     * injection attacks.
     *
     * @param text Text to escape.
     * @return An HTML-escaped version of the original string.
     */
    function escapeHtml(text: string): string;
    /**
     * Escapes a string by prefixing special regular expression characters
     * with backslashes.
     *
     * @param text Text to escape.
     * @return A RegExp-escaped version of the original string.
     */
    function escapeRegExp(text: string): string;
    /**
     * Converts an HTML string into plain text.
     *
     * @param html HTML string to convert to plain text.
     * @return A plain-text version of the string.
     */
    function toPlainText(html: string): string;
    /**
     * Checks whether an element has a class.
     *
     * @param e Element to check.
     * @param className Class to check for.
     */
    function hasClass(e: Element, className: string): boolean;
    /**
     * Adds a class to an element.
     *
     * @param e Element that will have the class added.
     * @param className Class (or space-separated list of classes) to add to the element.
     */
    function addClass(e: Element, className: string): void;
    /**
     * Removes a class from an element.
     *
     * @param e Element that will have the class removed.
     * @param className Class (or space-separated list of classes) to remove from the element.
     */
    function removeClass(e: Element, className: string): void;
    /**
     * Adds or removes a class to or from an element.
     *
     * @param e Element that will have the class added.
     * @param className Class to add or remove.
     * @param addOrRemove Whether to add or remove the class. If not provided, toggle the class.
     */
    function toggleClass(e: Element, className: string, addOrRemove?: boolean): void;
    /**
     * Sets or clears an attribute on an element.
     *
     * @param e Element that will be updated.
     * @param name Name of the attribute to add or remove.
     * @param value Value of the attribute, or null to remove the attribute
     * from the element.
     * @param keep Whether to keep original attribute if present.
     */
    function setAttribute(e: Element, name: string, value?: any, keep?: boolean): void;
    /**
     * Sets the checked and indeterminate properties of a checkbox input
     * element.
     *
     * @param cb Checkbox element.
     * @param checked True, false, or null for checked, unchecked, or indeterminate.
     */
    function setChecked(cb: HTMLInputElement, checked: boolean): void;
    /**
     * Sets or clears an element's <b>aria-label</b> attribute.
     *
     * @param e Element that will be updated.
     * @param value Value of the aria label, or null to remove the label
     * from the element.
     */
    function setAriaLabel(e: Element, value?: string): void;
    /**
     * Sets the start and end positions of a selection in a text field.
     *
     * This method is similar to the native {@link setSelectionRange} method
     * in HTMLInputElement objects, except it checks for conditions that
     * may cause exceptions (element not in the DOM, disabled, or hidden).
     *
     * @param e HTMLInputElement or HTMLTextAreaElement to select.
     * @param start Offset into the text field for the start of the selection.
     * @param end Offset into the text field for the end of the selection.
     */
    function setSelectionRange(e: any, start: number, end?: number): boolean;
    /**
     * Disables the autocomplete, autocorrect, autocapitalize, and spellcheck
     * properties of an input element.
     *
     * @param e The input element.
     */
    function disableAutoComplete(e: HTMLInputElement): void;
    /**
     * Safely removes an element from the DOM tree.
     *
     * @param e Element to remove from the DOM tree.
     */
    function removeChild(e: Node): Node;
    /**
     * Gets a reference to the element that contains the focus,
     * accounting for shadow document fragments.
     */
    function getActiveElement(): HTMLElement;
    /**
     * Moves the focus to the next/previous/first focusable child within
     * a given parent element.
     *
     * @param parent Parent element.
     * @param offset Offset to use when moving the focus (use zero to focus on the first focusable child).
     * @return True if the focus was set, false if a focusable element was not found.
     */
    function moveFocus(parent: HTMLElement, offset: number): boolean;
    /**
     * Saves content to a file.
     *
     * @param content String to be saved to a file.
     * @param fileName Name of the file to save, including extension.
     * @param type Optional file MIME type.
     *
     * The {@link saveFile} method can be used to create text files
     * (txt, csv, html) as well as image files.
     *
     * For example, this code saves the current selection of a FlexGrid to a CSV file:
     *
     * ```typescript
     * import { saveFile } from '@grapecity/wijmo';
     * const clipString = theGrid.getClipString(null, true, true, false);
     * saveFile(clipString, 'grid.csv', 'text/csv');
     * ```
     *
     * And this code saves the content of a canvas element to a JPG file:
     *
     * ```typescript
     * import { saveFile } from '@grapecity/wijmo';
     * let dataUrl = canvas.toDataURL('image/jpg', 0.95),
     *     match = dataUrl.match(/^data:([^,]+),(.*)$/i);
     * saveFile(match[2], 'canvas.jpg', match[1]);
     * ```
     */
    function saveFile(content: string, fileName: string, type?: string): void;
    /**
     * Gets an element from a query selector.
     *
     * @param selector An element, a query selector string, or a jQuery object.
     */
    function getElement(selector: any): HTMLElement;
    /**
     * Creates an element from an HTML string.
     *
     * @param html HTML fragment to convert into an HTMLElement.
     * @param appendTo Optional HTMLElement to append the new element to.
     * @param css Optional CSS attributes to apply to the root of the new element.
     * @return The new element.
     */
    function createElement(html: string, appendTo?: HTMLElement, css?: any): HTMLElement;
    /**
     * Sets the text content of an element.
     *
     * @param e Element that will have its content updated.
     * @param text Plain text to be assigned to the element.
     */
    function setText(e: HTMLElement, text: string): void;
    /**
     * Checks whether an HTML element contains another.
     *
     * @param parent Parent element.
     * @param child Child element.
     * @param popup Whether to take Wijmo popups into account.
     * @return True if the parent element contains the child element.
     */
    function contains(parent: any, child: any, popup?: boolean): boolean;
    /**
     * Finds the closest ancestor (including the original element) that satisfies a selector.
     *
     * @param e Element where the search should start.
     * @param selector A string containing a selector expression to match elements against.
     * @return The closest ancestor that satisfies the selector, or null if not found.
     */
    function closest(e: any, selector: string): Element;
    /**
     * Finds the closest ancestor (including the original element) that satisfies a class selector.
     *
     * @param e Element where the search should start.
     * @param className A string containing the class name to match elements against.
     * @return The closest ancestor that has the specified class name, or null if not found.
     */
    function closestClass(e: any, className: string): Node;
    /**
     * Enables or disables an element.
     *
     * @param e Element to enable or disable.
     * @param value Whether to enable or disable the element.
     */
    function enable(e: HTMLElement, value: boolean): void;
    /**
     * Gets the bounding rectangle of an element in page coordinates.
     *
     * This is similar to the <b>getBoundingClientRect</b> function,
     * except that uses viewport coordinates, which change when the
     * document scrolls.
     */
    function getElementRect(e: Element): Rect;
    /**
     * Modifies the style of an element by applying the properties specified in an object.
     *
     * @param e Element or array of elements whose style will be modified.
     * @param css Object containing the style properties to apply to the element.
     */
    function setCss(e: any, css: any): void;
    /**
     * Represents a method called periodically while handling calls to
     * the {@link animate} method.
     */
    interface IAnimateCallback {
        /**
         * @param percentage Value ranging from zero to one that indicates how
         * far along the animation is.
         */
        (percentage: number): void;
    }
    /**
     * Calls a function on a timer with a parameter varying between zero and one.
     *
     * Use this function to create animations by modifying document properties
     * or styles on a timer.
     *
     * For example, the code below changes the opacity of an element from zero
     * to one in one second:
     *
     * ```typescript
     * import { animate } from '@grapecity/wijmo';
     * const element = document.getElementById('someElement');
     * animate(pct => {
     *     element.style.opacity = pct;
     * }, 1000);
     * ```
     *
     * The function returns an interval ID that you can use to stop the
     * animation. This is typically done when you are starting a new animation
     * and wish to suspend other on-going animations on the same element.
     * For example, the code below keeps track of the interval ID and clears
     * if before starting a new animation:
     *
     * ```typescript
     * import { animate } from '@grapecity/wijmo';
     * const element = document.getElementById('someElement');
     * if (this._animInterval) {
     *     clearInterval(this._animInterval);
     * }
     * this._animInterval = animate(pct => {
     *     element.style.opacity = pct;
     *     if (pct == 1) {
     *         self._animInterval = null;
     *     }
     * }, 1000);
     * ```
     *
     * @param apply Callback function that modifies the document.
     * The function takes a single parameter that represents a percentage.
     * @param duration The duration of the animation, in milliseconds.
     * @param step The interval between animation frames, in milliseconds.
     * @return An interval id that you can use to suspend the animation.
     */
    function animate(apply: IAnimateCallback, duration?: number, step?: number): any;
    /**
     * Class that represents a point (with x and y coordinates).
     */
    class Point {
        /**
         * Gets or sets the x coordinate of this {@link Point}.
         */
        x: number;
        /**
         * Gets or sets the y coordinate of this {@link Point}.
         */
        y: number;
        /**
         * Initializes a new instance of the {@link Point} class.
         *
         * @param x X coordinate of the new Point.
         * @param y Y coordinate of the new Point.
         */
        constructor(x?: number, y?: number);
        /**
         * Returns true if a {@link Point} has the same coordinates as this {@link Point}.
         *
         * @param pt {@link Point} to compare to this {@link Point}.
         */
        equals(pt: Point): boolean;
        /**
         * Creates a copy of this {@link Point}.
         */
        clone(): Point;
    }
    /**
     * Class that represents a size (with width and height).
     */
    class Size {
        /**
         * Gets or sets the width of this {@link Size}.
         */
        width: number;
        /**
         * Gets or sets the height of this {@link Size}.
         */
        height: number;
        /**
         * Initializes a new instance of the {@link Size} class.
         *
         * @param width Width of the new {@link Size}.
         * @param height Height of the new {@link Size}.
         */
        constructor(width?: number, height?: number);
        /**
         * Returns true if a {@link Size} has the same dimensions as this {@link Size}.
         *
         * @param sz {@link Size} to compare to this {@link Size}.
         */
        equals(sz: Size): boolean;
        /**
         * Creates a copy of this {@link Size}.
         */
        clone(): Size;
    }
    /**
     * Class that represents a rectangle (with left, top, width, and height).
     */
    class Rect {
        /**
         * Gets or sets the left coordinate of this {@link Rect}.
         */
        left: number;
        /**
         * Gets or sets the top coordinate of this {@link Rect}.
         */
        top: number;
        /**
         * Gets or sets the width of this {@link Rect}.
         */
        width: number;
        /**
         * Gets or sets the height of this {@link Rect}.
         */
        height: number;
        /**
         * Initializes a new instance of the {@link Rect} class.
         *
         * @param left Left coordinate of the new {@link Rect}.
         * @param top Top coordinate of the new {@link Rect}.
         * @param width Width of the new {@link Rect}.
         * @param height Height of the new {@link Rect}.
         */
        constructor(left: number, top: number, width: number, height: number);
        /**
         * Gets the right coordinate of this {@link Rect}.
         */
        readonly right: number;
        /**
         * Gets the bottom coordinate of this {@link Rect}.
         */
        readonly bottom: number;
        /**
         * Returns true if a {@link Rect} has the same coordinates and dimensions
         * as this {@link Rect}.
         *
         * @param rc {@link Rect} to compare to this {@link Rect}.
         */
        equals(rc: Rect): boolean;
        /**
         * Creates a copy of this {@link Rect}.
         */
        clone(): Rect;
        /**
         * Creates a {@link Rect} from <b>ClientRect</b> or <b>SVGRect</b> objects.
         *
         * @param rc Rectangle obtained by a call to the DOM's <b>getBoundingClientRect</b>
         * or <b>GetBoundingBox</b> methods.
         */
        static fromBoundingRect(rc: any): Rect;
        /**
         * Gets a rectangle that represents the union of two rectangles.
         *
         * @param rc1 First rectangle.
         * @param rc2 Second rectangle.
         */
        static union(rc1: Rect, rc2: Rect): Rect;
        /**
         * Gets a rectangle that represents the intersection of two rectangles.
         *
         * @param rc1 First rectangle.
         * @param rc2 Second rectangle.
         */
        static intersection(rc1: Rect, rc2: Rect): Rect;
        /**
         * Determines whether the rectangle contains a given point or rectangle.
         *
         * @param pt The {@link Point} or {@link Rect} to ckeck.
         */
        contains(pt: any): boolean;
        /**
         * Creates a rectangle that results from expanding or shrinking a rectangle by the specified amounts.
         *
         * @param dx The amount by which to expand or shrink the left and right sides of the rectangle.
         * @param dy The amount by which to expand or shrink the top and bottom sides of the rectangle.
         */
        inflate(dx: number, dy: number): Rect;
    }
    /**
     * Provides date and time utilities.
     */
    class DateTime {
        /**
         * Gets a new Date that adds the specified number of days to a given Date.
         *
         * @param value Original date.
         * @param days Number of days to add to the given date.
         */
        static addDays(value: Date, days: number): Date;
        /**
         * Gets a new Date that adds the specified number of months to a given Date.
         *
         * @param value Original date.
         * @param months Number of months to add to the given date.
         */
        static addMonths(value: Date, months: number): Date;
        /**
         * Gets a new Date that adds the specified number of years to a given Date.
         *
         * @param value Original date.
         * @param years Number of years to add to the given date.
         */
        static addYears(value: Date, years: number): Date;
        /**
         * Gets a new Date that adds the specified number of hours to a given Date.
         *
         * @param value Original date.
         * @param hours Number of hours to add to the given date.
         */
        static addHours(value: Date, hours: number): Date;
        /**
         * Gets a new Date that adds the specified number of minutes to a given Date.
         *
         * @param value Original date.
         * @param minutes Number of minutes to add to the given date.
         */
        static addMinutes(value: Date, minutes: number): Date;
        /**
         * Gets a new Date that adds the specified number of seconds to a given Date.
         *
         * @param value Original date.
         * @param seconds Number of seconds to add to the given date.
         */
        static addSeconds(value: Date, seconds: number): Date;
        static weekFirst(value: Date, firstDayOfWeek?: number): Date;
        static weekLast(value: Date, firstDayOfWeek?: number): Date;
        static monthFirst(value: Date): Date;
        static monthLast(value: Date): Date;
        static yearFirst(value: Date): Date;
        static yearLast(value: Date): Date;
        /**
         * Returns true if two Date objects refer to the same date (ignoring time).
         *
         * @param d1 First date.
         * @param d2 Second date.
         */
        static sameDate(d1: Date, d2: Date): boolean;
        /**
         * Returns true if two Date objects refer to the same time (ignoring date).
         *
         * @param d1 First date.
         * @param d2 Second date.
         */
        static sameTime(d1: Date, d2: Date): boolean;
        /**
         * Returns true if two Date objects refer to the same date and time.
         *
         * @param d1 First date.
         * @param d2 Second date.
         */
        static equals(d1: Date, d2: Date): boolean;
        /**
         * Gets a Date object with the date and time set on two Date objects.
         *
         * @param date Date object that contains the date (day/month/year).
         * @param time Date object that contains the time (hour:minute:second.millisecond).
         */
        static fromDateTime(date: Date, time: Date): Date;
        /**
         * Converts a calendar date to a fiscal date using the current culture.
         *
         * @param date Calendar date.
         * @param govt Whether to use the government or corporate fiscal year.
         */
        static toFiscal(date: Date, govt: boolean): Date;
        /**
         * Converts a fiscal year date to a calendar date using the current culture.
         *
         * @param date Fiscal year date.
         * @param govt Whether to use the government or corporate fiscal year.
         */
        static fromFiscal(date: Date, govt: boolean): Date;
        /**
         * Gets a new Date object instance.
         *
         * @param year Integer value representing the year, defaults to current year.
         * @param month Integer value representing the month (0-11), defaults to current month.
         * @param day Integer value representing the day (1-31), defaults to current day.
         * @param hour Integer value representing the hour, defaults to zero.
         * @param min Integer value representing the minute, defaults to zero.
         * @param sec Integer value representing the second, defaults to zero.
         * @param ms Integer value representing the millisecond, defaults to zero.
         */
        static newDate(year?: number, month?: number, day?: number, hour?: number, min?: number, sec?: number, ms?: number): Date;
        /**
         * Creates a copy of a given Date object.
         *
         * @param date Date object to copy.
         */
        static clone(date: Date): Date;
    }
    /**
     * Represents a set of options to be used with the {@link httpRequest} method.
     */
    interface IHttpRequestOptions {
        /**
         * The HTTP method to use for the request (e.g. "POST", "GET", "PUT").
         * The default is "GET".
         */
        method?: string;
        /**
         * Data to be sent to the server. It is appended to the url for GET requests,
         * and converted to a JSON string for other requests.
         */
        data?: any;
        /**
         * A JavaScript object containing key/value pairs to be added to the request headers.
         */
        requestHeaders?: any;
        /**
         * By default, all requests are sent asynchronously (i.e. this is set to true by default).
         * If you need to make synchronous requests, set this option to false.
         */
        async?: boolean;
        /**
         * The number of milliseconds the request can take before automatically being terminated.
         * The default value is 0, which means there is no timeout.
         */
        timeout?: number;
        /**
         * Function to be called if the request succeeds.
         * The function has a single parameter of type <b>XMLHttpRequest</b> that represents the request.
         */
        success?: (x: XMLHttpRequest) => void;
        /**
         * Function to be called if the request fails.
         * The function has a single parameter of type <b>XMLHttpRequest</b> that represents the request.
         */
        error?: (x: XMLHttpRequest) => void;
        /**
         * Function to be called when the request finishes (after success and error callbacks are executed).
         * The function has a single parameter of type <b>XMLHttpRequest</b> that represents the request.
         */
        complete?: (x: XMLHttpRequest) => void;
        /**
         * Function to be called immediately before the request is sent.
         * The function has a single parameter of type <b>XMLHttpRequest</b> that represents the request.
         */
        beforeSend?: (x: XMLHttpRequest) => void;
        /**
         * A username to be used with <b>XMLHttpRequest</b> in response to an HTTP access
         * authentication request.
         */
        user?: string;
        /**
         * A password to be used with <b>XMLHttpRequest</b> in response to an HTTP access
         * authentication request.
         */
        password?: string;
    }
    /**
     * Performs HTTP requests.
     *
     * Use the <b>success</b> method to obtain the result of the request which is provided in
     * the callback's <b>XMLHttpRequest</b> parameter. For example, the code below uses
     * the {@link httpRequest} method to retrieve a list of customers from an OData service:
     *
     * ```typescript
     * import { httpRequest } from '@grapecity/wijmo';
     * httpRequest('https://services.odata.org/Northwind/Northwind.svc/Customers?$format=json', {
     *   success: xhr => {
     *     let response = JSON.parse(xhr.responseText),
     *         customers = response.value;
     *     // do something with the customers...
     *   }
     * });
     * ```
     *
     * @param url String containing the URL to which the request is sent.
     * @param options An optional {@link IHttpRequestOptions} object used to configure the request.
     * @return The <b>XMLHttpRequest</b> object used to perform the request.
     */
    function httpRequest(url: string, options?: IHttpRequestOptions): XMLHttpRequest;
    function _registerModule(name: string, ref: any): void;
    function _getModule(name: string): any;
}
declare module wijmo {
    /**
     * Class that enables the creation of custom documents for printing.
     *
     * The {@link PrintDocument} class makes it easy to create documents for printing or
     * exporting to PDF. Most browsers allow you to select the paper size, orientation,
     * margins, and whether to include page headers and footers.
     *
     * To use, instantiate a {@link PrintDocument}, add content using the {@link append}
     * method, and finish by calling the {@link print} method.
     *
     * For example:
     * ```typescript
     * import { PrintDocument } from '@grapecity/wijmo';
     *
     * // create the document
     * var doc = new PrintDocument({
     *   title: 'PrintDocument Test'
     * });
     *
     * // add some simple text
     * doc.append('&lt;h1&gt;Printing Example&lt;/h1&gt;');
     * doc.append('&lt;p&gt;This document was created using the &lt;b&gt;PrintDocument&lt;/b&gt; class.&lt;/p&gt;');
     *
     * // add some existing elements
     * doc.append(document.getElementById('gaugeControl'));
     *
     * // print the document (or export it to PDF)
     * doc.print();
     * ```
     *
     * The example below shows how you can create a printer-friendly version of
     * a document which can be printed or exported to PDF and other formats
     * directly from the browser:
     *
     * {@sample Core/PrintDocument Example}
     */
    class PrintDocument {
        _iframe: HTMLIFrameElement;
        _title: string;
        _css: string[];
        _copyCss: boolean;
        /**
         * Initializes a new instance of the {@link PrintDocument} class.
         *
         * @param options JavaScript object containing initialization data for the {@link PrintDocument}.
         */
        constructor(options?: any);
        /**
         * Gets or sets the document title.
         *
         * The default value for this property is **null**, which causes the
         * {@link PrintDocument} to use the title from the current document's
         * title tag.
         */
        title: string;
        /**
         * Gets or sets a value that determines whether the {@link PrintDocument}
         * should include the CSS style sheets defined in the main document.
         *
         * The default value for the property is **true**.
         */
        copyCss: boolean;
        /**
         * Adds a CSS style sheet to the document.
         *
         * @param href URL of the CSS file that should be added to the document.
         */
        addCSS(href: string): void;
        /**
         * Appends an HTML string or an element to the document.
         *
         * @param child HTML string or element to append to the document.
         */
        append(child: string | Element): void;
        /**
         * Prints the document.
         *
         * @param callback Optional callback invoked after the document
         * finishes printing.
         */
        print(callback?: Function): void;
        _afterPrint(callback?: Function): void;
        _getDocument(): Document;
        _close(): void;
        _addStyle(style: string): void;
    }
}
declare module wijmo {
    /**
     * Represents a color.
     *
     * The {@link Color} class parses colors specified as CSS strings and exposes
     * their red, green, blue, and alpha channels as read-write properties.
     *
     * The {@link Color} class also provides {@link fromHsb} and {@link fromHsl} methods
     * for creating colors using the HSB and HSL color models instead of RGB,
     * as well as {@link getHsb} and {@link getHsl} methods for retrieving the color
     * components using those color models.
     *
     * Finally, the {@link Color} class provides an {@link interpolate} method that
     * creates colors by interpolating between two colors using the HSL model.
     * This method is especially useful for creating color animations with the
     * {@link animate} method.
     *
     * The example below shows how this works:
     *
     * {@sample Core/Color Example}
     */
    class Color {
        _r: number;
        _g: number;
        _b: number;
        _a: number;
        /**
         * Initializes a new {@link Color} from a CSS color specification.
         *
         * @param color CSS color specification.
         */
        constructor(color: string);
        /**
         * Gets or sets the red component of this {@link Color},
         * in a range from 0 to 255.
         */
        r: number;
        /**
         * Gets or sets the green component of this {@link Color},
         * in a range from 0 to 255.
         */
        g: number;
        /**
         * Gets or sets the blue component of this {@link Color},
         * in a range from 0 to 255.
         */
        b: number;
        /**
         * Gets or sets the alpha component of this {@link Color},
         * in a range from 0 to 1 (zero is transparent, one is solid).
         */
        a: number;
        /**
         * Returns true if a {@link Color} has the same value as this {@link Color}.
         *
         * @param clr {@link Color} to compare to this {@link Color}.
         */
        equals(clr: Color): boolean;
        /**
         * Gets a string representation of this {@link Color}.
         */
        toString(): string;
        /**
         * Creates a new {@link Color} using the specified RGBA color channel values.
         *
         * @param r Value for the red channel, from 0 to 255.
         * @param g Value for the green channel, from 0 to 255.
         * @param b Value for the blue channel, from 0 to 255.
         * @param a Value for the alpha channel, from 0 to 1.
         */
        static fromRgba(r: number, g: number, b: number, a?: number): Color;
        /**
         * Creates a new {@link Color} using the specified HSB values.
         *
         * @param h Hue value, from 0 to 1.
         * @param s Saturation value, from 0 to 1.
         * @param b Brightness value, from 0 to 1.
         * @param a Alpha value, from 0 to 1.
         */
        static fromHsb(h: number, s: number, b: number, a?: number): Color;
        /**
         * Creates a new {@link Color} using the specified HSL values.
         *
         * @param h Hue value, from 0 to 1.
         * @param s Saturation value, from 0 to 1.
         * @param l Lightness value, from 0 to 1.
         * @param a Alpha value, from 0 to 1.
         */
        static fromHsl(h: number, s: number, l: number, a?: number): Color;
        /**
         * Creates a new {@link Color} from a CSS color string.
         *
         * @param value String containing a CSS color specification.
         * @return A new {@link Color}, or null if the string cannot be parsed into a color.
         */
        static fromString(value: string): Color;
        /**
         * Gets an array with this color's HSB components.
         */
        getHsb(): number[];
        /**
         * Gets an array with this color's HSL components.
         */
        getHsl(): number[];
        /**
         * Creates a {@link Color} by interpolating between two colors.
         *
         * @param c1 First color.
         * @param c2 Second color.
         * @param pct Value between zero and one that determines how close the
         * interpolation should be to the second color.
         */
        static interpolate(c1: Color, c2: Color, pct: number): Color;
        /**
         * Gets the closest opaque color to a given color.
         *
         * @param c {@link Color} to be converted to an opaque color
         * (the color may also be specified as a string).
         * @param bkg Background color to use when removing the transparency
         * (defaults to white).
         */
        static toOpaque(c: any, bkg?: any): Color;
        _parse(c: string): boolean;
        /**
         * Converts an HSL color value to RGB.
         *
         * @param h The hue (between zero and one).
         * @param s The saturation (between zero and one).
         * @param l The lightness (between zero and one).
         * @return An array containing the R, G, and B values (between zero and 255).
         */
        static _hslToRgb(h: number, s: number, l: number): number[];
        static _hue2rgb(p: number, q: number, t: number): number;
        /**
         * Converts an RGB color value to HSL.
         *
         * @param r The value of the red channel (between zero and 255).
         * @param g The value of the green channel (between zero and 255).
         * @param b The value of the blue channel (between zero and 255).
         * @return An array containing the H, S, and L values (between zero and one).
         */
        static _rgbToHsl(r: number, g: number, b: number): number[];
        /**
         * Converts an RGB color value to HSB.
         *
         * @param r The value of the red channel (between zero and 255).
         * @param g The value of the green channel (between zero and 255).
         * @param b The value of the blue channel (between zero and 255).
         * @return An array containing the H, S, and B values (between zero and one).
         */
        static _rgbToHsb(r: number, g: number, b: number): number[];
        /**
         * Converts an HSB color value to RGB.
         *
         * @param h The hue (between zero and one).
         * @param s The saturation (between zero and one).
         * @param b The brightness (between zero and one).
         * @return An array containing the R, G, and B values (between zero and 255).
         */
        static _hsbToRgb(h: number, s: number, b: number): number[];
        /**
         * Converts an HSB color value to HSL.
         *
         * @param h The hue (between zero and one).
         * @param s The saturation (between zero and one).
         * @param b The brightness (between zero and one).
         * @return An array containing the H, S, and L values (between zero and one).
         */
        static _hsbToHsl(h: number, s: number, b: number): number[];
        /**
         * Converts an HSL color value to HSB.
         *
         * @param h The hue (between zero and one).
         * @param s The saturation (between zero and one).
         * @param l The lightness (between zero and one).
         * @return An array containing the H, S, and B values (between zero and one).
         */
        static _hslToHsb(h: number, s: number, l: number): number[];
    }
}
declare module wijmo {
    /**
     * Contains information used to format numbers
     */
    interface _INumFormatInfo {
        /** String to display before the formatted value */
        prefix: string;
        /** Format specifier (N, n, D, d, C, c, P, p, X, x, etc) */
        specRaw: string;
        /** Format specifier as lower-case (n, d, c, p, x, etc) */
        spec: string;
        /** Precision (number of decimal places to display) */
        prec: number;
        /** Scale (3 for thousands, 6 for millions, etc) */
        scale: number;
        /** String to display after the formatted value */
        suffix: string;
        /** Currency sign */
        curr: string;
    }
    /**
     * Gets or sets an object that contains all localizable strings in the Wijmo library.
     *
     * The culture selector is a two-letter string that represents an
     * <a href='https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes'>ISO 639 culture</a>.
     */
    var culture: any;
    /**
     * Class that implements formatting and parsing of numbers and Dates.
     *
     * By default, {@link Globalize} uses the American English culture.
     * To switch cultures, include the appropriate **wijmo.culture**
     * file after the wijmo files.
     *
     * The example below shows how you can use the {@link Globalize} class
     * to format dates, times, and numbers in different cultures:
     *
     * {@sample Core/Globalization/Formatting Example}
     */
    class Globalize {
        /**
         * Formats a number or a date.
         *
         * The format strings used with the {@link format} function are similar to
         * the ones used by the .NET Globalization library.
         * The tables below contains links that describe the formats available:
         *
         * <ul>
         * <li><a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings">
         *      Standard Numeric Format Strings</a></li>
         * <li><a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings">
         *      Standard Date and Time Format Strings</a></li>
         * <li><a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings">
         *      Custom Date and Time Format Strings</a></li>
         * </ul>
         *
         * @param value Number or Date to format (all other types are converted to strings).
         * @param format Format string to use when formatting numbers or dates.
         * @param trim Whether to remove trailing zeros from numeric results.
         * @param truncate Whether to truncate the numeric values rather than round them.
         * @return A string representation of the given value.
         */
        static format(value: any, format: string, trim?: boolean, truncate?: boolean): string;
        /**
         * Formats a number using the current culture.
         *
         * The {@link formatNumber} method accepts all .NET-style
         * <a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings">
         * Standard Numeric Format Strings</a> and provides support
         * for scaling, prefixes, suffixes, and custom currency symbols.
         *
         * Numeric format strings take the form <i>Axxsscc</i>, where:
         * <ul>
         * <li>
         *  <i>A</i> is a single alphabetic character called the format
         *  specifier (described below).</li>
         * <li>
         *  <i>xx</i> is an optional integer called the precision specifier.
         *  The precision specifier affects the number of digits in the result.</li>
         * <li>
         *  <i>ss</i> is an optional string used to scale the number. If provided,
         *  it must consist of commas. The number is divided by 1000 for each comma
         *  specified.</li>
         * <li>
         *  <i>cc</i> is an optional string used to override the currency symbol
         *  when formatting currency values. This is useful when formatting
         *  currency values for cultures different than the current default
         *  (for example, when formatting Euro or Yen values in applications
         *  that use the English culture).</li>
         * </ul>
         *
         * The following table describes the standard numeric format specifiers and
         * displays sample output produced by each format specifier for the default
         * culture.
         *
         * <b>c</b> Currency: <code>formatNumber(1234, 'c') => '$1,234.00'</code><br/>
         * <b>d</b> Decimal (integers): <code>formatNumber(-1234, 'd6') => '-001234'</code><br/>
         * <b>e</b> Scientific Notation (lower-case 'e'): <code>formatNumber(123.456, 'e6') => '1.234560e+2'</code>
         * <b>E</b> Scientific Notation (upper-case 'e'): <code>formatNumber(123.456, 'E6') => '1.234560E+2'</code>
         * <b>f</b> Fixed-point: <code>formatNumber(1234.5, 'f2') => '1234.50'</code><br/>
         * <b>F</b> Fixed-point (with thousand separators): <code>formatNumber(1234.5, 'F2') => '1,234.50'</code><br/>
         * <b>g</b> General (no trailing zeros): <code>formatNumber(1234.50, 'g2') => '1234.5'</code><br/>
         * <b>G</b> General (no trailing zeros, thousand separators): <code>formatNumber(1234.5, 'G2') => '1,234.5'</code><br/>
         * <b>n</b> Number: <code>formatNumber(1234.5, 'n2') => '1,234.50'</code><br/>
         * <b>p</b> Percent: <code>formatNumber(0.1234, 'p2') => '12.34 %'</code>
         * <b>r</b> Round-trip (same as g15): <code>formatNumber(0.1234, 'r') => '0.1234'</code>
         * <b>x</b> Hexadecimal (integers): <code>formatNumber(1234, 'x6') => '0004d2'</code><br/>
         *
         * The scaling specifier is especially useful when charting large values. For
         * example, the markup below creates a chart that plots population versus GDP.
         * The raw data expresses the population is units and the GDP in millions.
         * The scaling specified in the axes formats causes the chart to show population
         * in millions and GDP in trillions:
         *
         * ```typescript
         * import { FlexChart} from '@grapecity/wijmo.chart';
         * new FlexChart('#theChart', {
         *     itemsSource: countriesGDP,
         *     bindingX: 'pop',
         *     chartType: 'Scatter',
         *     series: [
         *         { name: 'GDP', binding: 'gdp' }
         *     ],
         *     axisX: {
         *         title: 'Population (millions)'
         *         format: 'n0,,'
         *     },
         *     axisY: {
         *         title: 'GDP (US$ trillions)'
         *         format: 'c0,,'
         *     }
         * });
         * ```
         *
         * The format string may also include constant prefix and suffix
         * strings to be added to the output.
         * If present, the prefix and suffix are specified as *double-quoted*
         * strings at the start and end of the format string:
         *
         * ```typescript
         * import { Globalize } from '@grapecity/wijmo';
         * console.log(Globalize.formatNumber(value, '"thousands: "c3," k"'));
         * console.log(Globalize.formatNumber(value, '"millions: "c1,," M"'));
         * ```
         *
         * @param value Number to format.
         * @param format .NET-style standard numeric format string (e.g. 'n2', 'c4', 'p0', 'g2', 'd2').
         * @param trim Whether to remove trailing zeros from the result.
         * @param truncate Whether to truncate the value rather than round it.
         * @return A string representation of the given number.
         */
        static formatNumber(value: number, format: string, trim?: boolean, truncate?: boolean): string;
        /**
         * Formats a date using the current culture.
         *
         * The {@link format} parameter contains a .NET-style
         * <a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings">Date format string</a>
         * with the following additions:
         * <ul>
         *  <li><i>Q, q</i> Calendar quarter.</li>
         *  <li><i>U</i> Fiscal quarter (government).</li>
         *  <li><i>u</i> Fiscal quarter (private sector).</li>
         *  <li><i>EEEE, EEE, EE, E</i> Fiscal year (government).</li>
         *  <li><i>eeee, eee, ee, e</i> Fiscal year (private sector).</li>
         * </ul>
         *
         * For example:
         *
         * ```typescript
         * import { Globalize } from '@grapecity/wijmo';
         * let dt = new Date(2015, 9, 1); // Oct 1, 2015
         * console.log('result', Globalize.format(dt, '"FY"EEEE"Q"U') + ' (US culture)');
         * **result** FY2016Q1 (US culture)
         * ```
         *
         * Another addition is available for dealing with complex eras such
         * as those defined in the Japanese culture:
         *
         * <ul>
         *  <li><i>ggg</i> Era name (e.g. '平成', '昭和', '大正', or '明治').</li>
         *  <li><i>gg</i> Era initial (e.g. '平', '昭', '大', or '明').</li>
         *  <li><i>g</i> Era symbol (e.g. 'H', 'S', 'T', or 'M').</li>
         * </ul>
         *
         * {@sample Core/Globalization/Formatting/purejs Example}
         *
         * @param value Number or Date to format.
         * @param format .NET-style Date format string.
         * @return A string representation of the given date.
         */
        static formatDate(value: Date, format: string): string;
        /**
         * Parses a string into an integer.
         *
         * @param value String to convert to an integer.
         * @param format Format to use when parsing the number.
         * @return The integer represented by the given string,
         * or **NaN** if the string cannot be parsed into an integer.
         */
        static parseInt(value: string, format?: string): number;
        /**
         * Parses a string into a floating point number.
         *
         * @param value String to convert to a number.
         * @param format Format to use when parsing the number.
         * @return The floating point number represented by the given string,
         * or **NaN** if the string cannot be parsed into a floating point number.
         */
        static parseFloat(value: string, format?: string): number;
        /**
         * Parses a string into a Date.
         *
         * Two-digit years are converted to full years based on the value of the
         * calendar's **twoDigitYearMax** property. By default, this is set to
         * 2029, meaning two-digit values of 30 to 99 are parsed as 19xx, and values
         * from zero to 29 are parsed as 20xx.
         *
         * You can change this threshold by assigning a new value to the calendar.
         * For example:
         *
         * <pre>// get calendar
         * var cal = wijmo.culture.Globalize.calendar;
         *
         * // default threshold is 2029, so "30" is parsed as 1930
         * cal.twoDigitYearMax = 2029;
         * var d1 = wijmo.Globalize.parseDate('30/12', 'yy/MM'); // dec 1930
         *
         * // changing threshold to 2100, so all values are parsed as 20**
         * cal.twoDigitYearMax = 2100;
         * var d2 = wijmo.Globalize.parseDate('30/12', 'yy/MM'); // dec 2030</pre>
         *
         * @param value String to convert to a Date.
         * @param format Format string used to parse the date.
         * @param refDate Date to use as a reference in case date or time
         * parts are not specified in the format string (e.g. format = 'MM/dd').
         * @return The Date object represented by the given string, or null
         * if the string cannot be parsed into a Date.
         */
        static parseDate(value: string, format: string, refDate?: Date): Date;
        static _CJK: string;
        /**
         * Gets the first day of the week according to the current culture.
         *
         * The value returned is between zero (Sunday) and six (Saturday).
         */
        static getFirstDayOfWeek(): number;
        /**
         * Gets the symbol used as a decimal separator in numbers.
         */
        static getNumberDecimalSeparator(): string;
        private static _toFixedStr;
        private static _unquote;
        private static _numFormatInfo;
        static _parseNumericFormat(format: string): _INumFormatInfo;
        private static _dateFormatParts;
        private static _parseDateFormat;
        private static _formatDatePart;
        private static _getEra;
        private static _expandFormat;
        private static _zeroPad;
        private static _h12;
        private static _shiftDecimal;
    }
    function _updateCulture(c: any): void;
    function _addCultureInfo(member: string, info: any): void;
}
declare module wijmo {
    /**
     * Class that provides masking services to an HTMLInputElement.
     */
    class _MaskProvider {
        _tbx: HTMLInputElement;
        _msk: string;
        _promptChar: string;
        _mskArr: _MaskElement[];
        _firstPos: number;
        _lastPos: number;
        _backSpace: boolean;
        _composing: boolean;
        _full: boolean;
        _matchEnd: number;
        _autoComplete: string;
        _spellCheck: boolean;
        _inputBnd: any;
        _keydownBnd: any;
        _keypressBnd: any;
        _cmpstartBnd: any;
        _cmpendBnd: any;
        _evtInput: any;
        static _X_DBCS_BIG_HIRA: string;
        static _X_DBCS_BIG_KATA: string;
        static _X_SBCS_BIG_KATA: string;
        /**
         * Initializes a new instance of the {@link _MaskProvider} class.
         *
         * @param input Input element to be masked.
         * @param mask Input mask.
         * @param promptChar Character used to indicate input positions.
         */
        constructor(input: HTMLInputElement, mask?: any, promptChar?: string);
        /**
         * Gets or sets the Input element to be masked.
         */
        input: HTMLInputElement;
        /**
         * Gets or sets the input mask used to validate input.
         */
        mask: string;
        /**
         * Gets or sets the input mask used to validate input.
         */
        promptChar: string;
        /**
         * Gets a value that indicates whether the mask has been completely filled.
         */
        readonly maskFull: boolean;
        /**
         * Gets an array with the position of the first and last wildcard characters in the mask.
         */
        getMaskRange(): number[];
        /**
         * Gets the raw value of the editor, excluding prompts and literals.
         */
        getRawValue(): string;
        /**
         * Updates the control mask and content.
         */
        refresh(): void;
        _input(e: KeyboardEvent): void;
        _keydown(e: KeyboardEvent): void;
        _keypress(e: KeyboardEvent): void;
        _cmpstart(e: CompositionEvent): void;
        _cmpend(e: CompositionEvent): void;
        _preventKey(charCode: number): boolean;
        _connect(connect: boolean): void;
        _valueChanged(): boolean;
        _applyMask(): string;
        _handleVagueLiterals(text: string): string;
        _isCharValid(mask: string, c: string): boolean;
        _isDigit(c: string): boolean;
        _isLetter(c: string): boolean;
        _validatePosition(start: number): void;
        _parseMask(): void;
    }
    /**
     * Class that contains information about a position in an input mask.
     */
    class _MaskElement {
        wildCard: string;
        charCase: string;
        literal: string;
        vague: boolean;
        /**
         * Initializes a new instance of the {@link _MaskElement} class.
         *
         * @param wildcardOrLiteral Wildcard or literal character
         * @param charCase Whether to convert wildcard matches to upper or lowercase.
         */
        constructor(wildcardOrLiteral: string, charCase?: string);
    }
}
declare module wijmo {
    /**
     * Specifies the type of aggregate to calculate over a group of values.
     */
    enum Aggregate {
        /**
         * No aggregate.
         */
        None = 0,
        /**
         * Returns the sum of the numeric values in the group.
         */
        Sum = 1,
        /**
         * Returns the count of non-null values in the group.
         */
        Cnt = 2,
        /**
         * Returns the average value of the numeric values in the group.
         */
        Avg = 3,
        /**
         * Returns the maximum value in the group.
         */
        Max = 4,
        /**
         * Returns the minimum value in the group.
         */
        Min = 5,
        /**
         * Returns the difference between the maximum and minimum numeric values in the group.
         */
        Rng = 6,
        /**
         * Returns the sample standard deviation of the numeric values in the group
         * (uses the formula based on n-1).
         */
        Std = 7,
        /**
         * Returns the sample variance of the numeric values in the group
         * (uses the formula based on n-1).
         */
        Var = 8,
        /**
         * Returns the population standard deviation of the values in the group
         * (uses the formula based on n).
         */
        StdPop = 9,
        /**
         * Returns the population variance of the values in the group
         * (uses the formula based on n).
         */
        VarPop = 10,
        /**
         * Returns the count of all values in the group (including nulls).
         */
        CntAll = 11,
        /**
         * Returns the first non-null value in the group.
         */
        First = 12,
        /**
         * Returns the last non-null value in the group.
         */
        Last = 13
    }
    /**
     * Calculates an aggregate value from the values in an array.
     *
     * @param aggType Type of aggregate to calculate.
     * @param items Array with the items to aggregate.
     * @param binding Name of the property to aggregate on (in case the items are not simple values).
     */
    function getAggregate(aggType: Aggregate, items: any[], binding?: string): any;
}
declare module wijmo.collections {
    /**
     * Base class for Array classes with notifications.
     */
    class ArrayBase<T = any> extends Array<T> {
        /**
         * Initializes a new instance of the {@link ArrayBase} class.
         */
        constructor();
    }
    /**
     * Array that sends notifications on changes.
     *
     * The class raises the {@link collectionChanged} event when changes are made with
     * the push, pop, splice, insert, or remove methods.
     *
     * Warning: Changes made by assigning values directly to array members or to the
     * length of the array do not raise the {@link collectionChanged} event.
     */
    class ObservableArray<T = any> extends ArrayBase<T> implements INotifyCollectionChanged {
        private _updating;
        /**
         * Initializes a new instance of the {@link ObservableArray} class.
         *
         * @param data Array containing items used to populate the {@link ObservableArray}.
         */
        constructor(data?: T[]);
        /**
         * Adds one or more items to the end of the array.
         *
         * @param ...item One or more items to add to the array.
         * @return The new length of the array.
         */
        push(...item: T[]): number;
        pop(): any;
        /**
         * Removes and/or adds items to the array.
         *
         * @param index Position where items will be added or removed.
         * @param count Number of items to remove from the array.
         * @param  ...item One or more items to add to the array.
         * @return An array containing the removed elements.
         */
        splice(index: number, count: number, ...item: T[]): T[];
        /**
         * Creates a shallow copy of a portion of an array.
         *
         * @param begin Position where the copy starts.
         * @param end Position where the copy ends.
         * @return A shallow copy of a portion of an array.
         */
        slice(begin?: number, end?: number): T[];
        /**
         * Searches for an item in the array.
         *
         * @param searchElement Element to locate in the array.
         * @param fromIndex The index where the search should start.
         * @return The index of the item in the array, or -1 if the item was not found.
         */
        indexOf(searchElement: T, fromIndex?: number): number;
        /**
         * Sorts the elements of the array in place.
         *
         * @param compareFn Specifies a function that defines the sort order.
         * If specified, the function should take two arguments and should return
         * -1, +1, or 0 to indicate the first argument is smaller, greater than,
         * or equal to the second argument.
         * If omitted, the array is sorted in dictionary order according to the
         * string conversion of each element.
         * @return A copy of the sorted array.
         */
        sort(compareFn?: Function): this;
        /**
         * Inserts an item at a specific position in the array.
         *
         * @param index Position where the item will be added.
         * @param item Item to add to the array.
         */
        insert(index: number, item: T): void;
        /**
         * Removes an item from the array.
         *
         * @param item Item to remove.
         * @return True if the item was removed, false if it wasn't found in the array.
         */
        remove(item: T): boolean;
        /**
         * Removes an item at a specific position in the array.
         *
         * @param index Position of the item to remove.
         */
        removeAt(index: number): void;
        /**
         * Assigns an item at a specific position in the array.
         *
         * @param index Position where the item will be assigned.
         * @param item Item to assign to the array.
         */
        setAt(index: number, item: T): void;
        /**
         * Removes all items from the array.
         */
        clear(): void;
        /**
         * Suspends notifications until the next call to {@link endUpdate}.
         */
        beginUpdate(): void;
        /**
         * Resumes notifications suspended by a call to {@link beginUpdate}.
         */
        endUpdate(): void;
        /**
         * Gets a value that indicates whether notifications are currently suspended
         * (see {@link beginUpdate} and {@link endUpdate}).
         */
        readonly isUpdating: boolean;
        /**
         * Executes a function within a {@link beginUpdate}/{@link endUpdate} block.
         *
         * The collection will not be refreshed until the function finishes.
         * This method ensures {@link endUpdate} is called even if the function throws
         * an exception.
         *
         * @param fn Function to be executed without updates.
         */
        deferUpdate(fn: Function): void;
        /**
         * Returns true if the caller queries for a supported interface.
         *
         * @param interfaceName Name of the interface to look for.
         * @return True if the caller queries for a supported interface.
         */
        implementsInterface(interfaceName: string): boolean;
        /**
         * Occurs when the collection changes.
         */
        readonly collectionChanged: Event<ObservableArray<T>, NotifyCollectionChangedEventArgs<T>>;
        /**
         * Raises the {@link collectionChanged} event.
         *
         * @param e Contains a description of the change.
         */
        onCollectionChanged(e?: NotifyCollectionChangedEventArgs<any>): void;
        private _raiseCollectionChanged;
    }
}
declare module wijmo.collections {
    /**
     * Represents a method that takes no arguments and returns a new data object.
     */
    interface IItemCreator<T = any> {
        (): T;
    }
    /**
     * Represents a method that provides an alternate data item
     * to be used when sorting collections.
     */
    interface ISortConverter<T = any> {
        /**
         * @param sd {@link SortDescription} that describes the property being sorted and the sort direction.
         * @param item Data item being sorted.
         * @param value Value of the item property.
         * @param extra Optional parameter with custom information.
         * @returns The data item to use when sorting.
         */
        (sd: SortDescription, item: T, value: any, custom?: any): any;
    }
    /**
     * Represents a method that identifies errors in data items.
     */
    interface IGetError<T = any> {
        /**
         * @param item Item to be inspected.
         * @param property Property to be inspected.
         * @param parsing Whether the value is being edited and could not be parsed into the right data type.
         * @returns A string describing the error, if any, or null to indicate there are no errors.
         */
        (item: T, property: string, parsing?: boolean): string | null;
    }
    /**
     * Specifies constants that define how null values are sorted.
     */
    enum SortNulls {
        /** Null values are sorted in natural order (first in ascending, last in descending order). */
        Natural = 0,
        /** Null values appear first (regardless of sort order). */
        First = 1,
        /** Null values appear last (regardless of sort order). */
        Last = 2
    }
    /**
     * Class that implements the {@link ICollectionView} interface to expose data in
     * regular JavaScript arrays.
     *
     * The {@link CollectionView} class implements the following interfaces:
     * <ul>
     *   <li>{@link ICollectionView}: provides current record management,
     *       custom sorting, filtering, and grouping.</li>
     *   <li>{@link IEditableCollectionView}: provides methods for editing,
     *       adding, and removing items.</li>
     *   <li>{@link IPagedCollectionView}: provides paging.</li>
     * </ul>
     *
     * To use the {@link CollectionView} class, start by declaring it and passing a
     * regular array as a data source. Then configure the view using the
     * {@link filter}, {@link sortDescriptions}, {@link groupDescriptions}, and
     * {@link pageSize} properties. Finally, access the view using the {@link items}
     * property. For example:
     *
     * ```typescript
     * import { CollectionView, SortDescription} from '@grapecity/wijmo';
     *
     * // create a CollectionView based on a data array
     * let view = new CollectionView(dataArray);
     *
     * // sort items by amount in descending order
     * let sortDesc = new SortDescription('amount', false);
     * view.sortDescriptions.push(sortDesc);
     *
     * // show only items with amounts greater than 100
     * view.filter = (item) => { return item.amount > 100 };
     *
     * // show the sorted, filtered result on the console
     * view.items.forEach((item, index) => {
     *     console.log(index + ': ' + item.name + ' ' + item.amount);
     * });
     * ```
     *
     * The example below shows how you can use a {@link CollectionView}
     * to provide sorted views of some raw data:
     *
     * {@sample Core/CollectionView/CreatingViews/Sorting/Overview Example}
     */
    class CollectionView<T = any> implements IEditableCollectionView, IPagedCollectionView {
        _srcRaw: T[];
        _src: T[];
        _ncc: INotifyCollectionChanged;
        _view: T[];
        _pgView: T[];
        _groups: CollectionViewGroup[];
        _fullGroups: CollectionViewGroup[];
        _digest: string;
        _idx: number;
        _filter: IPredicate;
        _filters: ObservableArray<IPredicate<any>>;
        _srtDsc: ObservableArray<SortDescription>;
        _grpDesc: ObservableArray<GroupDescription>;
        _newItem: T;
        _edtItem: T;
        _edtClone: any;
        _committing: boolean;
        _canceling: boolean;
        _pendingRefresh: boolean;
        _pgSz: number;
        _pgIdx: number;
        _updating: number;
        _itemCreator: IItemCreator<T>;
        _stableSort: boolean;
        _srtNulls: SortNulls;
        _canFilter: boolean;
        _canGroup: boolean;
        _canSort: boolean;
        _canAddNew: boolean;
        _canCancelEdit: boolean;
        _canRemove: boolean;
        _canChangePage: boolean;
        _refreshOnEdit: boolean;
        _trackChanges: boolean;
        _chgAdded: ObservableArray<T>;
        _chgRemoved: ObservableArray<T>;
        _chgEdited: ObservableArray<T>;
        _srtCvt: ISortConverter<T>;
        _srtCmp: IComparer<T>;
        _getError: IGetError<T>;
        _keepCurrentItem: boolean;
        _calcFields: any;
        static _collator: Intl.Collator;
        /**
         * Initializes a new instance of the {@link CollectionView} class.
         *
         * @param sourceCollection Array that serves as a source for this
         * {@link CollectionView}.
         * @param options JavaScript object containing initialization data for the control.
         */
        constructor(sourceCollection?: any, options?: any);
        _copy(key: string, value: any): boolean;
        calculatedFields: any;
        /**
         * Gets or sets a function that creates new items for the collection.
         *
         * If the creator function is not supplied, the {@link CollectionView}
         * will try to create an uninitialized item of the appropriate type.
         *
         * If the creator function is supplied, it should be a function that
         * takes no parameters and returns an initialized object of the proper
         * type for the collection.
         */
        newItemCreator: IItemCreator<T>;
        /**
         * Gets or sets a function used to convert values when sorting.
         *
         * If provided, the function should take as parameters a
         * {@link SortDescription}, a data item, and a value to convert,
         * and should return the converted value.
         *
         * This property provides a way to customize sorting. For example,
         * the {@link FlexGrid} control uses it to sort mapped columns by
         * display value instead of by raw value.
         *
         * For example, the code below causes a {@link CollectionView} to
         * sort the 'country' property, which contains country code integers,
         * using the corresponding country names:
         *
         * ```typescript
         * const countries = 'US,Germany,UK,Japan,Italy,Greece'.split(',');
         * view.sortConverter = (sd: SortDescription, item: any, value: any) => {
         *     return sd.property === 'countryMapped'
         *         ? countries[value]; // convert country id into name
         *         : value;
         * }
         * ```
         *
         * The next example combines two values so when sorting by country,
         * the view will break ties by city:
         *
         * ```typescript
         * view.sortConverter: (sd: SortDescription, item: any, value: any) => {
         *     if (sd.property == 'country') {
         *         value = item.country + '\t' + item.city;
         *     }
         *     return value;
         * }
         * ```
         */
        sortConverter: ISortConverter;
        /**
         * Gets or sets a function used to compare values when sorting.
         *
         * If provided, the sort comparer function should take as parameters
         * two values of any type, and should return -1, 0, or +1 to indicate
         * whether the first value is smaller than, equal to, or greater than
         * the second. If the sort comparer returns null, the standard built-in
         * comparer is used.
         *
         * This {@link sortComparer} property allows you to use custom comparison
         * algorithms that in some cases result in sorting sequences that are
         * more consistent with user's expectations than plain string comparisons.
         *
         * For example, see
         * <a href="http://www.davekoelle.com/alphanum.html">Dave Koele's Alphanum algorithm</a>.
         * It breaks up strings into chunks composed of strings or numbers, then
         * sorts number chunks in value order and string chunks in ASCII order.
         * Dave calls the result a "natural sorting order".
         *
         * The example below shows a typical use for the {@link sortComparer} property:
         *
         * ```typescript
         * import { CollectionView, isString } from '@grapecity/wijmo';
         *
         * // create a CollectionView with a custom sort comparer
         * const view = new CollectionView(data, {
         *     sortComparer: (a: any, b: any) => {
         *         return isString(a) && isString(b)
         *             ? alphanum(a, b) // use custom comparer for strings
         *             : null; // use default comparer for everything else
         *     }
         * });
         * ```
         *
         * The example below shows how you can use an
         * <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator">Intl.Collator</a>
         * to control the sort order:
         *
         * ```typescript
         * import { CollectionView, isString } from '@grapecity/wijmo';
         *
         * // create a CollectionView that uses an Intl.Collator to sort
         * const collator = window.Intl ? new Intl.Collator() : null;
         * let view = new CollectionView(data, {
         *     sortComparer: (a, b) => {
         *         return isString(a) && isString(b) && collator
         *             ? collator.compare(a, b) // use collator for strings
         *             : null; // use default comparer for everything else
         *     }
         * });
         * ```
         */
        sortComparer: IComparer<T>;
        /**
         * Gets or sets whether to use a stable sort algorithm.
         *
         * Stable sorting algorithms maintain the relative order of records with equal keys.
         * For example, consider a collection of objects with an "Amount" field.
         * If you sort the collection by "Amount", a stable sort will keep the original
         * order of records with the same Amount value.
         *
         * This property is set to **false** by default, which causes the {@link CollectionView}
         * to use JavaScript's built-in sort method, which is fast but not garanteed to be stable.
         *
         * Setting the {@link useStableSort} property to true ensures stable sorts on all
         * browsers, but increases sort times by 30% to 50%.
         *
         * Note: Chrome provides stable sorting since version 70, and Firefox since version 3.
         * As of ES2019, sort is **required** to be stable. In ECMAScript 1st edition through
         * ES2018, it was allowed to be unstable.
         */
        useStableSort: boolean;
        /**
         * Gets or sets a value that determines how null values should be sorted.
         *
         * This property is set to **Last** by default, which causes null values
         * to appear last on the sorted collection, regardless of sort direction.
         * This is also the default behavior in Excel.
         */
        sortNulls: SortNulls;
        sortNullsFirst: boolean;
        /**
         * Calculates an aggregate value for the items in this collection.
         *
         * @param aggType Type of aggregate to calculate.
         * @param binding Property to aggregate on.
         * @param currentPage Whether to include only items on the current page.
         * @return The aggregate value.
         */
        getAggregate(aggType: wijmo.Aggregate, binding: string, currentPage?: boolean): any;
        /**
         * Gets or sets a value that determines whether the control should
         * track changes to the data.
         *
         * If {@link trackChanges} is set to true, the {@link CollectionView} keeps
         * track of changes to the data and exposes them through the
         * {@link itemsAdded}, {@link itemsRemoved}, and {@link itemsEdited} collections.
         *
         * Tracking changes is useful in situations where you need to update
         * the server after the user has confirmed that the modifications are
         * valid.
         *
         * After committing or cancelling changes, use the {@link clearChanges} method
         * to clear the {@link itemsAdded}, {@link itemsRemoved}, and {@link itemsEdited}
         * collections.
         *
         * The {@link CollectionView} only tracks changes made when the proper
         * {@link CollectionView} methods are used ({@link editItem}/{@link commitEdit},
         * {@link addNew}/{@link commitNew}, and {@link remove}).
         * Changes made directly to the data are not tracked.
         */
        trackChanges: boolean;
        /**
         * Gets or sets a value that determines whether the {@link CollectionView}
         * should automatically refresh its results (by applying the sort, filter,
         * and grouping operations) after items are edited.
         *
         * This property is set to **true** by default, which ensures the
         * collection is always sorted, filtered, and grouped correctly after any
         * edit operations.
         *
         * Set it to **false** if you want updates to be deferred when items
         * are edited. In this case, the collection will not be refreshed until
         * the sorting, filtering, and grouping criteria change or until the
         * {@link refresh} method is called (Excel behavior).
         */
        refreshOnEdit: boolean;
        /**
         * Gets an {@link ObservableArray} containing the records that were added to
         * the collection since {@link trackChanges} was enabled.
         */
        readonly itemsAdded: ObservableArray;
        /**
         * Gets an {@link ObservableArray} containing the records that were removed from
         * the collection since {@link trackChanges} was enabled.
         */
        readonly itemsRemoved: ObservableArray;
        /**
         * Gets an {@link ObservableArray} containing the records that were edited in
         * the collection since {@link trackChanges} was enabled.
         */
        readonly itemsEdited: ObservableArray;
        /**
         * Clears all changes by removing all items in the {@link itemsAdded},
         * {@link itemsRemoved}, and {@link itemsEdited} collections.
         *
         * Call this method after committing changes to the server or
         * after refreshing the data from the server.
         */
        clearChanges(): void;
        /**
         * Returns true if this object supports a given interface.
         *
         * @param interfaceName Name of the interface to look for.
         */
        implementsInterface(interfaceName: string): boolean;
        /**
         * Gets or sets a callback that determines whether a specific property
         * of an item contains validation errors.
         *
         * The method takes as parameters a data item, the property being validated,
         * and a parsing parameter that describes whether the data has already been
         * parsed and applied to the data item (parsing == false), or whether the user
         * was trying to edit the value and entered a value that could not be parsed
         * into the data type expected (parsing == true).
         *
         * The method returns a string containing an error message, or null if no
         * errors were detected.
         *
         * For example,
         *
         * ```typescript
         * view = new CollectionView(data, {
         *     getError: (item: any, prop: string, parsing: boolean) => {
         *
         *         // parsing failed, show message
         *         if (parsing) {
         *             if (prop == 'date') {
         *                 return 'Please enter a valid date in the format "MM/dd/yyyy"';
         *             } else if (prop == 'id') {
         *                 return 'Please enter a positive number';
         *             }
         *         }
         *
         *         // check that stored (parsed) data is valid
         *         if (prop == 'date' && item.date < minDate) {
         *             return 'Please enter a date after ' + Globalize.formatDate(minDate, 'd');
         *         } else if (prop == 'id' && item.id < 0) {
         *             return 'Please enter a positive number';
         *         }
         *     }
         * });
         * ```
         */
        getError: IGetError;
        /**
         * Occurs when the collection changes.
         */
        readonly collectionChanged: Event<CollectionView<T>, NotifyCollectionChangedEventArgs<T>>;
        /**
         * Raises the {@link collectionChanged} event.
         *
         * @param e Contains a description of the change.
         */
        onCollectionChanged(e?: NotifyCollectionChangedEventArgs<any>): void;
        protected _raiseCollectionChanged(action?: NotifyCollectionChangedAction, item?: T, index?: number): void;
        /**
         * Occurs before the value of the {@link sourceCollection} property changes.
         */
        readonly sourceCollectionChanging: Event<CollectionView<T>, CancelEventArgs>;
        /**
         * Raises the {@link sourceCollectionChanging} event.
         *
         * @param e {@link CancelEventArgs} that contains the event data.
         */
        onSourceCollectionChanging(e: wijmo.CancelEventArgs): boolean;
        /**
         * Occurs after the value of the {@link sourceCollection} property changes.
         */
        readonly sourceCollectionChanged: Event<CollectionView<T>, EventArgs>;
        /**
         * Raises the {@link sourceCollectionChanged} event.
         */
        onSourceCollectionChanged(e?: wijmo.EventArgs): void;
        /**
         * Gets a value that indicates whether this view supports filtering via the
         * {@link filter} property.
         */
        canFilter: boolean;
        /**
         * Gets a value that indicates whether this view supports grouping via the
         * {@link groupDescriptions} property.
         */
        canGroup: boolean;
        /**
         * Gets a value that indicates whether this view supports sorting via the
         * {@link sortDescriptions} property.
         */
        canSort: boolean;
        /**
         * Gets or sets the current item in the view.
         */
        currentItem: T;
        /**
         * Gets the ordinal position of the current item in the view.
         */
        currentPosition: number;
        /**
         * Gets or sets a callback used to determine if an item is suitable for
         * inclusion in the view.
         *
         * The callback should return true if the item passed in as a parameter
         * should be included in the view.
         */
        filter: IPredicate;
        /**
         * Gets an array of {@link IPredicate} functions used as filters
         * on this {@link CollectionView}.
         *
         * To be included in the view, an item has to pass the predicate
         * in the {@link filter} property as well as all predicates in
         * the {@link filters} collection.
         */
        readonly filters: ObservableArray<IPredicate>;
        /**
         * Gets a collection of {@link GroupDescription} objects that describe how the
         * items in the collection are grouped in the view.
         */
        readonly groupDescriptions: ObservableArray<GroupDescription>;
        /**
         * Gets an array of {@link CollectionViewGroup} objects that represents the
         * top-level groups.
         */
        readonly groups: CollectionViewGroup[];
        /**
         * Gets a value that indicates whether this view contains no items.
         */
        readonly isEmpty: boolean;
        /**
         * Gets an array of {@link SortDescription} objects that describe how the items
         * in the collection are sorted in the view.
         */
        readonly sortDescriptions: ObservableArray<SortDescription>;
        /**
         * Gets or sets the underlying (unfiltered and unsorted) collection.
         */
        sourceCollection: any;
        private _sourceChanged;
        /**
         * Returns a value indicating whether a given item belongs to this view.
         *
         * @param item Item to seek.
         */
        contains(item: T): boolean;
        /**
         * Sets the specified item to be the current item in the view.
         *
         * @param item Item that will become current.
         */
        moveCurrentTo(item: T): boolean;
        /**
         * Sets the first item in the view as the current item.
         */
        moveCurrentToFirst(): boolean;
        /**
         * Sets the last item in the view as the current item.
         */
        moveCurrentToLast(): boolean;
        /**
         * Sets the item before the current item in the view as the current item.
         */
        moveCurrentToPrevious(): boolean;
        /**
         * Sets the item after the current item in the view as the current item.
         */
        moveCurrentToNext(): boolean;
        /**
         * Sets the item at the specified index in the view as the current item.
         *
         * @param index Index of the item that will become current.
         */
        moveCurrentToPosition(index: number): boolean;
        /**
         * Re-creates the view using the current sort, filter, and group parameters.
         */
        refresh(): void;
        _commitAndRefresh(): void;
        _performRefresh(): void;
        _performSort(items: any[]): void;
        _compareItems(): (a: any, b: any) => number;
        _performFilter(items: any[]): any[];
        _filterItem(item: any): boolean;
        /**
         * Occurs after the current item changes.
         */
        readonly currentChanged: Event<CollectionView<T>, EventArgs>;
        /**
         * Raises the {@link currentChanged} event.
         */
        onCurrentChanged(e?: wijmo.EventArgs): void;
        /**
         * Occurs before the current item changes.
         */
        readonly currentChanging: Event<CollectionView<T>, CancelEventArgs>;
        /**
         * Raises the {@link currentChanging} event.
         *
         * @param e {@link CancelEventArgs} that contains the event data.
         */
        onCurrentChanging(e: wijmo.CancelEventArgs): boolean;
        /**
         * Gets items in the view.
         */
        readonly items: T[];
        /**
         * Suspend refreshes until the next call to {@link endUpdate}.
         */
        beginUpdate(): void;
        /**
         * Resume refreshes suspended by a call to {@link beginUpdate}.
         *
         * @param force Whether to force a refresh when ending the update.
         */
        endUpdate(force?: boolean): void;
        /**
         * Gets a value that indicates whether notifications are currently suspended
         * (see {@link beginUpdate} and {@link endUpdate}).
         */
        readonly isUpdating: boolean;
        /**
         * Executes a function within a {@link beginUpdate}/{@link endUpdate} block.
         *
         * The collection will not be refreshed until the function finishes.
         *
         * The {@link deferUpdate} method ensures {@link endUpdate} is called even
         * if the update function throws an exception.
         *
         * @param fn Function to be executed without updates.
         * @param force Whether to force a refresh when ending the update.
         */
        deferUpdate(fn: Function, force?: boolean): void;
        /**
         * Gets a value that indicates whether a new item can be added to the collection.
         */
        canAddNew: boolean;
        /**
         * Gets a value that indicates whether the collection view can discard pending changes
         * and restore the original values of an edited object.
         */
        canCancelEdit: boolean;
        /**
         * Gets a value that indicates whether items can be removed from the collection.
         */
        canRemove: boolean;
        /**
         * Gets the item that is being added during the current add transaction.
         */
        readonly currentAddItem: T;
        /**
         * Gets the item that is being edited during the current edit transaction.
         */
        readonly currentEditItem: T;
        /**
         * Gets a value that indicates whether an add transaction is in progress.
         */
        readonly isAddingNew: boolean;
        /**
         * Gets a value that indicates whether an edit transaction is in progress.
         */
        readonly isEditingItem: boolean;
        /**
         * Begins an edit transaction of the specified item.
         *
         * @param item Item to be edited.
         */
        editItem(item: T): void;
        /**
         * Ends the current edit transaction and saves the pending changes.
         */
        commitEdit(): void;
        /**
         * Ends the current edit transaction and, if possible,
         * restores the original value to the item.
         */
        cancelEdit(): void;
        /**
         * Adds a new item to the collection.
         *
         * Calling this methods without any parameters creates a new item, adds it to the
         * collection, and defers refresh operations until the new item is committed using
         * the {@link commitNew} method or canceled using the {@link cancelNew} method.
         *
         * The code below shows how the {@link addNew} method is typically used:
         *
         * ```typescript
         * // create the new item, add it to the collection
         * var newItem = view.addNew();
         *
         * // initialize the new item
         * newItem.id = getFreshId();
         * newItem.name = 'New Customer';
         *
         * // commit the new item so the view can be refreshed
         * view.commitNew();
         * ```
         *
         * You can also add new items by pushing them into the {@link sourceCollection}
         * and then calling the {@link refresh} method. The main advantage of {@link addNew}
         * is in user-interactive scenarios (like adding new items in a data grid),
         * because it gives users the ability to cancel the add operation. It also
         * prevents the new item from being sorted or filtered out of view until the
         * transaction is committed.
         *
         * @param item Item to be added to the collection (optional).
         * @param commit Whether to commit the new item immediately.
         * @return The item that was added to the collection, or null if the transaction
         * failed.
         */
        addNew(item?: T, commit?: boolean): T;
        /**
         * Ends the current add transaction and saves the pending new item.
         */
        commitNew(): void;
        /**
         * Ends the current add transaction and discards the pending new item.
         */
        cancelNew(): void;
        /**
         * Removes the specified item from the collection.
         *
         * @param item Item to be removed from the collection.
         */
        remove(item: T): void;
        /**
         * Removes the item at the specified index from the collection.
         *
         * @param index Index of the item to be removed from the collection.
         * The index is relative to the view, not to the source collection.
         */
        removeAt(index: number): void;
        _trackItemChanged(item: T): void;
        _extend(dst: any, src: any, level?: number): void;
        _getChangedFields(dst: any, src: any): string[];
        _needRefresh(changedFields: string[]): boolean;
        _getBindingRoot(name: string): string;
        _sameContent(dst: any, src: any): boolean;
        _sameValue(v1: any, v2: any): boolean;
        /**
         * Gets a value that indicates whether the {@link pageIndex} value can change.
         */
        canChangePage: boolean;
        /**
         * Gets a value that indicates whether the page index is changing.
         */
        readonly isPageChanging: boolean;
        /**
         * Gets the total number of items in the view taking paging into account.
         */
        readonly itemCount: number;
        /**
         * Gets the zero-based index of the current page.
         */
        readonly pageIndex: number;
        /**
         * Gets or sets the number of items to display on each page.
         *
         * The default value for this property is **zero**, which
         * disables paging.
         */
        pageSize: number;
        /**
         * Gets the total number of items in the view before paging is applied.
         */
        readonly totalItemCount: number;
        /**
         * Gets the total number of pages.
         */
        readonly pageCount: number;
        /**
         * Sets the first page as the current page.
         *
         * @return True if the page index was changed successfully.
         */
        moveToFirstPage(): boolean;
        /**
         * Sets the last page as the current page.
         *
         * @return True if the page index was changed successfully.
         */
        moveToLastPage(): boolean;
        /**
         * Moves to the page before the current page.
         *
         * @return True if the page index was changed successfully.
         */
        moveToPreviousPage(): boolean;
        /**
         * Moves to the page after the current page.
         *
         * @return True if the page index was changed successfully.
         */
        moveToNextPage(): boolean;
        /**
         * Moves to the page at the specified index.
         *
         * @param index Index of the page to move to.
         * @return True if the page index was changed successfully.
         */
        moveToPage(index: number): boolean;
        /**
        * Occurs after the page index changes.
        */
        readonly pageChanged: Event<CollectionView<T>, EventArgs>;
        /**
         * Raises the {@link pageChanged} event.
         */
        onPageChanged(e?: wijmo.EventArgs): void;
        /**
         * Occurs before the page index changes.
         */
        readonly pageChanging: Event<CollectionView<T>, PageChangingEventArgs>;
        /**
         * Raises the {@link pageChanging} event.
         *
         * @param e {@link PageChangingEventArgs} that contains the event data.
         */
        onPageChanging(e: PageChangingEventArgs): boolean;
        _getFullGroup(g: CollectionViewGroup): CollectionViewGroup;
        _getGroupByPath(groups: CollectionViewGroup[], level: number, path: string): CollectionViewGroup;
        _getPageView(): T[];
        _createGroups(items: any[]): CollectionViewGroup[];
        private _getGroupsDigest;
        private _mergeGroupItems;
        private _getGroup;
    }
    /**
     * Represents a group created by a {@link CollectionView} object based on
     * its {@link CollectionView.groupDescriptions} property.
     */
    class CollectionViewGroup {
        _gd: GroupDescription;
        _name: string;
        _path: string;
        _level: number;
        _isBottomLevel: boolean;
        _groups: CollectionViewGroup[];
        _items: any[];
        /**
         * Initializes a new instance of the {@link CollectionViewGroup} class.
         *
         * @param groupDescription {@link GroupDescription} that owns the new group.
         * @param name Name of the new group.
         * @param level Level of the new group.
         * @param isBottomLevel Whether this group has any subgroups.
         */
        constructor(groupDescription: GroupDescription, name: string, level: number, isBottomLevel: boolean);
        /**
         * Gets the name of this group.
         */
        readonly name: string;
        /**
         * Gets the level of this group.
         */
        readonly level: number;
        /**
         * Gets a value that indicates whether this group has any subgroups.
         */
        readonly isBottomLevel: boolean;
        /**
         * Gets an array containing the items included in this group (including all subgroups).
         */
        readonly items: any[];
        /**
         * Gets an array containing this group's subgroups.
         */
        readonly groups: CollectionViewGroup[];
        /**
         * Gets the {@link GroupDescription} that owns this group.
         */
        readonly groupDescription: GroupDescription;
        /**
         * Calculates an aggregate value for the items in this group.
         *
         * @param aggType Type of aggregate to calculate.
         * @param binding Property to aggregate on.
         * @param view CollectionView that owns this group.
         * @return The aggregate value.
         */
        getAggregate(aggType: wijmo.Aggregate, binding: string, view?: ICollectionView): any;
    }
}
declare module wijmo {
    var controlBaseClass: ObjectConstructor;
    class ControlBase extends controlBaseClass {
        constructor();
    }
    /**
     * Base class for all Wijmo controls.
     *
     * The {@link Control} class handles the association between DOM elements and the
     * actual control. Use the {@link hostElement} property to get the DOM element
     * that is hosting a control, or the {@link getControl} method to get the control
     * hosted in a given DOM element.
     *
     * The {@link Control} class also provides a common pattern for invalidating and
     * refreshing controls, for updating the control layout when its size changes,
     * and for handling the HTML templates that define the control structure.
     */
    class Control extends ControlBase {
        static _licKey: string;
        static _wme: HTMLElement;
        static _toWme: any;
        static _touching: boolean;
        static _toTouch: any;
        static _REFRESH_INTERVAL: number;
        static _FOCUS_INTERVAL: number;
        static _ANIM_DEF_DURATION: number;
        static _ANIM_DEF_STEP: number;
        static _CLICK_DELAY: number;
        static _CLICK_REPEAT: number;
        static _CLIPBOARD_DELAY: number;
        static _POPUP_ZINDEX: number;
        static _SEARCH_DELAY: number;
        static _HOVER_DELAY: number;
        static _LEAVE_DELAY: number;
        static _DRAG_SCROLL_EDGE: number;
        static _DRAG_SCROLL_STEP: number;
        static _CTRL_KEY: string;
        static _OWNR_KEY: string;
        static _SCRL_KEY: string;
        static _TTIP_KEY: string;
        static _rxInputAtts: RegExp;
        protected _szObserver: any;
        protected _e: HTMLElement;
        protected _orgTabIndex: number;
        protected _orgOuter: string;
        protected _orgTag: string;
        protected _orgAtts: NamedNodeMap;
        protected _listeners: any[];
        protected _pristine: boolean;
        protected _focus: boolean;
        protected _updating: number;
        protected _fullUpdate: boolean;
        protected _toInv: any;
        protected _toFocus: any;
        protected _szCtl: Size;
        protected _rtlDir: boolean;
        /**
         * Initializes a new instance of the {@link Control} class and attaches it to a DOM element.
         *
         * @param element The DOM element that hosts the control, or a CSS selector for the host element (e.g. '#theCtrl').
         * @param options JavaScript object containing initialization data for the control.
         * @param invalidateOnResize Whether the control should be invalidated when it is resized.
         */
        constructor(element: any, options?: any, invalidateOnResize?: boolean);
        /**
         * Gets the HTML template used to create instances of the control.
         *
         * This method traverses up the class hierarchy to find the nearest
         * ancestor that specifies a control template. For example, if you
         * specify a prototype for the {@link ComboBox} control, which does
         * not specify a template, it will override the template defined
         * by the {@link DropDown} base class (the nearest ancestor that does
         * specify a template).
         */
        getTemplate(): string;
        /**
         * Applies the template to a new instance of a control, and returns the root element.
         *
         * This method should be called by constructors of templated controls.
         * It is responsible for binding the template parts to the corresponding control
         * members.
         *
         * For example, the code below applies a template to an instance of an
         * {@link InputNumber} control. The template must contain elements with the
         * 'wj-part' attribute set to 'input', 'btn-inc', and 'btn-dec'.
         * The control members '_tbx', '_btnUp', and '_btnDn' will be assigned
         * references to these elements.
         *
         * ```typescript
         * this.applyTemplate('wj-control wj-inputnumber', templateString, {
         *   _tbx: 'input',
         *   _btnUp: 'btn-inc',
         *   _btnDn: 'btn-dec'
         * }, 'input');
         * ``````
         *
         * @param classNames Names of classes to add to the control's host element.
         * @param template An HTML string that defines the control template.
         * @param parts A dictionary of part variables and their names.
         * @param namePart Name of the part to be named after the host element. This
         * determines how the control submits data when used in forms.
         */
        applyTemplate(classNames: string, template: string, parts: Object, namePart?: string): HTMLElement;
        /**
         * Disposes of the control by removing its association with the host element.
         *
         * The {@link dispose} method automatically removes any event listeners added
         * with the {@link addEventListener} method.
         *
         * Calling the {@link dispose} method is important in applications that create
         * and remove controls dynamically. Failing to dispose of the controls may
         * cause memory leaks.
         */
        dispose(): void;
        /**
         * Gets the control that is hosted in a given DOM element.
         *
         * @param element The DOM element that hosts the control, or a CSS selector for the host element (e.g. '#theCtrl').
         */
        static getControl(element: any): Control;
        /**
         * Gets the DOM element that is hosting the control.
         */
        readonly hostElement: HTMLElement;
        /**
         * Gets a value indicating whether the control is hosted in an element
         * with right-to-left layout.
         */
        readonly rightToLeft: boolean;
        /**
         * Sets the focus to this control.
         */
        focus(): void;
        /**
         * Checks whether this control contains the focused element.
         */
        containsFocus(): boolean;
        /**
         * Invalidates the control causing an asynchronous refresh.
         *
         * @param fullUpdate Whether to update the control layout as well as the content.
         */
        invalidate(fullUpdate?: boolean): void;
        /**
         * Refreshes the control.
         *
         * @param fullUpdate Whether to update the control layout as well as the content.
         */
        refresh(fullUpdate?: boolean): void;
        /**
         * Invalidates all Wijmo controls contained in an HTML element.
         *
         * Use this method when your application has dynamic panels that change
         * the control's visibility or dimensions. For example, splitters, accordions,
         * and tab controls usually change the visibility of its content elements.
         * In this case, failing to notify the controls contained in the element
         * may cause them to stop working properly.
         *
         * If this happens, you must handle the appropriate event in the dynamic
         * container and call the {@link Control.invalidateAll} method so the contained
         * Wijmo controls will update their layout information properly.
         *
         * @param e Container element. If set to null, all Wijmo controls
         * on the page will be invalidated.
         */
        static invalidateAll(e?: HTMLElement): void;
        /**
         * Refreshes all Wijmo controls contained in an HTML element.
         *
         * This method is similar to {@link invalidateAll}, except the controls
         * are updated immediately rather than after an interval.
         *
         * @param e Container element. If set to null, all Wijmo controls
         * on the page will be invalidated.
         */
        static refreshAll(e?: HTMLElement): void;
        /**
         * Disposes of all Wijmo controls contained in an HTML element.
         *
         * @param e Container element.
         */
        static disposeAll(e?: HTMLElement): void;
        /**
         * Suspends notifications until the next call to {@link endUpdate}.
         */
        beginUpdate(): void;
        /**
         * Resumes notifications suspended by calls to {@link beginUpdate}.
         */
        endUpdate(): void;
        /**
         * Gets a value that indicates whether the control is currently being updated.
         */
        readonly isUpdating: boolean;
        /**
         * Executes a function within a {@link beginUpdate}/{@link endUpdate} block.
         *
         * The control will not be updated until the function has been executed.
         * This method ensures {@link endUpdate} is called even if the function throws
         * an exception.
         *
         * @param fn Function to be executed.
         */
        deferUpdate(fn: Function): void;
        /**
         * Gets a value that indicates whether the control is currently handling
         * a touch event.
         */
        readonly isTouching: boolean;
        /**
         * Gets or sets a value that determines whether the control is disabled.
         *
         * Disabled controls cannot get mouse or keyboard events.
         */
        isDisabled: boolean;
        /**
         * Initializes the control by copying the properties from a given object.
         *
         * This method allows you to initialize controls using plain data objects
         * instead of setting the value of each property in code.
         *
         * For example:
         *
         * ```typescript
         * grid.initialize({
         *   itemsSource: myList,
         *   autoGenerateColumns: false,
         *   columns: [
         *     { binding: 'id', header: 'Code', width: 130 },
         *     { binding: 'name', header: 'Name', width: 60 }
         *   ]
         * });
         *
         * // is equivalent to
         * grid.itemsSource = myList;
         * grid.autoGenerateColumns = false;
         * // etc.
         * ```
         *
         * The initialization data is type-checked as it is applied. If the
         * initialization object contains unknown property names or invalid
         * data types, this method will throw.
         *
         * @param options Object that contains the initialization data.
         */
        initialize(options: any): void;
        /**
         * Adds an event listener to an element owned by this {@link Control}.
         *
         * The control keeps a list of attached listeners and their handlers,
         * making it easier to remove them when the control is disposed (see the
         * {@link dispose} and {@link removeEventListener} methods).
         *
         * Failing to remove event listeners may cause memory leaks.
         *
         * The <b>passive</b> parameter is set to false by default, which means
         * the event handler may call <b>event.preventDefault()</b>.
         * If you are adding passive handlers to touch or wheel events, setting
         * this parameter to true will improve application performance.
         *
         * For details on passive event listeners, please see
         * <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Improving_scrolling_performance_with_passive_listeners">Improving scrolling performance with passive listeners</a>.
         *
         * @param target Target element for the event.
         * @param type String that specifies the event.
         * @param fn Function to execute when the event occurs.
         * @param capture Whether the listener should be handled by the control before it is handled by the target element.
         * @param passive Indicates that the handler will never call <b>preventDefault()</b>.
         */
        addEventListener(target: EventTarget, type: string, fn: any, capture?: boolean, passive?: boolean): void;
        /**
         * Removes one or more event listeners attached to elements owned by this {@link Control}.
         *
         * @param target Target element for the event. If null, removes listeners attached to all targets.
         * @param type String that specifies the event. If null, removes listeners attached to all events.
         * @param fn Handler to remove. If null, removes all handlers.
         * @param capture Whether the listener is capturing. If null, removes capturing and non-capturing listeners.
         * @return The number of listeners removed.
         */
        removeEventListener(target?: EventTarget, type?: string, fn?: any, capture?: boolean): number;
        /**
         * Occurs when the control gets the focus.
         */
        readonly gotFocus: Event<Control, EventArgs>;
        /**
         * Raises the {@link gotFocus} event.
         */
        onGotFocus(e?: EventArgs): void;
        /**
         * Occurs when the control loses the focus.
         */
        readonly lostFocus: Event<Control, EventArgs>;
        /**
         * Raises the {@link lostFocus} event.
         */
        onLostFocus(e?: EventArgs): void;
        /**
         * Occurs when invalid input is detected.
         *
         * Invalid input may occur when the user types or pastes a value that
         * cannot be converted to the proper type, or a value that is outside
         * the valid range.
         *
         * If the event handler cancels the event, the control will retain
         * the invalid content and the focus, so users can correct the error.
         *
         * If the event is not canceled, the control will ignore the invalid
         * input and will retain the original content.
         */
        readonly invalidInput: Event<Control, CancelEventArgs>;
        /**
         * Raises the {@link invalidInput} event.
         *
         * If the event handler cancels the event, the control will keep
         * the invalid input and the focus.
         */
        onInvalidInput(e: CancelEventArgs): boolean;
        /**
         * Occurs when the control is about to refresh its contents.
         */
        readonly refreshing: Event<Control, EventArgs>;
        /**
         * Raises the {@link refreshing} event.
         */
        onRefreshing(e?: EventArgs): void;
        /**
         * Occurs after the control has refreshed its contents.
         */
        readonly refreshed: Event<Control, EventArgs>;
        /**
         * Raises the {@link refreshed} event.
         */
        onRefreshed(e?: EventArgs): void;
        _getProductInfo(): string;
        private _updateWme;
        _hasPendingUpdates(): boolean;
        protected _handleResize(): void;
        _handleFocusBlur(): void;
        protected _updateFocusState(): void;
        protected _updateState(): void;
        protected _handleTouchStart(e: any): void;
        protected _handleTouchEnd(e: any): void;
        private _handleDisabled;
        private _replaceWithDiv;
        private _copyAttributes;
        _getKeyCode(e: KeyboardEvent): number;
    }
}
declare module wijmo {
    /**
     * Represents the position of a popup element with respect to a
     * reference element.
     */
    enum PopupPosition {
        /** Above the reference element. */
        Above = 0,
        /** Above and aligned to the right of the reference element. */
        AboveRight = 1,
        /** To the right and aligned to the top of the reference element. */
        RightTop = 2,
        /** To the right of the reference element. */
        Right = 3,
        /** To the right and aligned to the bottom of the reference element. */
        RightBottom = 4,
        /** Below and aligned to the right of the reference element. */
        BelowRight = 5,
        /** Below the reference element. */
        Below = 6,
        /** Below and aligned to the left of the reference element. */
        BelowLeft = 7,
        /** To the left and aligned to the bottom of the reference element. */
        LeftBottom = 8,
        /** To the left of the reference element. */
        Left = 9,
        /** To the left and aligned to the top of the reference element. */
        LeftTop = 10,
        /** Above and aligned to the left of the reference element. */
        AboveLeft = 11
    }
    /**
     * Shows an element as a popup.
     *
     * The popup element becomes a child of the body element, and is positioned
     * with respect to reference rectangle according to the given {@link PopupPosition}.
     *
     * The reference rectangle may be specified as one of the following:
     *
     * <dl class="dl-horizontal">
     *   <dt>HTMLElement</dt>
     *   <dd>The bounding rectangle of the element.</dd>
     *   <dt>MouseEvent</dt>
     *   <dd>The bounding rectangle of the event's target element.</dd>
     *   <dt>Rect</dt>
     *   <dd>The given rectangle.</dd>
     *   <dt>null</dt>
     *   <dd>No reference rectangle; the popup is centered on the window.</dd>
     * </dl>
     *
     * Call the {@link hidePopup} method to hide the popup.
     *
     * @param popup Element to show as a popup.
     * @param ref Reference element or rectangle used to position the popup.
     * @param position Position of the popup with respect to the reference element.
     * @param fadeIn Use a fade-in animation to make the popup appear gradually.
     * @param copyStyles Whether to copy font and color styles from the reference element, or an element to use as the style source.
     * @param hideOnScroll An optional function called when the popup is hidden as a result of a parent element scrolling.
     * @return An interval ID that can be used to suspend the fade-in animation.
     */
    function showPopup(popup: HTMLElement, ref?: any, position?: PopupPosition | Boolean, fadeIn?: boolean, copyStyles?: any, hideOnScroll?: Function): any;
    /**
     * Hides a popup element previously displayed with the {@link showPopup}
     * method.
     *
     * @param popup Popup element to hide.
     * @param remove Whether to remove the popup from the DOM or just to hide it.
     * This parameter may be a boolean or a callback function that gets invoked
     * after the popup has been removed from the DOM.
     * @param fadeOut Whether to use a fade-out animation to make the popup disappear gradually.
     * @return An interval id that you can use to suspend the fade-out animation.
     */
    function hidePopup(popup: HTMLElement, remove?: any, fadeOut?: boolean): any;
}
declare module wijmo {
    interface _ITooltipInfo {
        element: HTMLElement;
        content: string;
        position: PopupPosition;
    }
    /**
     * Provides a pop-up window that displays additional information about
     * elements on the page.
     *
     * The {@link Tooltip} class can be used in two modes:
     *
     * <b>Automatic Mode:</b> Use the {@link setTooltip} method to connect
     * the {@link Tooltip} to one or more elements on the page. The {@link Tooltip}
     * will automatically monitor events and display the tooltips when the
     * user performs actions that trigger the tooltip.
     * For example:
     *
     * ```typescript
     * import { Tooltip } from '@grapecity/wijmo';
     * var tt = new Tooltip();
     * tt.setTooltip('#menu', 'Select commands.');
     * tt.setTooltip('#tree', 'Explore the hierarchy.');
     * tt.setTooltip('#chart', '#idChartTooltip');
     * ```
     *
     * <b>Manual Mode:</b> The caller is responsible for showing and hiding
     * the tooltip using the {@link show} and {@link hide} methods. For example:
     *
     * ```typescript
     * import { Tooltip } from '@grapecity/wijmo';
     * var tt = new Tooltip();
     * element.addEventListener('click', function () {
     *   if (tt.isVisible) {
     *     tt.hide();
     *   } else {
     *     tt.show(element, 'This is an important element!');
     *   }
     * });
     * ```
     *
     * The example below shows how you can use the {@link Tooltip} class
     * to add Excel-style notes to cells in a {@link FlexGrid} control:
     *
     * {@sample Grid/CustomCells/CellNotes/purejs Example}
     */
    class Tooltip {
        static _eTip: HTMLElement;
        private _toShow;
        private _toHide;
        private _showAutoTipBnd;
        private _hideAutoTipBnd;
        private _mousemoveBnd;
        private _eMouse;
        private _html;
        private _cssClass;
        private _gap;
        private _isAnimated;
        private _position;
        private _showAtMouse;
        private _showDelay;
        private _hideDelay;
        _tips: _ITooltipInfo[];
        /**
         * Initializes a new instance of the {@link Tooltip} class.
         *
         * @param options JavaScript object containing initialization data for the {@link Tooltip}.
         */
        constructor(options?: any);
        /**
         * Gets or sets the {@link PopupPosition} where the tooltip should be
         * displayed with respect to the owner element.
         *
         * The default value for this property is <b>PopupPosition.Above</b>.
         */
        position: PopupPosition;
        /**
         * Gets or sets a value that determines whether tooltips should use a
         * fade-in animation when shown.
         *
         * The default value for this property is <b>false</b>.
         */
        isAnimated: boolean;
        /**
         * Assigns tooltip content to a given element on the page.
         *
         * The same tooltip may be used to display information for any number
         * of elements on the page. To remove the tooltip from an element,
         * call {@link setTooltip} and specify null for the content.
         *
         * To remove the tooltips for all elements, call the {@link dispose} method.
         *
         * @param element Element, single element CSS selector, or control that the tooltip explains.
         * @param content Tooltip content or ID of the element that contains the tooltip content.
         * @param position Position where the tooltip should be displayed with respect to the owner element.
         */
        setTooltip(element: any, content: string | null, position?: PopupPosition): void;
        /**
         * Gets the tooltip content associated with a given element.
         *
         * @param element Element, element ID, or control that the tooltip explains.
         * @return Tooltip content associated with the given element.
         */
        getTooltip(element: any): string | null;
        /**
         * Shows a tooltip with the specified content next to the specified element.
         *
         * @param element Element, element ID, or control that the tooltip explains.
         * @param content Tooltip content or ID of the element that contains the tooltip content.
         * @param bounds Optional parameter that defines the bounds of the area that the tooltip
         * targets. If not provided, the element bounds are used.
         * @param position Optional parameter that specifies the position of the tooltip
         * with respect to the reference bounds. If not provided, the tooltip is displayed
         * above the bounds rectangle.
         */
        show(element: any, content: string, bounds?: Rect, position?: PopupPosition): void;
        /**
         * Hides the tooltip if it is currently visible.
         */
        hide(): void;
        /**
         * Removes all tooltips associated with this {@link Tooltip} instance.
         */
        dispose(): void;
        /**
         * Gets a value that determines whether the tooltip is currently visible.
         */
        readonly isVisible: boolean;
        /**
         * Gets or sets a value that determines whether the tooltip contents
         * should be displayed as plain text or as HTML.
         *
         * The default value for the property is <b>true</b>.
         */
        isContentHtml: boolean;
        /**
         * Gets or sets a CSS class name to use when showing the tooltip.
         */
        cssClass: string;
        /**
         * Gets or sets the distance between the tooltip and the target element.
         *
         * The default value for the property is <b>6</b> pixels.
         */
        gap: number;
        /**
         * Gets or sets a value that determines whether the tooltip should be
         * calculated based on the mouse position rather than the target element.
         *
         * The default value for the property is <b>false</b>, which means
         * the tooltip position is calculated based on the target element.
         *
         * The {@link position} property is used to determine the tooltip
         * position in respect to the target element or to the mouse
         * position.
         */
        showAtMouse: boolean;
        /**
         * Gets or sets the delay, in milliseconds, before showing the tooltip
         * after the mouse enters the target element.
         *
         * The default value for the property is <b>500</b> milliseconds.
         */
        showDelay: number;
        /**
         * Gets or sets the delay, in milliseconds, before hiding the tooltip
         * if the mouse remains over the element.
         *
         * The default value for the property is <b>zero</b> milliseconds,
         * which causes the tip to remain visible until the mouse moves
         * away from the element.
         */
        hideDelay: number;
        /**
         * Occurs before the tooltip content is displayed.
         *
         * The event handler may customize the tooltip content or suppress
         * the tooltip display by changing the event parameters.
         */
        readonly popup: Event<Tooltip, TooltipEventArgs>;
        /**
         * Raises the {@link popup} event.
         *
         * @param e {@link TooltipEventArgs} that contains the event data.
         */
        onPopup(e: TooltipEventArgs): boolean;
        private _indexOf;
        private _attach;
        private _detach;
        private _showAutoTip;
        _mousemove(e: MouseEvent): void;
        private _hideAutoTip;
        private _clearTimeouts;
        private _getContent;
        private _setContent;
    }
    /**
     * Provides arguments for the {@link Tooltip.popup} event.
     */
    class TooltipEventArgs extends CancelEventArgs {
        private _content;
        private _e;
        /**
         * Initializes a new instance of the {@link TooltipEventArgs} class.
         *
         * @param content String to show in the tooltip.
         * @param element HTMLElement that the tip refers to.
         */
        constructor(content: string, element?: HTMLElement);
        /**
         * Gets a reference to the tooltip element.
         */
        readonly tip: HTMLElement;
        /**
         * Gets a reference to the element that the tooltip refers to.
         */
        readonly element: HTMLElement;
        /**
         * Gets or sets the content to show in the tooltip.
         *
         * This parameter can be used while handling the {@link Tooltip.popup}
         * event to modify the content of the tooltip.
         */
        content: string;
    }
}
declare module wijmo {
    /**
     * Static class that provides utility methods for clipboard operations.
     *
     * The {@link Clipboard} class provides static {@link copy} and {@link paste} methods
     * that can be used by controls to customize the clipboard content during
     * clipboard operations.
     *
     * For example, the code below shows how a control could intercept the
     * clipboard shortcut keys and provide custom clipboard handling:
     *
     * ```typescript
     * rootElement.addEventListener('keydown', (e: KeyboardEvent) {
     *
     *     // copy: ctrl+c or ctrl+Insert
     *     if (e.ctrlKey && (e.keyCode == 67 || e.keyCode == 45)) {
     *         let text = this.getClipString();
     *         Clipboard.copy(text);
     *         return;
     *     }
     *
     *     // paste: ctrl+v or shift+Insert
     *     if ((e.ctrlKey && e.keyCode == 86) || (e.shiftKey && e.keyCode == 45)) {
     *         Clipboard.paste(text => {
     *             this.setClipString(text);
     *         });
     *         return;
     *      }
     * });
     * ```
     *
     * The example below shows how you can customize the behavior of the clipboard
     * paste command when the target is a {@link FlexGrid} control:
     *
     * {@sample Core/Clipboard Example}
     */
    class Clipboard {
        /**
         * Copies a string to the clipboard.
         *
         * This method only works if invoked immediately after the user
         * pressed a clipboard copy command (such as ctrl+c).
         *
         * @param text Text to copy to the clipboard.
         */
        static copy(text: string): void;
        /**
         * Gets a string from the clipboard.
         *
         * This method only works if invoked immediately after the user
         * pressed a clipboard paste command (such as ctrl+v).
         *
         * @param callback Function called when the clipboard content
         * has been retrieved. The function receives the clipboard
         * content as a parameter.
         */
        static paste(callback: Function): void;
        private static _copyPaste;
    }
}
declare module wijmo {
    /**
     * Class that provides repeat-clicking on behalf of an HTMLElement
     * (typically a button).
     */
    class _ClickRepeater {
        private static _startEvents;
        private static _stopEvents;
        private _e;
        private _disabled;
        private _isDown;
        private _clicked;
        private _toDelay;
        private _toRepeat;
        private _mousedownBnd;
        private _mouseupBnd;
        private _clickBnd;
        /**
         * Initializes a new instance of the {@link _ClickRepeater} class.
         *
         * @param element Element that will raise click events while the mouse is down.
         */
        constructor(element: HTMLElement);
        /**
         * Gets or sets the element that will raise click events while the mouse is down.
         */
        element: HTMLElement;
        /**
         * Gets or sets a value that determines whether this repeater is disabled.
         */
        disabled: boolean;
        _connect(connect: boolean): void;
        _clearTimeouts(): void;
        _mousedown(e: MouseEvent): void;
        _mouseup(e: MouseEvent): void;
        _click(): void;
    }
}
declare module wijmo {
}

declare module wijmo.odata {
    function softGrid(): typeof wijmo.grid;
    function softFilter(): typeof wijmo.grid.filter;
}
declare module wijmo.odata {
    /**
     * Extends the {@link CollectionView} class to support loading and
     * saving data from OData sources.
     *
     * You can use the {@link ODataCollectionView} class to load data from
     * OData services and use it as a data source for Wijmo controls.
     *
     * In addition to full CRUD support you get all the {@link CollectionView}
     * features including sorting, filtering, paging, and grouping.
     * The sorting, filtering, and paging functions may be performed on the
     * server or on the client.
     *
     * The code below shows how you can instantiate an {@link ODataCollectionView}
     * that selects some fields from the data source and provides sorting on the
     * client.
     * Notice how the 'options' parameter is used to pass in initialization
     * data, which is the same approach used when initializing controls:
     *
     * ```typescript
     * import { ODataCollectionView } from '@grapecity/wijmo.odata';
     * const url = 'http://services.odata.org/V4/Northwind/Northwind.svc/';
     * const categories = new ODataCollectionView(url, 'Categories', {
     *   fields: ['CategoryID', 'CategoryName', 'Description'],
     *   sortOnServer: false
     * });
     * ```
     *
     * The example below uses an {@link ODataCollectionView} to load data from
     * a NorthWind OData provider service, and shows the result in a
     * {@link FlexGrid} control:
     *
     * {@sample Grid/Data-binding/ODataAPI/purejs Example}
     */
    class ODataCollectionView extends wijmo.collections.CollectionView {
        _url: string;
        _tbl: string;
        _entityType: string;
        _count: number;
        _fields: string[];
        _keys: string[];
        _expand: string;
        _dataTypes: any;
        _sortOnServer: boolean;
        _pageOnServer: boolean;
        _filterOnServer: boolean;
        _deferCommits: boolean;
        _hasPendingChanges: boolean;
        _showDatesAsGmt: boolean;
        _inferDataTypes: boolean;
        _dataTypesInferred: any;
        _reviverBnd: any;
        _jsonReviver: Function;
        _filterDef: string;
        _toGetData: any;
        _loading: boolean;
        _requestHeaders: any;
        _odv: number;
        static _odvCache: {};
        static _rxDate: RegExp;
        /**
         * Initializes a new instance of the {@link ODataCollectionView} class.
         *
         * @param url Url of the OData service (for example
         * 'https://services.odata.org/Northwind/Northwind.svc/').
         * @param tableName Name of the table (entity) to retrieve from the service.
         * If not provided, a list of the tables (entities) available is retrieved.
         * @param options JavaScript object containing initialization data (property
         * values and event handlers) for the {@link ODataCollectionView}.
         */
        constructor(url: string, tableName: string, options?: any);
        /**
         * Gets the name of the table (entity) that this collection is bound to.
         */
        readonly tableName: string;
        /**
         * Gets or sets a string that represents the entity's data type on the server.
         *
         * This may be required to update data in some OData services.
         *
         * For more details, please see
         * http://docs.oasis-open.org/odata/odata-json-format/v4.0/cs01/odata-json-format-v4.0-cs01.html#_Toc365464687.
         */
        entityType: string;
        /**
         * Gets or sets an array containing the names of the fields to retrieve from
         * the data source.
         *
         * If this property is set to null or to an empty array, all fields are
         * retrieved.
         *
         * For example, the code below creates an {@link ODataCollectionView} that
         * gets only three fields from the 'Categories' table in the database:
         *
         * ```typescript
         * import { ODataCollectionView } from '@grapecity/wijmo.odata';
         * const url = 'http://services.odata.org/V4/Northwind/Northwind.svc/';
         * const categories = new ODataCollectionView(url, 'Categories', {
         *   fields: ['CategoryID', 'CategoryName', 'Description']
         * });
         * ```
         */
        fields: string[];
        /**
         * Gets or sets an object containing request headers to be used when sending
         * or requesting data.
         *
         * The most typical use for this property is in scenarios where authentication
         * is required. For example:
         *
         * ```typescript
         * import { ODataCollectionView } from '@grapecity/wijmo.odata';
         * const url = 'http://services.odata.org/V4/Northwind/Northwind.svc/';
         * const categories = new ODataCollectionView(serviceUrl, 'Categories', {
         *   fields: ['Category_ID', 'Category_Name'],
         *   requestHeaders: { Authorization: db.token }
         * });
         * ```
         */
        requestHeaders: any;
        /**
         * Gets or sets an array containing the names of the key fields.
         *
         * Key fields are required for update operations (add/remove/delete).
         */
        keys: string[];
        /**
         * Gets or sets a string that specifies whether related entities should
         * be included in the return data.
         *
         * This property maps directly to OData's $expand option.
         *
         * For example, the code below retrieves all the customers and their
         * orders from the database. Each customer entity has an "Orders"
         * field that contains an array of order objects:
         *
         * ```typescript
         * import { ODataCollectionView } from '@grapecity/wijmo.odata';
         * const url = 'http://services.odata.org/V4/Northwind/Northwind.svc/';
         * const customersOrders = new ODataCollectionView(url, 'Customers', {
         *   expand: 'Orders'
         * });
         * ```
         */
        expand: string;
        /**
         * Gets or sets a custom reviver function to use when parsing JSON
         * values returned from the server.
         *
         * If provided, the function must take two parameters (key and value),
         * and must return the parsed value (which can be the same as the
         * original value).
         *
         * For details about reviver functions, please refer to the documentation
         * for the
         * <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse" target="_blank">JSON.parse method</a>.
         */
        jsonReviver: Function;
        /**
         * Gets or sets a JavaScript object to be used as a map for coercing data types
         * when loading the data.
         *
         * The object keys represent the field names and the values are {@link DataType} values
         * that indicate how the data should be coerced.
         *
         * For example, the code below creates an {@link ODataCollectionView} and specifies
         * that 'Freight' values, which are stored as strings in the database, should be
         * converted into numbers; and that three date fields should be converted into dates:
         *
         * ```typescript
         * import { ODataCollectionView } from '@grapecity/wijmo.odata';
         * import { DataType } from '@grapecity/wijmo';
         * const url = 'http://services.odata.org/V4/Northwind/Northwind.svc/';
         * const orders = new ODataCollectionView(url, 'Orders', {
         *   dataTypes: {
         *     Freight: DataType.Number
         *     OrderDate: DataType.Date,
         *     RequiredDate: DataType.Date,
         *     ShippedDate: DataType.Date,
         *   }
         * });
         * ```
         *
         * This property is useful when the database contains data stored in
         * formats that do not conform to common usage.
         *
         * In most cases you don't have to provide information about the
         * data types, because the {@link inferDataTypes} property handles
         * the conversion of Date values automatically.
         *
         * If you do provide explicit type information, the {@link inferDataTypes}
         * property is not applied. Because of this, any data type information
         * that is provided should be complete, including all fields of type
         * Date.
         */
        dataTypes: any;
        /**
         * Gets or sets a value that determines whether fields that contain
         * strings that look like standard date representations should be
         * converted to dates automatically.
         *
         * This property is set to true by default, because the {@link ODataCollectionView}
         * class uses JSON and that format does not support Date objects.
         *
         * This property has no effect if specific type information is provided using
         * the {@link dataTypes} property.
         */
        inferDataTypes: boolean;
        /**
         * Gets or sets a value that determines whether dates should be adjusted
         * to look like GMT rather than local dates.
         */
        showDatesAsGmt: boolean;
        /**
         * Gets or sets a value that determines whether sort operations
         * should be performed on the server or on the client.
         *
         * Use the {@link sortDescriptions} property to specify how the
         * data should be sorted.
         *
         * The default value for this property is <b>true</b>.
         */
        sortOnServer: boolean;
        /**
         * Gets or sets a value that determines whether paging should be
         * performed on the server or on the client.
         *
         * Use the {@link pageSize} property to enable paging.
         *
         * The default value for this property is <b>true</b>.
         */
        pageOnServer: boolean;
        /**
         * Gets or sets a value that determines whether filtering should be
         * performed on the server or on the client.
         *
         * Use the {@link filter} property to perform filtering on the client,
         * and use the  {@link filterDefinition} property to perform filtering
         * on the server.
         *
         * In some cases it may be desirable to apply independent filters
         * on the client <b>and</b> on the server.
         *
         * You can achieve this by setting (1) the {@link filterOnServer} property
         * to false and the {@link filter} property to a filter function (to enable
         * client-side filtering) and (2) the {@link filterDefinition} property to
         * a filter string (to enable server-side filtering).
         *
         * The default value for this property is <b>true</b>.
         */
        filterOnServer: boolean;
        /**
         * Gets or sets a string containing an OData filter specification to
         * be used for filtering the data on the server.
         *
         * The filter definition syntax is described in the
         * <a href="https://www.odata.org/documentation/odata-version-2-0/uri-conventions/">OData documentation</a>.
         *
         * For example, the code below causes the server to return records
         * where the 'CompanyName' field starts with 'A' and ends with 'S':
         *
         * <pre>view.filterDefinition = "startswith(CompanyName, 'A') and endswith(CompanyName, 'B')";</pre>
         *
         * Filter definitions can be generated automatically. For example, the
         * {@link FlexGridFilter} component detects whether its data source is an
         * {@link ODataCollectionView} and automatically updates both the
         * {@link ODataCollectionView.filter} and {@link ODataCollectionView.filterDefinition}
         * properties.
         *
         * Note that the {@link ODataCollectionView.filterDefinition} property is applied
         * even if the {@link ODataCollectionView.filterOnServer} property is set to false.
         * This allows you to apply server and client filters to the same collection,
         * which can be useful in many scenarios.
         *
         * For example, the code below uses the {@link ODataCollectionView.filterDefinition}
         * property to filter on the server and the {@link ODataCollectionView.filter}
         * property to further filter on the client. The collection will show items with
         * names that start with 'C' and have unit prices greater than 20:
         *
         * ```typescript
         * import { ODataCollectionView } from '@grapecity/wijmo.odata';
         * const url = 'http://services.odata.org/V4/Northwind/Northwind.svc/';
         * const data = new ODataCollectionView(url, 'Products', {
         *   oDataVersion: 4,
         *   filterDefinition: 'startswith(ProductName, \'C\')', // server filter
         *   filterOnServer: false, // client filter
         *   filter: function(product) {
         *     return product.UnitPrice &gt; 20;
         *   },
         * });
         * ```
         */
        filterDefinition: string;
        /**
         * Updates the filter definition based on a known filter provider such as the
         * {@link FlexGridFilter}.
         *
         * @param filterProvider Known filter provider, typically an instance of a
         * {@link FlexGridFilter}.
         */
        updateFilterDefinition(filterProvider: any): void;
        /**
         * Gets or sets the OData version used by the server.
         *
         * There are currently four versions of OData services, 1.0 through 4.0.
         * Version 4.0 is used by the latest services, but there are many legacy
         * services still in operation.
         *
         * If you know what version of OData your service implements, set the
         * {@link oDataVersion} property to the appropriate value (1 through 4) when
         * creating the {@link ODataCollectionView} (see example below).
         *
         * ```typescript
         * import { ODataCollectionView } from '@grapecity/wijmo.odata';
         * let url = 'https://services.odata.org/Northwind/Northwind.svc/';
         * let categories = new ODataCollectionView(url, 'Categories', {
         *   oDataVersion: 1.0, // legacy OData source
         *   fields: ['CategoryID', 'CategoryName', 'Description'],
         *   sortOnServer: false
         * });
         * ```
         *
         * If you do not know what version of OData your service implements (perhaps
         * you are writing an OData explorer application), then do not specify the
         * version. In this case, the {@link ODataCollectionView} will get this information
         * from the server. This operation requires an extra request, but only once
         * per service URL, so the overhead is small.
         */
        oDataVersion: number;
        /**
         * Gets a value that indicates the {@link ODataCollectionView} is
         * currently loading data.
         *
         * This property can be used to provide progress indicators.
         */
        readonly isLoading: boolean;
        /**
         * Gets or sets a value that causes the {@link ODataCollectionView} to
         * defer commits back to the database.
         *
         * The default value for this property is <b>false</b>, which causes
         * any changes to the data to be immediately committed to the database.
         *
         * If you set this property to <b>true</b>, it will automatically set the
         * {@link trackChanges} property to true. After this, any changes to the
         * data (including edits, additions, and removals) will be tracked but
         * not committed to the database until you call the {@link commitChanges}
         * method to commit the changes, or the {@link cancelChanges} method
         * to discard all pending changes.
         *
         * For example:
         * ```typescript
         * import { ODataCollectionView } from '@grapecity/wijmo.odata';
         *
         * // create data source
         * let url = 'https://services.odata.org/...';
         * let view = new ODataCollectionView(url, 'Categories', {
         *     keys: [ 'ID' ]
         * });
         *
         * // defer commits
         * view.deferCommits = true;
         *
         * // handle commit/cancel changes buttons
         * let btnCommit = document.getElementById('btn-commit') as HTMLButtonElement,
         *     btnCancel = document.getElementById('btn-cancel') as HTMLButtonElement;
         * btnCommit.addEventListener('click', () => view.commitChanges());
         * btnCancel.addEventListener('click', () => view.cancelChanges());
         * view.hasPendingChangesChanged.addHandler((s, e) => {
         *    btnCommit.disabled = btnCancel.disabled = !view.hasPendingChanges;
         * });
         * ```
         */
        deferCommits: boolean;
        /**
         * Occurs when the {@link ODataCollectionView} starts loading data.
         */
        readonly loading: Event<ODataCollectionView, EventArgs>;
        /**
         * Raises the {@link loading} event.
         */
        onLoading(e?: wijmo.EventArgs): void;
        /**
         * Occurs when the {@link ODataCollectionView} finishes loading data.
         */
        readonly loaded: Event<ODataCollectionView, EventArgs>;
        /**
         * Raises the {@link loaded} event.
         */
        onLoaded(e?: wijmo.EventArgs): void;
        /**
         * Loads or re-loads the data from the OData source.
         */
        load(): void;
        /**
         * Occurs when there is an error reading or writing data.
         */
        readonly error: Event<ODataCollectionView, RequestErrorEventArgs>;
        /**
         * Raises the {@link error} event.
         *
         * By default, errors throw exceptions and trigger a data refresh. If you
         * want to prevent this behavior, set the {@link RequestErrorEventArgs.cancel}
         * parameter to true in the event handler.
         *
         * @param e {@link RequestErrorEventArgs} that contains information about the error.
         */
        onError(e: wijmo.RequestErrorEventArgs): boolean;
        /**
         * Occurs when the value of the {@link hasPendingChanges} property changes.
         *
         * See also the {@link deferCommits} property.
         */
        readonly hasPendingChangesChanged: Event<ODataCollectionView, EventArgs>;
        /**
         * Raises the {@link hasPendingChangesChanged} event.
         */
        onHasPendingChangesChanged(e?: wijmo.EventArgs): void;
        /**
         * Returns true if this object supports a given interface.
         *
         * @param interfaceName Name of the interface to look for.
         */
        implementsInterface(interfaceName: string): boolean;
        /**
         * Override {@link commitNew} to add the new item to the database.
         */
        commitNew(): void;
        /**
         * Override {@link commitEdit} to modify the item in the database.
         */
        commitEdit(): void;
        /**
         * Override {@link remove} to remove the item from the database.
         *
         * @param item Item to be removed from the database.
         */
        remove(item: any): void;
        /**
         * Commits all pending changes to the server.
         *
         * Changes are contained in the {@link itemsEdited}, {@link itemsAdded},
         * and {@link itemsRemoved} collections, and are automatically cleared
         * after they are committed.
         *
         * See also the {@link deferCommits} property.
         *
         * @param committed Optional callback invoked when the commit operation
         * has been completed. The callback takes an <b>XMLHttpRequest</b>
         * parameter contains information about the request results.
         */
        commitChanges(committed?: (xhr: XMLHttpRequest) => void): void;
        /**
         * Cancels all changes by removing all items in the {@link itemsAdded},
         * {@link itemsRemoved}, and {@link itemsEdited} collections,
         * without committing them to the server.
         *
         * This method is used with the {@link deferCommits} property.
         */
        cancelChanges(): void;
        /**
         * Gets a value that determines whether the {@link ODataCollectionView} has
         * pending changes.
         *
         * See also the {@link deferCommits} property and the
         * {@link commitChanges} and {@link cancelChanges} methods.
         */
        readonly hasPendingChanges: boolean;
        /**
         * Gets the total number of items in the view before paging is applied.
         */
        readonly totalItemCount: number;
        /**
         * Gets the total number of pages.
         */
        readonly pageCount: number;
        /**
         * Gets or sets the number of items to display on a page.
         */
        pageSize: number;
        /**
         * Raises the {@link pageChanging} event.
         *
         * @param e {@link PageChangingEventArgs} that contains the event data.
         */
        onPageChanging(e: wijmo.collections.PageChangingEventArgs): boolean;
        _getPageView(): any[];
        _performRefresh(): void;
        _updateHasChanges(): void;
        _storeItems(items: any[], append: boolean): void;
        _getReadUrl(nextLink?: string): string;
        _getReadParams(nextLink?: string): any;
        _encodeFilterDefinition(): string;
        _getData(nextLink?: string, xhrCallback?: Function): void;
        private _convertToDbFormat;
        private _reviver;
        private _convertItem;
        private _getInferredDataTypes;
        private _getServiceUrl;
        private _getSchema;
        private _getWriteUrl;
        private _asODataFilter;
        private _asODataValueFilter;
        private _asEquals;
        private _asODataConditionFilter;
        private _asODataCondition;
        private _asODataValue;
        private _error;
        private _encodeBatch;
    }
}
declare module wijmo.odata {
    /**
     * Extends the {@link ODataCollectionView} class to support loading data on
     * demand, using the {@link setWindow} method.
     *
     * The example below shows how you can declare an {@link ODataCollectionView}
     * and synchronize it with a {@link wijmo.grid.FlexGrid} control to load the
     * data that is within the grid's viewport:
     *
     * ```typescript
     * // declare virtual collection view
     * let view = new wijmo.odata.ODataVirtualCollectionView(url, 'Order_Details_Extendeds', {
     *     oDataVersion: 4
     * });
     *
     * // use virtual collection as grid data source
     * flex.itemsSource = view;
     *
     * // update data window when the grid scrolls
     * flex.scrollPositionChanged.addHandler(() => {
     *     let rng = flex.viewRange;
     *     view.setWindow(rng.topRow, rng.bottomRow);
     * });
     * ```
     *
     * The {@link ODataVirtualCollectionView} class implements a 'data window' so only
     * data that is actually being displayed is loaded from the server. Items that are
     * not being displayed are added to the collection as null values until a call
     * to the {@link setWindow} method causes them those items to be loaded.
     *
     * This 'on-demand' method of loading data has advantages when dealing with large
     * data sets, because it prevents the application from loading data until it is
     * required. But it does impose some limitation: sorting and filtering must be
     * done on the server; grouping and paging are not supported.
     *
     * The example below uses an {@link ODataVirtualCollectionView} to load data from
     * a NorthWind OData provider service. The collection loads data on-demant,
     * as the user scrolls the grid:
     *
     * {@sample Grid/Data-binding/VirtualOData/purejs Example}
     */
    class ODataVirtualCollectionView extends ODataCollectionView {
        _data: any[];
        _start: number;
        _end: number;
        _refresh: boolean;
        _loadOffset: number;
        _toSetWindow: any;
        _pendingRequest: XMLHttpRequest;
        _requestCanceled: wijmo.Event<ODataVirtualCollectionView, wijmo.EventArgs>;
        _firstLoad: boolean;
        /**
         * Initializes a new instance of the {@link ODataVirtualCollectionView} class.
         *
         * @param url Url of the OData service (for example
         * 'https://services.odata.org/Northwind/Northwind.svc/').
         * @param tableName Name of the table (entity) to retrieve from the service.
         * If not provided, a list of the tables (entities) available is retrieved.
         * @param options JavaScript object containing initialization data (property
         * values and event handlers) for the {@link ODataVirtualCollectionView}.
         */
        constructor(url: string, tableName: string, options?: any);
        /**
         * Sets the data window to ensure a range of records are loaded into the view.
         *
         * @param start Index of the first item in the data window.
         * @param end Index of the last item in the data window.
         */
        setWindow(start: number, end: number): void;
        /**
         * Occurs when the {@link ODataVirtualCollectionView} cancels a pending data request.
         */
        readonly requestCanceled: wijmo.Event<ODataVirtualCollectionView, wijmo.EventArgs>;
        /**
         * Raises the {@link requestCanceled} event.
         */
        onRequestCanceled(e?: wijmo.EventArgs): void;
        /**
         * {@link ODataVirtualCollectionView} requires {@link pageOnServer} to be set to true.
         */
        pageOnServer: boolean;
        /**
         * {@link ODataVirtualCollectionView} requires {@link sortOnServer} to be set to true.
         */
        sortOnServer: boolean;
        /**
         * {@link ODataVirtualCollectionView} requires {@link filterOnServer} to be set to true.
         */
        filterOnServer: boolean;
        /**
         * {@link ODataVirtualCollectionView} requires {@link canGroup} to be set to false.
         */
        canGroup: boolean;
        _performRefresh(): void;
        _getReadParams(nextLink?: string): any;
        _storeItems(items: any[], append: boolean): void;
        _performSetWindow(start: number, end: number): void;
    }
}
declare module wijmo.odata {
}

declare module wijmo.grid {
    /**
     * Specifies constants that define the type of editor used with data-mapped columns.
     */
    enum DataMapEditor {
        /** Use an input element with auto-complete and validation. */
        AutoComplete = 0,
        /** Use an input element with auto-complete, validation, and a drop-down list. */
        DropDownList = 1,
        /** Use radio buttons with mouse and keyboard support. */
        RadioButtons = 2
    }
    /**
     * Represents a data map for use with a column's {@link Column.dataMap} property.
     *
     * Data maps provide the grid with automatic look up capabilities. For example,
     * you may want to display a customer name instead of his ID, or a color name
     * instead of its RGB value.
     *
     * The code below binds a grid to a collection of products, then assigns a
     * {@link DataMap} to the grid's 'CategoryID' column so the grid displays the
     * category names rather than the raw IDs.
     *
     * The grid takes advantage of data maps also for editing. If the <b>wijmo.input</b>
     * module is loaded, then when editing data-mapped columns the grid will show
     * a drop-down list containing the values on the map.
     *
     * ```typescript
     * import { FlexGrid, Column } from '@grapecity/wijmo.grid';
     *
     * // bind grid to products
     * let flex = new FlexGrid({
     *     itemsSource: products
     * });
     *
     * // map CategoryID column to show category name instead of ID
     * let col = flex.getColumn('CategoryID');
     * col.dataMap = new DataMap(categories, 'CategoryID', 'CategoryName');
     * ```
     *
     * In general, data maps apply to whole columns. However, there are situations
     * where you may want to restrict the options available for a cell based on a
     * value on a different column. For example, if you have "Country" and "City"
     * columns, you will probably want to restrict the cities based on the current
     * country.
     *
     * There are two ways you can implement these "dynamic" data maps:
     *
     * <ol>
     *   <li>
     *     If the {@link DataMap} is just a list of strings, you can change it before
     *     the grid enters edit mode. In this case, the cells contain the string
     *     being displayed, and changing the map won't affect other cells in the
     *     same column.
     *     This fiddle demonstrates:
     *     <a href="https://jsfiddle.net/Wijmo5/8brL80r8/">show me</a>.
     *   </li>
     *   <li>
     *     If the {@link DataMap} is a real map (stores key values in the cells, shows
     *     a corresponding string), then you can apply a filter to restrict the
     *     values shown in the drop-down. The {@link DataMap} will still contain the
     *     same keys and values, so other cells in the same column won't be disturbed
     *     by the filter.
     *     This fiddle demonstrates:
     *     <a href="https://jsfiddle.net/Wijmo5/xborLd4t/">show me</a>.
     *   </li>
     * </ol>
     *
     * In some cases, you may want to create a {@link DataMap} to represent an enumeration.
     * This can be done with the following code:
     *
     * ```typescript
     * // build a DataMap for a given enum
     * function getDataMap(enumClass) {
     *     let pairs = [];
     *     for (let key in enumClass) {
     *         var val = parseInt(key);
     *         if (!isNaN(val)) {
     *             pairs.push({ key: val, name: enumClass[val] });
     *         }
     *     }
     *     return new DataMap(pairs, 'key', 'name');
     * }
     * ```
     */
    class DataMap<K = any, V = any> {
        _cv: wijmo.collections.ICollectionView;
        _keyPath: string;
        _displayPath: string;
        _sortByVal: boolean;
        _editable: boolean;
        _hash: any;
        /**
         * Initializes a new instance of the {@link DataMap} class.
         *
         * @param itemsSource An array or {@link ICollectionView} that contains the items to map.
         * @param selectedValuePath The name of the property that contains the keys (data values).
         * @param displayMemberPath The name of the property to use as the visual representation of the items.
         */
        constructor(itemsSource: any, selectedValuePath?: string, displayMemberPath?: string);
        /**
         * Gets or sets a value that determines whether grid controls should
         * use mapped (display) or raw (key) values when sorting data in columns
         * that use this {@link DataMap}.
         *
         * The default value for this property is <b>true</b>.
         */
        sortByDisplayValues: boolean;
        /**
         * Gets the {@link ICollectionView} object that contains the map data.
         */
        readonly collectionView: wijmo.collections.ICollectionView;
        /**
         * Gets the name of the property to use as a key for the item (data value).
         */
        readonly selectedValuePath: string;
        /**
         * Gets the name of the property to use as the visual representation of the item.
         */
        readonly displayMemberPath: string;
        /**
         * Gets the item that corresponds to a given key.
         *
         * @param key The key of the item to retrieve.
         */
        getDataItem(key: K): V;
        /**
         * Gets the display value that corresponds to a given key.
         *
         * @param key The key of the item to retrieve.
         */
        getDisplayValue(key: K): string;
        /**
         * Gets the key that corresponds to a given display value.
         *
         * @param displayValue The display value of the item to retrieve.
         * @param html Whether to convert the lookup values from HTML to plain text.
         */
        getKeyValue(displayValue: string, html?: boolean): K;
        /**
         * Gets an array with all of the display values on the map.
         *
         * @param dataItem Data item for which to get the display items.
         * This parameter is optional. If not provided, all possible display
         * values should be returned.
         */
        getDisplayValues(dataItem?: V): string[];
        /**
         * Gets an array with all of the keys on the map.
         */
        getKeyValues(): K[];
        /**
         * Gets or sets a value that indicates whether users should be allowed to enter
         * values that are not present on the {@link DataMap}.
         *
         * In order for a {@link DataMap} to be editable, the {@link selectedValuePath} and
         * {@link displayMemberPath} must be set to the same value.
         */
        isEditable: boolean;
        /**
         * Occurs when the map data changes.
         */
        readonly mapChanged: Event<DataMap<any, any>, EventArgs>;
        /**
         * Raises the {@link mapChanged} event.
         */
        onMapChanged(e?: wijmo.EventArgs): void;
        private _indexOf;
    }
}
declare module wijmo.grid {
    /**
     * Represents a rectangular group of cells defined by two row indices and
     * two column indices.
     */
    class CellRange {
        _row: number;
        _col: number;
        _row2: number;
        _col2: number;
        /**
         * Initializes a new instance of the {@link CellRange} class.
         *
         * @param r The index of the first row in the range (defaults to -1).
         * @param c The index of the first column in the range (defaults to -1).
         * @param r2 The index of the last row in the range (defaults to <b>r</b>).
         * @param c2 The index of the last column in the range (defaults to <b>c</b>).
         */
        constructor(r?: number, c?: number, r2?: number, c2?: number);
        /**
         * Initializes an existing {@link CellRange}.
         *
         * @param r The index of the first row in the range (defaults to -1).
         * @param c The index of the first column in the range (defaults to -1).
         * @param r2 The index of the last row in the range (defaults to <b>r</b>).
         * @param c2 The index of the last column in the range (defaults to <b>c</b>).
         */
        setRange(r?: number, c?: number, r2?: number, c2?: number): void;
        /**
         * Gets or sets the index of the first row in this range.
         */
        row: number;
        /**
         * Gets or sets the index of the first column in this range.
         */
        col: number;
        /**
         * Gets or sets the index of the second row in this range.
         */
        row2: number;
        /**
         * Gets or sets the index of the second column in this range.
         */
        col2: number;
        /**
         * Creates a copy of this range.
         */
        clone(): CellRange;
        /**
         * Copies an existing cell range into this one.
         *
         * @param rng {@link CellRange} to copy into this one.
         */
        copy(rng: CellRange): void;
        /**
         * Gets the number of rows in this range.
         */
        readonly rowSpan: number;
        /**
         * Gets the number of columns in this range.
         */
        readonly columnSpan: number;
        /**
         * Gets the index of the top row in this range.
         */
        readonly topRow: number;
        /**
         * Gets the index of the bottom row in this range.
         */
        readonly bottomRow: number;
        /**
         * Gets the index of the leftmost column in this range.
         */
        readonly leftCol: number;
        /**
         * Gets the index of the rightmost column in this range.
         */
        readonly rightCol: number;
        /**
         * Checks whether this range contains valid row and column indices
         * (row and column values are zero or greater).
         */
        readonly isValid: boolean;
        /**
         * Checks whether this range corresponds to a single cell.
         */
        readonly isSingleCell: boolean;
        /**
         * Checks whether this range contains another range or a specific cell.
         *
         * @param r The {@link CellRange} or row index to find.
         * @param c The column index (required if the r parameter is not a {@link CellRange} object).
         */
        contains(r: any, c?: number): boolean;
        /**
         * Checks whether this range contains a given row.
         *
         * @param r The index of the row to find.
         */
        containsRow(r: number): boolean;
        /**
         * Checks whether this range contains a given column.
         *
         * @param c The index of the column to find.
         */
        containsColumn(c: number): boolean;
        /**
         * Checks whether this range intersects another range.
         *
         * @param rng The {@link CellRange} object to check.
         */
        intersects(rng: CellRange): boolean;
        /**
         * Checks whether this range intersects the rows in another range.
         *
         * @param rng The {@link CellRange} object to check.
         */
        intersectsRow(rng: CellRange): boolean;
        /**
         * Checks whether this range intersects the columns in another range.
         *
         * @param rng The {@link CellRange} object to check.
         */
        intersectsColumn(rng: CellRange): boolean;
        /**
         * Gets the rendered size of this range.
         *
         * @param p The {@link GridPanel} object that contains this range.
         * @return A {@link Size} object that represents the sum of row heights and column widths in this range.
         */
        getRenderSize(p: GridPanel): wijmo.Size;
        /**
         * Checks whether this range equals another range.
         *
         * @param rng The {@link CellRange} object to compare to this range.
         */
        equals(rng: CellRange): boolean;
        /**
         * Returns a new {@link CellRange} that represents the union of
         * this range and another given range.
         *
         * @param rng {@link CellRange} to combine with this range.
         * @return A {@link CellRange} object that represents the union of
         * this range and the given range, or this range if the range to
         * combine with is null.
         */
        combine(rng: CellRange): CellRange;
        /**
         * Returns a string representing this {@link CellRange}.
         */
        toString(): string;
    }
}
declare module wijmo.grid {
    /**
     * Specifies constants that define the type of cell in a {@link GridPanel}.
     */
    enum CellType {
        /** Unknown or invalid cell type. */
        None = 0,
        /** Regular data cell. */
        Cell = 1,
        /** Column header cell. */
        ColumnHeader = 2,
        /** Row header cell. */
        RowHeader = 3,
        /** Top-left cell (intersection between row headers and column headers). */
        TopLeft = 4,
        /** Column footer cell. */
        ColumnFooter = 5,
        /** Bottom left cell (intersection between row headers and column footers). **/
        BottomLeft = 6
    }
    /**
     * Represents a logical part of the grid, such as the column headers, row headers,
     * and scrollable data part.
     */
    class GridPanel {
        private _g;
        private _ct;
        private _e;
        private _rows;
        private _cols;
        private _offsetY;
        private _activeCell;
        private _docRange;
        private _rng;
        private _recycle;
        _vrb: CellRange;
        _vru: CellRange;
        static readonly _INDEX_KEY = "wj-cell-index";
        static readonly _HTML_CELL = "<div class=\"wj-cell\" tabindex=\"-1\"></div>";
        /**
         * Initializes a new instance of the {@link GridPanel} class.
         *
         * @param g The {@link FlexGrid} object that owns the panel.
         * @param cellType The type of cell in the panel.
         * @param rows The rows displayed in the panel.
         * @param cols The columns displayed in the panel.
         * @param host The HTMLElement that hosts the cells in the control.
         */
        constructor(g: FlexGrid, cellType: CellType, rows: RowCollection, cols: ColumnCollection, host: HTMLElement);
        /**
         * Gets the grid that owns the panel.
         */
        readonly grid: FlexGrid;
        /**
         * Gets the type of cell contained in the panel.
         */
        readonly cellType: CellType;
        /**
         * Gets a {@link CellRange} that indicates the range of cells currently visible on the panel.
         */
        readonly viewRange: CellRange;
        /**
         * Gets the total width of the content in the panel.
         */
        readonly width: number;
        /**
         * Gets the total height of the content in this panel.
         */
        readonly height: number;
        /**
         * Gets the panel's row collection.
         */
        readonly rows: RowCollection;
        /**
         * Gets the panel's column collection.
         */
        readonly columns: ColumnCollection;
        /**
         * Gets the value stored in a cell in the panel.
         *
         * @param r The row index of the cell.
         * @param c The index, name, or binding of the column that contains the cell.
         * @param formatted Whether to format the value for display.
         */
        getCellData(r: number, c: number | string, formatted: boolean): any;
        /**
         * Sets the content of a cell in the panel.
         *
         * @param r The index of the row that contains the cell.
         * @param c The index, name, or binding of the column that contains the cell.
         * @param value The value to store in the cell.
         * @param coerce Whether to change the value automatically to match the column's data type.
         * @param invalidate Whether to invalidate the grid to show the change.
         * @return Returns true if the value is stored successfully, false otherwise (failed cast).
         */
        setCellData(r: number, c: number | string, value: any, coerce?: boolean, invalidate?: boolean): boolean;
        /**
         * Gets a cell's bounds in viewport coordinates.
         *
         * The returned value is a {@link Rect} object which contains the position and dimensions
         * of the cell in viewport coordinates.
         * The viewport coordinates are the same as those used by the
         * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect"
         * target="_blank">getBoundingClientRect</a> method.
         *
         * @param r The index of the row that contains the cell.
         * @param c The index of the column that contains the cell.
         * @param raw Whether to return the rectangle in raw panel coordinates as opposed to viewport coordinates.
         */
        getCellBoundingRect(r: number, c: number, raw?: boolean): wijmo.Rect;
        /**
         * Gets the element that represents a cell within this {@link GridPanel}.
         *
         * If the cell is not currently in view, this method returns null.
         *
         * @param r The index of the row that contains the cell.
         * @param c The index of the column that contains the cell.
         */
        getCellElement(r: number, c: number): HTMLElement;
        /**
         * Gets a {@link SelectedState} value that indicates the selected state of a cell.
         *
         * @param r Row index of the cell to inspect.
         * @param c Column index of the cell to inspect.
         * @param rng {@link CellRange} that contains the cell to inspect.
         */
        getSelectedState(r: number, c: number, rng: CellRange): SelectedState;
        /**
         * Gets the host element for the panel.
         */
        readonly hostElement: HTMLElement;
        _getAdjustedSelection(sel: CellRange): CellRange;
        _getOffsetY(): number;
        _updateContent(recycle: boolean, state: boolean, offsetY: number): HTMLElement;
        _clearCells(): void;
        _reorderCells(rngNew: CellRange, rngOld: CellRange): void;
        _createRange(host: Element, start: number, end: number): Range;
        _renderColHdrRow(rng: CellRange, state: boolean): number;
        _renderColHdrCell(row: HTMLElement, c: number, rng: CellRange, state: boolean, ctr: number): number;
        _renderRowHdrCell(row: HTMLElement, r: number, value: any): number;
        _renderRow(r: number, rng: CellRange, state: boolean, ctr: number): number;
        _renderCell(row: HTMLElement, r: number, c: number, rng: CellRange, state: boolean, ctr: number): number;
        _removeExtraCells(row: HTMLElement, count: number): void;
        _getViewRange(): CellRange;
        _getFrozenPos(): wijmo.Point;
    }
}
declare module wijmo.grid {
    /**
     * Provides arguments for {@link CellRange} events.
     */
    class CellRangeEventArgs extends wijmo.CancelEventArgs {
        _p: GridPanel;
        _rng: CellRange;
        _data: any;
        /**
         * Initializes a new instance of the {@link CellRangeEventArgs} class.
         *
         * @param p {@link GridPanel} that contains the range.
         * @param rng Range of cells affected by the event.
         * @param data Data related to the event.
         */
        constructor(p: GridPanel, rng: CellRange, data?: any);
        /**
         * Gets the {@link GridPanel} affected by this event.
         */
        readonly panel: GridPanel;
        /**
         * Gets the {@link CellRange} affected by this event.
         */
        readonly range: CellRange;
        /**
         * Gets the index of the row affected by this event.
         *
         * To get the {@link Row} object, use the {@link getRow} method.
         */
        readonly row: number;
        /**
         * Gets the index of the column affected by this event.
         *
         * To get the {@link Column} object, use the {@link getColumn} method.
         */
        readonly col: number;
        /**
         * Gets or sets the data associated with the event.
         */
        data: any;
        /**
         * Gets the {@link Row} affected by this event.
         *
         * To get the row index, use the {@link row} property.
         */
        getRow(): Row;
        /**
         * Gets the {@link Column} affected by this event.
         *
         * To get the column index, use the {@link col} property.
         *
         * @param binding Whether to get the column by index or by binding.
         * This parameter only makes a difference in grids that have multiple
         * rows per data item (like the {@link MultiRow} grid).
         */
        getColumn(binding?: boolean): Column;
    }
    /**
     * Provides arguments for the {@link FlexGrid.formatItem} event.
     */
    class FormatItemEventArgs extends CellRangeEventArgs {
        _cell: HTMLElement;
        /**
        * Initializes a new instance of the {@link FormatItemEventArgs} class.
        *
        * @param p {@link GridPanel} that contains the range.
        * @param rng Range of cells affected by the event.
        * @param cell Element that represents the grid cell to be formatted.
        */
        constructor(p: GridPanel, rng: CellRange, cell: HTMLElement);
        /**
         * Gets a reference to the element that represents the grid cell to be formatted.
         */
        readonly cell: HTMLElement;
    }
    /**
     * Provides arguments for the {@link FlexGrid.cellEditEnding} event.
     */
    class CellEditEndingEventArgs extends CellRangeEventArgs {
        _stayInEditMode: boolean;
        _refresh: boolean;
        /**
         * Gets or sets whether the cell should remain in edit mode
         * instead of finishing the edits.
         */
        stayInEditMode: boolean;
        /**
         * Gets or sets a value that determines whether the grid should
         * refresh all its contents after the edits are done.
         */
        refresh: boolean;
    }
}
declare module wijmo.grid {
    /**
     * Specifies constants that define the selection behavior.
     */
    enum SelectionMode {
        /** The user cannot select cells using the mouse or keyboard. */
        None = 0,
        /** The user can select only a single cell at a time. */
        Cell = 1,
        /** The user can select contiguous blocks of cells. */
        CellRange = 2,
        /** The user can select a single row at a time. */
        Row = 3,
        /** The user can select contiguous rows. */
        RowRange = 4,
        /** The user can select non-contiguous rows by ctrl+clicking. */
        ListBox = 5,
        /** The user can select multiple ranges by ctrl+clicking and dragging the mouse. */
        MultiRange = 6
    }
    /**
     * Specifies constants that represent the selected state of a cell.
     */
    enum SelectedState {
        /** The cell is not selected. */
        None = 0,
        /** The cell is selected but is not the active cell. */
        Selected = 1,
        /** The cell is selected and is the active cell. */
        Cursor = 2,
        /** The cell is active cell but not in a selected state. */
        Active = 3
    }
    /**
     * Specifies constants that represent a type of movement for the selection.
     */
    enum SelMove {
        /** Do not change the selection. */
        None = 0,
        /** Select the next visible cell. */
        Next = 1,
        /** Select the previous visible cell. */
        Prev = 2,
        /** Select the first visible cell in the next page. */
        NextPage = 3,
        /** Select the first visible cell in the previous page. */
        PrevPage = 4,
        /** Select the first visible cell. */
        Home = 5,
        /** Select the last visible cell. */
        End = 6,
        /** Select the next visible cell skipping columns and rows if necessary. */
        NextCell = 7,
        /** Select the previous visible cell skipping columns and rows if necessary. */
        PrevCell = 8,
        /** Select the next visible and editable cell skipping columns and rows if necessary. */
        NextEditableCell = 9,
        /** Select the previous visible cell skipping columns and rows if necessary. */
        PrevEditableCell = 10
    }
    /**
     * Handles the grid's selection.
     */
    class _SelectionHandler {
        private _g;
        private _sel;
        private _xSel;
        private _e;
        private _mode;
        /**
         * Initializes a new instance of the {@link _SelectionHandler} class.
         *
         * @param g {@link FlexGrid} that owns this {@link _SelectionHandler}.
         */
        constructor(g: FlexGrid);
        /**
         * Gets or sets the current selection mode.
         */
        selectionMode: SelectionMode;
        /**
         * Gets or sets the current selection.
         */
        selection: CellRange;
        /**
         * Gets an array with {@link CellRange} objects that are part of
         * the grid's extended selection.
         */
        readonly extendedSelection: wijmo.collections.ObservableArray<CellRange>;
        /**
         * Selects a cell range and optionally scrolls it into view.
         *
         * @param rng Range to select.
         * @param show Whether to scroll the new selection into view.
         * @param force Whether to update the selection even if the {@link selectionChanging}
         * event cancels the change.
         */
        select(rng: any, show?: any, force?: boolean): boolean;
        /**
         * Moves the selection by a specified amount in the vertical and horizontal directions.
         * @param rowMove How to move the row selection.
         * @param colMove How to move the column selection.
         * @param extend Whether to extend the current selection or start a new one.
         */
        moveSelection(rowMove: SelMove, colMove: SelMove, extend: boolean): void;
        _setSelectionMode(value: SelectionMode): void;
        _expandSelection(): void;
        _deselectRange(rng: CellRange): boolean;
        private _showSelection;
        private _adjustReferenceCell;
    }
}
declare module wijmo.grid {
    /**
     * Specifies flags that represent the state of a grid row or column.
     */
    enum RowColFlags {
        /** The row or column is visible. */
        Visible = 1,
        /** The row or column can be resized. */
        AllowResizing = 2,
        /** The row or column can be dragged to a new position with the mouse. */
        AllowDragging = 4,
        /** The row or column can contain merged cells. */
        AllowMerging = 8,
        /** The column can be sorted by clicking its header with the mouse. */
        AllowSorting = 16,
        /** The column was generated automatically. */
        AutoGenerated = 32,
        /** The group row is collapsed. */
        Collapsed = 64,
        /** The row has a parent group that is collapsed. */
        ParentCollapsed = 128,
        /** The row or column is selected. */
        Selected = 256,
        /** The row or column is read-only (cannot be edited). */
        ReadOnly = 512,
        /** Cells in this row or column contain HTML text. */
        HtmlContent = 1024,
        /** Cells in this row or column may contain wrapped text. */
        WordWrap = 2048,
        /** Cells in this row or column may contain wrapped text. */
        MultiLine = 4096,
        /** Cells in this column have templates. */
        HasTemplate = 8192,
        /** Default settings for new rows. */
        RowDefault = 3,
        /** Default settings for new columns. */
        ColumnDefault = 23
    }
    /**
     * An abstract class that serves as a base for the {@link Row} and {@link Column} classes.
     */
    class RowCol {
        protected _type: wijmo.DataType;
        protected _align: string;
        protected _inpType: string;
        protected _mask: string;
        protected _maxLen: number;
        protected _required: boolean;
        protected _fmt: string;
        protected _map: DataMap;
        protected _mapEditor: DataMapEditor;
        protected _ddCssClass: string;
        protected _cssClass: string;
        protected _cssClassAll: string;
        protected _szMin: number;
        protected _szMax: number;
        protected _f: RowColFlags;
        _list: RowColCollection;
        _sz: number;
        _pos: number;
        _idx: number;
        _idxVis: number;
        _idxData: number;
        _binding: wijmo.Binding;
        _bindingSort: wijmo.Binding;
        /**
         * Gets or sets the name of the property the column is bound to.
         */
        binding: string;
        /**
         * Gets or sets the name of the property to use when sorting this column.
         *
         * Use this property in cases where you want the sorting to be performed
         * based on values other than the ones specified by the {@link binding} property.
         *
         * Setting this property is null causes the grid to use the value of the
         * {@link binding} property to sort the column.
         */
        sortMemberPath: string;
        /**
         * Gets or sets the type of value stored in the column or row.
         *
         * Values are coerced into the proper type when editing the grid.
         */
        dataType: wijmo.DataType;
        /**
         * Gets or sets the "type" attribute of the HTML input element used to
         * edit values in this column or row.
         *
         * By default, this property is set to "tel" for numeric columns, and to
         * "text" for all other non-boolean column types. The "tel" input type
         * causes mobile devices to show a numeric keyboard that includes a negative
         * sign and a decimal separator.
         *
         * Use this property to change the default setting if the default does not
         * work well for the current culture, device, or application.
         * In these cases, try setting the property to "number" or simply "text."
         */
        inputType: string;
        /**
         * Gets or sets a mask to use while editing values in this column or row.
         *
         * The mask format is the same used by the {@link wijmo.input.InputMask}
         * control.
         *
         * If specified, the mask must be compatible with the value of
         * the {@link format} property. For example, the mask '99/99/9999' can
         * be used for entering dates formatted as 'MM/dd/yyyy'.
         */
        mask: string;
        /**
         * Gets or sets the maximum number of characters that the can
         * be entered into cells in this column or row.
         *
         * This property is set to null by default, which allows entries
         * with any number of characters.
         */
        maxLength: number;
        /**
         * Gets or sets the horizontal alignment of cells in the column or row.
         *
         * The default value for this property is null, which causes the grid to select
         * the alignment automatically based on the column's {@link dataType} (numbers are
         * right-aligned, Boolean values are centered, and other types are left-aligned).
         *
         * If you want to override the default alignment, set this property
         * to 'left', 'right', 'center', or 'justify'.
         */
        align: string;
        /**
         * Gets or sets the format string used to convert raw values into
         * display values for the column or row (see {@link Globalize}).
         */
        format: string;
        /**
         * Gets or sets the {@link DataMap} used to convert raw values into display
         * values for the column or row.
         *
         * By default, data-mapped cells have drop-down lists that can be used for
         * quick editing. You can change the type of editor by setting the
         * column's {@link dataMapEditor} property.
         *
         * The default editor type, {@link DataMapEditor.DropDownList}, requires the
         * <b>wijmo.input module</b> to be loaded.
         */
        dataMap: DataMap;
        /**
         * Gets or sets a value that indicates the type of editor to use when
         * editing data-mapped cells in this column or row.
         *
         * The {@link DataMapEditor.DropDownList} setting (the default value)
         * adds drop-down buttons to cells to columns that have a {@link dataMap}
         * and are not read-only.
         * Clicking on the drop-down buttons causes the grid to show a list where
         * users can select the value for the cell.
         *
         * The {@link DataMapEditor.RadioButtons} setting causes the grid to
         * show radio buttons for each option. The buttons can be clicked with
         * the mouse or keyboard (by pressing each option's initial letter or
         * the space key to cycle through the options.)
         *
         * The default value for this property is {@link DataMapEditor.DropDownList}.
         * The drop-down list is enabled only if the <b>wijmo.input</b> module to be
         * loaded.
         */
        dataMapEditor: DataMapEditor;
        showDropDown: boolean;
        /**
         * Gets or sets a CSS class name to add to drop-downs in this column or row.
         *
         * The drop-down buttons are shown only if the column has a {@link dataMap}
         * set and is editable. Clicking on the drop-down buttons causes the grid
         * to show a list where users can select the value for the cell.
         *
         * Cell drop-downs require the wijmo.input module to be loaded.
         */
        dropDownCssClass: string;
        /**
         * Gets or sets a value that indicates whether the column or row
         * is visible.
         */
        visible: boolean;
        /**
         * Gets a value that indicates whether the column or row is
         * visible and not collapsed.
         *
         * This property is read-only. To change the visibility of a
         * column or row, use the {@link visible} property instead.
         */
        readonly isVisible: boolean;
        /**
         * Gets the position of the column or row in pixels.
         */
        readonly pos: number;
        /**
         * Gets the index of the column or row in the parent collection.
         */
        readonly index: number;
        /**
         * Gets the index of the column or row in the parent collection
         * ignoring invisible elements ({@link isVisible}).
         */
        readonly visibleIndex: number;
        /**
         * Gets or sets the size of the column or row.
         *
         * Setting this property to null or negative values causes
         * the element to use the parent collection's default size.
         */
        size: number | null;
        /**
         * Gets the render size of the column or row.
         *
         * This property accounts for visibility, default size,
         * and min and max sizes.
         */
        readonly renderSize: number;
        /**
         * Gets or sets a value that indicates whether the user can resize
         * the column or row with the mouse.
         *
         * The default value for this property is <b>true</b>.
         */
        allowResizing: boolean;
        /**
         * Gets or sets a value that indicates whether the user can move
         * the column or row to a new position with the mouse.
         *
         * The default value for this property is <b>true</b>.
         */
        allowDragging: boolean;
        /**
         * Gets or sets a value that indicates whether cells in the
         * column or row can be merged.
         *
         * The default value for this property is <b>false</b>.
         */
        allowMerging: boolean;
        /**
         * Gets or sets a value that indicates whether the column or row
         * is selected.
         */
        isSelected: boolean;
        /**
         * Gets or sets a value that indicates whether cells in the
         * column or row can be edited.
         *
         * The default value for this property is <b>true</b>.
         */
        isReadOnly: boolean;
        /**
         * Gets or sets a value that determines whether values in this
         * column or row are required.
         *
         * By default, this property is set to null, which means values
         * are required, but non-masked string columns may contain empty
         * strings.
         *
         * When set to true, values are required and empty strings are
         * not allowed.
         *
         * When set to false, null values and empty strings are allowed.
         */
        isRequired: boolean;
        /**
         * Gets or sets a value that indicates whether cells in this column or row
         * contain HTML content rather than plain text.
         *
         * This property only applies to regular cells. Row and column header
         * cells contain plain text by default. If you want to display HTML
         * in column or row headers, you must use the {@link FlexGrid.formatItem}
         * event and set the cell's innerHTML content in code.
         *
         * The default value for this property is <b>false</b>.
         */
        isContentHtml: boolean;
        /**
         * Gets or sets a value that indicates whether the content of cells in
         * this column or row should wrap to fit the available column width.
         *
         * The default value for this property is <b>false</b>.
         */
        wordWrap: boolean;
        /**
         * Gets or sets a value that indicates whether the content of cells in
         * this column or row should wrap at new line characters (\n).
         *
         * The default value for this property is <b>false</b>.
         */
        multiLine: boolean;
        /**
         * Gets or sets a CSS class name to use when rendering
         * data (non-header) cells in the column or row.
         */
        cssClass: string;
        /**
         * Gets or sets a CSS class name to use when rendering
         * all cells (data and headers) in the column or row.
         */
        cssClassAll: string;
        /**
         * Gets the {@link FlexGrid} that owns this column or row.
         */
        readonly grid: FlexGrid;
        /**
         * Gets the {@link ICollectionView} bound to this column or row.
         */
        readonly collectionView: wijmo.collections.ICollectionView;
        /**
         * Marks the owner list as dirty and refreshes the owner grid.
         */
        onPropertyChanged(): void;
        /**
         * Occurs when the value of the {@link grid} property changes.
         */
        readonly gridChanged: Event<RowCol, EventArgs>;
        /**
         * Raises the {@link gridChanged} event.
         */
        onGridChanged(e?: wijmo.EventArgs): void;
        _setList(list: RowColCollection): void;
        _getFlag(flag: RowColFlags): boolean;
        _setFlag(flag: RowColFlags, value: boolean, quiet?: boolean): boolean;
    }
    /**
     * Represents a function that takes an {@link ICellTemplateContext}
     * object and returns an HTML string to be used as content for a
     * cell.
     *
     * Alternatively, the function may modify the content of the cell element
     * directly and return null to indicate the cell element should not be
     * modified.
     *
     * @param: ctx {@link ICellTemplateContext} object that contains information about the cell.
     * @param: cell <b>HTMLElement</b> that represents the cell.
     * @returns A template string built using the context, or null to indicate the function
     * updated the cell element and it should not be modified by the grid.
     */
    type ICellTemplateFunction = 
    /**
     * @param: ctx {@link ICellTemplateContext} object that contains information about the cell.
     * @param: cell <b>HTMLElement</b> that represents the cell.
     * @returns A template string built using the context, or null to indicate the function
     * updated the cell element and it should not be modified by the grid.
     */
    (ctx: ICellTemplateContext, cell?: HTMLElement) => string | null;
    /**
     * Represents a context used for generating HTML strings to
     * be used as content for a cell.
     */
    interface ICellTemplateContext {
        /** {@link Row} that contains the cell. */
        row: Row;
        /** {@link Column} that contains the cell. */
        col: Column;
        /** Data item that the cell belongs to. */
        item: any;
        /** Raw value of the property the cell is bound to. */
        value: any;
        /** Formatted/mapped value of the property the cell is bound to. */
        text: string;
    }
    /**
     * Represents a column on the grid.
     */
    class Column extends RowCol {
        private static _ctr;
        private _hdr;
        private _name;
        private _agg;
        private _quickSize;
        private _descById;
        private _edt;
        _tpl: string | ICellTemplateFunction;
        _szStar: string;
        _hash: string;
        /**
         * Initializes a new instance of the {@link Column} class.
         *
         * @param options Initialization options for the column.
         */
        constructor(options?: any);
        /**
         * Gets or sets the name of the column.
         *
         * The column name can be used to retrieve the column using the
         * {@link FlexGrid.getColumn} method.
         */
        name: string;
        /**
         * Gets or sets the width of the column.
         *
         * Column widths may be positive numbers (sets the column width in pixels),
         * null or negative numbers (uses the collection's default column width), or
         * strings in the format '{number}*' (star sizing).
         *
         * The star-sizing option performs a XAML-style dynamic sizing where column
         * widths are proportional to the number before the star. For example, if
         * a grid has three columns with widths "100", "*", and "3*", the first column
         * will be 100 pixels wide, the second will take up 1/4th of the remaining
         * space, and the last will take up the remaining 3/4ths of the remaining space.
         *
         * Star-sizing allows you to define columns that automatically stretch to fill
         * the width available. For example, set the width of the last column to "*"
         * and it will automatically extend to fill the entire grid width so there's
         * no empty space. You may also want to set the column's {@link minWidth} property
         * to prevent the column from getting too narrow.
         */
        width: any;
        /**
         * Gets or sets the minimum width of the column.
         *
         * This property is set to null by default, which means there
         * is the minimum width is zero.
         */
        minWidth: number;
        /**
         * Gets or sets the maximum width (in pixels) of the column.
         *
         * This property is set to null by default, which means there
         * is no maximum width.
         */
        maxWidth: number;
        /**
         * Gets or sets a value that determines whether the grid should optimize
         * performance over precision when auto-sizing this column.
         *
         * Setting this property to false disables quick auto-sizing for this column.
         *
         * Setting it to true enables the feature, subject to the value of the grid's
         * {@link wijmo.grid.FlexGrid.quickAutoSize} property.
         *
         * Setting it to null (the default value) enables the feature for columns
         * that display plain text and don't have templates.
         */
        quickAutoSize: boolean;
        _getQuickAutoSize(): boolean;
        /**
         * Gets the render width of the column.
         *
         * The value returned takes into account the column's visibility, default size, and min and max sizes.
         */
        readonly renderWidth: number;
        /**
         * Gets or sets the text displayed in the column header.
         */
        header: string;
        /**
         * Gets or sets an {@link ICellTemplateFunction} or a template string
         * to be used for generating the HTML content of data cells in this
         * {@link Column}.
         *
         * Cell template strings use template literal syntax. The content string
         * is generated using a scope of type {@link ICellTemplateContext}.
         *
         * {@link ICellTemplateFunction} functions take an argument of type
         * {@link ICellTemplateContext} and return the HTML content to be
         * displayed in the cell.
         *
         * For example:
         *
         * ``` typescript
         * // simple/default rendering with template string
         * col.cellTemplate = '${value}:${col.format}';
         *
         * // conditional formatting with template string
         * col.cellTemplate = '<span class=${value > 40000 ? "big-val" : "small-val"}>${text}</span>';
         *
         * // conditional formatting with ICellTemplateFunction:
         * col.cellTemplate = (ctx: ICellTemplateContext) => {
         *      return '<span class="{cls}">{val}</span>'
         *          .replace('{cls}', ctx.value > 40000 ? 'big-val' : 'small-val')
         *          .replace('{val}', ctx.text);
         * };
         * ```
         * Notice that the cell templates are regular strings, not actual JavaScript
         * templates. Therefore, they are defined using regular quotes (single or
         * double) as oppsed to the back-quotes used by JavaScript template strings.
         *
         * The {@link cellTemplate} property provides a simpler (but less powerful)
         * alternative than the {@link formatItem} event or the cell templates available
         * in the Wijmo interop modules.
         *
         * When using cell templates, you should still set the column's {@link binding} and
         * {@link format} properties.
         * They will be used in edit mode and to support copy/paste/export operations.
         *
         * Cell templates are used only to render cell data, and have no effect on editing.
         * If you want to customize the cell editors, use the {@link editor} property.
         */
        cellTemplate: string | ICellTemplateFunction;
        /**
         * Gets or sets a reference to an input control to be used as a
         * custom cell editor for this {@link Column}.
         *
         * The input control is typically one of the Wijmo input controls.
         * It should be compatible with the column's data type.
         *
         * For example, this code replaces the built-in editor for all
         * date columns on a grid with a single **InputDate** control:
         *
         * ```typescript
         * import { InputDate } from '@grapecity/wijmo.input';
         * let inputDate = new InputDate(document.createElement('div'));
         * theGrid.columns.forEach(col => {
         *     if (col.DataType == DateType.Date) {
         *         col.editor = inputDate;
         *     }
         * })
         * ```
         * And this code replaces the built-in editor for all data-mapped
         * columns on a grid with **AutoComplete** controls:
         *
         * ```typescript
         * import { AutoComplete } from '@grapecity/wijmo.input';
         * theGrid.columns.forEach(col => {
         *     let map = col.dataMap;
         *     if (map) {
         *         col.editor = new AutoComplete(document.createElement('div'), {
         *             itemsSource: map.collectionView,
         *             displayMemberPath: map.displayMemberPath,
         *             selectedValuePath: map.selectedValuePath
         *         });
         *     }
         * });
         * ```
         * Notice how the example above uses the column's {@link dataMap} property
         * to initialize the **AutoComplete**.
         *
         * In many cases you may also want to use column properties such as
         * {@link format} and {@link isRequired} to initialize the custom editors.
         * This is important since the custom editors do not inherit **any**
         * properties from the column being edited.
         *
         * The example below shows how you can use the {@link editor} property
         * to edit grid items with various Wijmo input controls:
         *
         * {@sample Grid/Editing/CustomEditors Example}
         */
        editor: wijmo.Control;
        /**
         * Gets or sets a value that indicates whether the user can sort the column by clicking its header.
         */
        allowSorting: boolean;
        /**
         * Gets a string that describes the current sorting applied to the column.
         * Possible values are '+' for ascending order, '-' for descending order, or
         * null for unsorted columns.
         */
        readonly currentSort: string;
        /**
         * Gets the index of this column in the sort descriptions array for the
         * grid's collection view.
         */
        readonly currentSortIndex: number;
        /**
         * Gets or sets the {@link Aggregate} to display in the group header rows
         * for the column.
         */
        aggregate: wijmo.Aggregate;
        /**
         * Gets or sets the ID of an element that contains a description
         * of the column.
         *
         * The ID is used as the value of the <b>aria-describedby</b>
         * attribute for the column header element.
         */
        describedById: string;
        /**
         * Gets a value that determines whether values in the column/row are required.
         *
         * Returns the value of the {@link isRequired} property if it is not null, or
         * determines the required status based on the column's {@link dataType}.
         *
         * By default, string columns are not required unless they have an associated
         * {@link dataMap} or {@link mask}; all other data types are required.
         *
         * @param row Row that contains the cell being checked.
         * @return True if the value is required, false otherwise.
         */
        getIsRequired(row?: Row): boolean;
        /**
         * Gets the actual alignment if items in the column or row.
         *
         * Returns the value of the {@link align} property if it is not null, or
         * selects the alignment based on the column's {@link dataType}.
         *
         * @param row Row that contains the cell being checked.
         * @return A string representing the cell alignment.
         */
        getAlignment(row?: Row): string;
        _getBindingSort(): string;
        static _parseStarSize(value: any): number;
    }
    /**
     * Represents a row in the grid.
     */
    class Row extends RowCol {
        private _data;
        _ubv: any;
        /**
         * Initializes a new instance of the {@link Row} class.
         *
         * @param dataItem The data item that this row is bound to.
         */
        constructor(dataItem?: any);
        /**
         * Gets or sets the item in the data collection that the item is bound to.
         */
        dataItem: any;
        /**
         * Gets the index of this row's data item within the current data view.
         *
         * This may be different from the row's {@link index} property if there
         * are group rows (which do not correspond to any data items) or in
         * classes that bind multiple rows to individual data items.
         */
        readonly dataIndex: number;
        /**
         * Gets or sets the height of the row.
         * Setting this property to null or negative values causes the element to use the
         * parent collection's default size.
         */
        height: number | null;
        /**
         * Gets the render height of the row.
         *
         * The value returned takes into account the row's visibility, default size, and min and max sizes.
         */
        readonly renderHeight: number;
    }
    /**
     * Represents a row that serves as a header for a group of rows.
     */
    class GroupRow extends Row {
        _level: number;
        /**
         * Initializes a new instance of the {@link GroupRow} class.
         */
        constructor(dataItem?: any);
        /**
         * Gets or sets the hierarchical level of the group associated with this {@link GroupRow}.
         */
        level: number;
        /**
         * Gets a value that indicates whether this {@link GroupRow} has child rows.
         */
        readonly hasChildren: boolean;
        /**
         * Gets or sets a value that indicates whether this {@link GroupRow} is
         * collapsed (child rows are hidden) or expanded (child rows are visible).
         */
        isCollapsed: boolean;
        /**
         * Gets the header text for this {@link GroupRow}.
         */
        getGroupHeader(): string;
        _setCollapsed(collapsed: boolean): void;
        /**
         * Gets a {@link CellRange} object that contains all of the rows in the group represented
         * by this {@link GroupRow} and all of the columns in the grid.
         */
        getCellRange(): CellRange;
    }
    /**
     * Abstract class that serves as a base for row and column collections.
     */
    class RowColCollection<T extends RowCol = RowCol> extends wijmo.collections.ObservableArray<T> {
        _g: FlexGrid;
        _frozen: number;
        _lastFrozen: number;
        _firstVisible: number;
        _vlen: number;
        _szDef: number;
        _szTot: number;
        _szCustom: boolean;
        _dirty: boolean;
        _szMin: number;
        _szMax: number;
        /**
         * Initializes a new instance of the {@link RowColCollection} class.
         *
         * @param g The {@link FlexGrid} that owns the collection.
         * @param defaultSize The default size of the elements in the collection.
         */
        constructor(g: FlexGrid, defaultSize: number);
        /**
         * Gets the {@link FlexGrid} that owns this collection.
         */
        readonly grid: FlexGrid;
        /**
         * Gets or sets the default size of elements in the collection.
         */
        defaultSize: number;
        /**
         * Gets or sets the number of frozen rows or columns in the collection.
         *
         * Frozen rows and columns do not scroll, and instead remain at the top or left of
         * the grid, next to the fixed cells. Unlike fixed cells, however, frozen
         * cells may be selected and edited like regular cells.
         */
        frozen: number;
        /**
         * Checks whether a column or row is frozen.
         *
         * @param index The index of the column or row to check.
         */
        isFrozen(index: number): boolean;
        /**
         * Gets or sets the minimum size of elements in the collection.
         */
        minSize: number;
        /**
         * Gets or sets the maximum size of elements in the collection.
         */
        maxSize: number;
        /**
         * Gets the total size of the elements in the collection.
         */
        getTotalSize(): number;
        /**
         * Gets the number of visible elements in the collection ({@link Row.isVisible}).
         */
        readonly visibleLength: number;
        /**
         * Gets the index of the element at a given physical position.
         * @param position Position of the item in the collection, in pixels.
         */
        getItemAt(position: number): number;
        /**
         * Finds the next visible cell for a selection change.
         * @param index Starting index for the search.
         * @param move Type of move (size and direction).
         * @param pageSize Size of a page (in case the move is a page up/down).
         */
        getNextCell(index: number, move: SelMove, pageSize?: number): any;
        /**
         * Checks whether an element can be moved from one position to another.
         *
         * @param src The index of the element to move.
         * @param dst The position to which to move the element, or specify -1 to append the element.
         * @param adjustFrozenCount Whether to adjust the frozen element count when
         * the movement is into or out of the frozen area.
         * @return Returns true if the move is valid, false otherwise.
         */
        canMoveElement(src: number, dst: number, adjustFrozenCount?: boolean): boolean;
        /**
         * Moves an element from one position to another.
         * @param src Index of the element to move.
         * @param dst Position where the element should be moved to (-1 to append).
         * @param adjustFrozenCount Whether to adjust the frozen element count when
         * the movement is into or out of the frozen area.
         * @return Returns true if the element was moved, false otherwise.
         */
        moveElement(src: number, dst: number, adjustFrozenCount?: boolean): boolean;
        /**
         * Keeps track of dirty state and invalidate grid on changes.
         */
        onCollectionChanged(e?: collections.NotifyCollectionChangedEventArgs<any>): void;
        /**
         * Appends an item to the array.
         *
         * @param item Item to add to the array.
         * @return The new length of the array.
         */
        push(item: T): number;
        /**
         * Removes or adds items to the array.
         *
         * @param index Position where items are to be added or removed.
         * @param count Number of items to remove from the array.
         * @param ...item One or mode items to add to the array.
         * @return An array containing the removed elements.
         */
        splice(index: number, count: number, ...item: T[]): T[];
        /**
         * Suspends notifications until the next call to {@link endUpdate}.
         */
        beginUpdate(): void;
        _setDefaultSize(value: number): void;
        _update(): boolean;
    }
    /**
     * Represents a collection of {@link Column} objects in a {@link FlexGrid} control.
     */
    class ColumnCollection extends RowColCollection<Column> {
        _descById: string;
        /**
         * Gets a column by name, binding, or index.
         *
         * The method searches the column by name. If a column with the given name
         * is not found, it searches by binding. The searches are case-sensitive.
         *
         * @param name The name, binding, or index to find.
         * @return The column with the specified name or binding, or null if not found.
         */
        getColumn(name: string | number): Column;
        /**
         * Gets the index of a column by name or binding.
         *
         * The method searches the column by name. If a column with the given name
         * is not found, it searches by binding. The searches are case-sensitive.
         *
         * @param name The name or binding to find.
         * @return The index of column with the specified name or binding, or -1 if not found.
         */
        indexOf(name: any): number;
        /**
         * Gets or sets the ID of an element that contains a description
         * of the column headers.
         *
         * The ID is used as the value of the <b>aria-describedby</b>
         * attribute for all column header elements. For column-specific
         * descriptions, use the column's {@link Column.describedById} instead.
         */
        describedById: string;
        /**
         * Gets the index of the first visible column (where the outline tree is displayed).
         */
        readonly firstVisibleIndex: number;
        _updateStarSizes(szAvailable: number): boolean;
    }
    /**
     * Represents a collection of {@link Row} objects in a {@link FlexGrid} control.
     */
    class RowCollection extends RowColCollection<Row> {
        _maxLevel: number;
        _ariaLabel: string;
        /**
         * Gets or sets a string used as an ARIA label for all rows in this
         * collection.
         *
         * For example, the code below adds ARIA labels to the header and
         * data rows:
         *
         * <pre>
         * grid.rows.ariaLabel = 'data row';
         * grid.columnHeaders.rows.ariaLabel = 'header row';
         * </pre>
         */
        ariaLabel: string;
        /**
         * Gets the maximum group level in the grid.
         *
         * @return The maximum group level or -1 if the grid has no group rows.
         */
        readonly maxGroupLevel: number;
        _update(): boolean;
    }
}
declare module wijmo.grid {
    /**
     * Specifies constants that define the grid's sorting capabilities.
     */
    enum AllowSorting {
        /**
         * Users cannot sort the grid by clicking the column headers.
         */
        None = 0,
        /**
         * Users may sort the grid by a single column at a time.
         *
         * Clicking the column header sorts the column or flips the sort direction.
         *
         * Ctrl+Clicking removes the sort.
         */
        SingleColumn = 1,
        /**
         * Users may sort the grid by multiple columns at a time.
         *
         * Clicking the column header sorts the column or flips the sort direction.
         *
         * Ctrl+Clicking removes the sort for the clicked column.
         *
         * Ctrl+Shift+Clicking removes all sorts.
         */
        MultiColumn = 2
    }
    /**
     * Specifies constants that define the grid's column pinning capabilities.
     */
    enum AllowPinning {
        /** Users cannot pin columns. */
        None = 0,
        /** Users can pin and unpin one column at a time (possibly moving them in the process). */
        SingleColumn = 1,
        /** Users can pin and unpin column ranges (columns do not move when being pinned or unpinned). */
        ColumnRange = 2,
        /** Users can pin and unpin single columns or column ranges (using the shift key). */
        Both = 3
    }
    /**
     * Specifies constants that define the visibility of row and column headers.
     */
    enum HeadersVisibility {
        /** No header cells are displayed. */
        None = 0,
        /** Only column header cells are displayed. */
        Column = 1,
        /** Only row header cells are displayed. */
        Row = 2,
        /** Both column and row header cells are displayed. */
        All = 3
    }
    /**
     * Specifies options to be used with the {@link getClipString} method.
     */
    enum ClipStringOptions {
        /** Use default options (tabs as cell separators, formatted/visible/unquoted cells). */
        Default = 0,
        /** Use commas as cell separators (CSV format). */
        CSV = 1,
        /** Quote all cells. */
        QuoteAll = 2,
        /** Skip cells that have been merged over (like Excel). */
        SkipMerged = 4,
        /** Export unformatted values. */
        Unformatted = 8,
        /** Include invisible rows. */
        InvisibleRows = 16,
        /** Include invisible columns. */
        InvisibleColumns = 32,
        /** Include invisible rows and columns. */
        InvisibleCells = 48
    }
    /**
     * Represents a method that can be used to customize the
     * representation of grid cell elements.
     */
    interface IItemFormatter {
        /**
         * @param panel {@link GridPanel} that contains the cell.
         * @param row Index of the row that contains the cell.
         * @param col Index of the column that contains the cell.
         * @param cell HTMLElement that represents the cell.
         */
        (panel: GridPanel, row: number, col: number, cell: HTMLElement): void;
    }
    /**
     * Represents a method returns error strings associated with grid cells.
     */
    interface IItemValidator {
        /**
         * @param row Row index of the cell being tested.
         * @param col Column index of the cell being tested.
         * @param parsing Whether the value is being edited and could not be parsed into the right data type.
         * @returns A string describing the error, or null to indicate the cell contains no errors.
         */
        (row: number, col: number, parsing?: boolean): string | null;
    }
    /**
     * The {@link FlexGrid} control provides a powerful and flexible way to
     * display and edit data in a tabular format.
     *
     * The {@link FlexGrid} control is a full-featured grid, providing all the
     * features you are used to including several selection modes, sorting,
     * column reordering, grouping, filtering, editing, custom cells,
     * XAML-style star-sizing columns, row and column virtualization, etc.
     *
     * The {@link FlexGrid} control supports the following keyboard commands:
     *
     * <table>
     *   <thead>
     *     <tr><th>Key Combination</th><th>Action</th></tr>
     *   </thead>
     *   <tbody>
     *     <tr><td>Shift + Space</td><td>Select row</td></tr>
     *     <tr><td>Control + Space</td><td>Select column</td></tr>
     *     <tr><td>F2</td><td>Start editing the current cell</td></tr>
     *     <tr><td>Space</td><td>Start editing or toggle checkbox</td></tr>
     *     <tr><td>Control + A</td><td>Select the entire grid contents</td></tr>
     *     <tr><td>Left/Right</td><td>Select the cell to the left/right of the selection, collapse/expand group rows</td></tr>
     *     <tr><td>Shift + Left/Right</td><td>Extend the selection to include the next cell to the left/right of the selection</td></tr>
     *     <tr><td>Up/Down</td><td>Select the next cell above or below the selection</td></tr>
     *     <tr><td>Shift + Up/Down</td><td>Extend the selection to include the cell above or below the selection</td></tr>
     *     <tr><td>Alt + Up/Down</td><td>Drop down the listbox editor for the current cell</td></tr>
     *     <tr><td>PageUp/Down</td><td>Select the cell one page above or below the selection</td></tr>
     *     <tr><td>Shift + PageUp/Down</td><td>Extend the selection to include the cell one page above or below the selection</td></tr>
     *     <tr><td>Alt + PageUp/Down</td><td>Move the selection to the first or last row</td></tr>
     *     <tr><td>Shift + Alt + PageUp/Down</td><td>Extend the selection to include the first or last row</td></tr>
     *     <tr><td>Home/End</td><td>Move the selection to the first or last column</td></tr>
     *     <tr><td>Shift + Home/End</td><td>Extend the selection to include the first or last column</td></tr>
     *     <tr><td>Ctrl + Home/End</td><td>Move the selection to the first/last row and column</td></tr>
     *     <tr><td>Shift + Ctrl + Home/End</td><td>Extend the selection to include the first/last row and column</td></tr>
     *     <tr><td>Escape</td><td>Cancel current cell or row editing operation</td></tr>
     *     <tr><td>Tab</td><td>Move the selection to the next focusable element on the page (by default, can be overridden using the {@link keyActionTab} property)</td></tr>
     *     <tr><td>Enter</td><td>Exit editing mode and move the selection to the cell below the current one (by default, can be overridden using the {@link keyActionEnter} property)</td></tr>
     *     <tr><td>Delete, Backspace</td><td>Delete the currently selected rows (if the {@link allowDelete} property is set to true), or clear the content of the selected cells (if the values are not required).</td></tr>
     *     <tr><td>Control + C or Control + Insert</td><td>Copy the selection to the clipboard (if the {@link autoClipboard} property is set to true)</td></tr>
     *     <tr><td>Control + V or Shift + Insert</td><td>Paste the content of the clipboard into the selected area (if the {@link autoClipboard} property is set to true)</td></tr>
     *   </tbody>
     * </table>
     *
     * {@sample Grid/Overview/purejs Example}
     */
    class FlexGrid extends wijmo.Control {
        static _WJS_STICKY: string;
        static _WJS_MEASURE: string;
        static _WJS_UPDATING: string;
        static _WJS_WSPRE: string;
        static _MIN_VIRT_ROWS: number;
        static _defTypeWidth: {
            [wijmo.DataType.Number]: string;
        };
        _root: HTMLDivElement;
        _eTL: HTMLDivElement;
        _eTLCt: HTMLDivElement;
        _eCHdr: HTMLDivElement;
        _eCHdrCt: HTMLDivElement;
        _eRHdr: HTMLDivElement;
        _eRHdrCt: HTMLDivElement;
        _eCt: HTMLDivElement;
        _eBL: HTMLDivElement;
        _eBLCt: HTMLDivElement;
        _eCFtr: HTMLDivElement;
        _eCFtrCt: HTMLDivElement;
        _fCt: HTMLDivElement;
        _eFocus: HTMLDivElement;
        _activeCell: HTMLElement;
        _eSz: HTMLDivElement;
        _eMarquee: HTMLDivElement;
        private _gpTL;
        private _gpCHdr;
        private _gpRHdr;
        private _gpCells;
        private _gpBL;
        private _gpCFtr;
        private _maxOffsetY;
        private _heightBrowser;
        private _heightReal;
        _szClient: Size;
        _szClientSB: Size;
        _offsetY: number;
        _cssPage: number;
        _lastCount: number;
        _rcBounds: wijmo.Rect;
        _ptScrl: Point;
        _cellPadLeft: number;
        _cellPadHorz: number;
        _cellPadVert: number;
        _clipToScreen: boolean;
        _mouseHdl: _MouseHandler;
        _edtHdl: _EditHandler;
        _selHdl: _SelectionHandler;
        _addHdl: _AddNewHandler;
        _keyHdl: _KeyboardHandler;
        _grpHdl: _ColumnGroupHandler;
        _imeHdl: _ImeHandler;
        _mrgMgr: MergeManager;
        protected _autoGenCols: boolean;
        protected _autoClipboard: boolean;
        protected _xOnCopyPaste: boolean;
        protected _autoScroll: boolean;
        protected _autoSearch: boolean;
        protected _caseSensitive: boolean;
        protected _readOnly: boolean;
        protected _indent: number;
        protected _autoSizeMode: AutoSizeMode;
        protected _autoHeights: boolean;
        protected _quickSize: boolean;
        protected _hdrVis: HeadersVisibility;
        protected _alSorting: AllowSorting;
        protected _alPinning: AllowPinning;
        protected _alAddNew: boolean;
        protected _alDelete: boolean;
        protected _alResizing: AllowResizing;
        protected _alDragging: AllowDragging;
        protected _alMerging: AllowMerging;
        protected _ssHdr: HeadersVisibility;
        protected _shSort: boolean;
        protected _shGroups: boolean;
        protected _shMarquee: boolean;
        protected _shPlcHld: boolean;
        protected _altStep: number;
        protected _shErr: boolean;
        protected _hasValidation: boolean;
        protected _shDropDown: boolean;
        protected _tglDropDown: any;
        protected _valEdt: boolean;
        protected _gHdrFmt: string;
        protected _rows: RowCollection;
        protected _cols: ColumnCollection;
        protected _hdrRows: RowCollection;
        protected _ftrRows: RowCollection;
        protected _hdrCols: ColumnCollection;
        protected _cf: CellFactory;
        protected _itemFormatter: IItemFormatter;
        protected _items: any;
        protected _cv: wijmo.collections.ICollectionView;
        protected _childItemsPath: any;
        protected _rowHdrPath: wijmo.Binding;
        protected _sortRowIndex: number;
        protected _editColIndex: number;
        protected _deferResizing: boolean;
        protected _errorTip: wijmo.Tooltip;
        protected _pSel: boolean;
        protected _pOutline: boolean;
        protected _stickyHdr: boolean;
        protected _anchorCursor: boolean;
        protected _copyHeaders: HeadersVisibility;
        protected _bigChecks: boolean;
        private _bndSortConverter;
        private _afClip;
        private _afSticky;
        private _toErrorTips;
        private _toAutoHeights;
        private _forceScrollUpdate;
        private _scrollHandlerAttached;
        private _itemValidator;
        private _fzClone;
        private _vt;
        _vtRows: number;
        _vtCols: number;
        _lazyRender: boolean;
        _refreshOnEdit: boolean;
        _reorderCells: boolean;
        /**
         * Gets or sets the template used to instantiate {@link FlexGrid} controls.
         */
        static controlTemplate: string;
        /**
         * Initializes a new instance of the {@link FlexGrid} class.
         *
         * @param element The DOM element that hosts the control, or a CSS selector for the host element (e.g. '#theCtrl').
         * @param options JavaScript object containing initialization data for the control.
         */
        constructor(element: any, options?: any);
        _handleResize(): void;
        /**
         * Gets or sets a value that determines whether the row and column headers
         * are visible.
         *
         * The default value for this property is **HeadersVisibility.All**.
         */
        headersVisibility: HeadersVisibility;
        /**
         * Gets or sets a value that determines whether column headers should remain
         * visible when the user scrolls the document.
         *
         * The default value for this property is **false**.
         */
        stickyHeaders: boolean;
        /**
         * Gets or sets a value that determines whether the grid should preserve
         * the selected state of rows when the data is refreshed.
         *
         * The default value for this property is **true**.
         */
        preserveSelectedState: boolean;
        /**
         * Gets or sets a value that determines whether the grid should preserve
         * the expanded/collapsed state of nodes when the data is refreshed.
         *
         * The {@link preserveOutlineState} property implementation is based on
         * JavaScript's
         * <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" target="_blank">Map</a>
         * object, which is not available in IE 9 or 10.
         *
         * The default value for this property is **true**.
         */
        preserveOutlineState: boolean;
        /**
         * Gets or sets a value that determines whether extending selections
         * with the mouse or keyboard should change the start (cursor) or the
         * end of the current selection.
         *
         * The default value for this property is **false**, which causes
         * the grid to move the cursor and keep the selection end anchored.
         *
         * Setting this property to **true** causes the grid to move the
         * selection end and keep the cursor anchored. This is Excel's behavior.
        */
        anchorCursor: boolean;
        /**
         * Gets or sets a value that determines whether the grid should
         * include the content of header cells when copying data to the
         * clipboard.
         *
         * This property is especially useful in read-only grids, because
         * the header information typically should not be included when
         * pasting data into the grid.
         *
         * The default value for this property is **HeadersVisibility.None**
         * for the {@link FlexGrid} control and **HeadersVisibility.All**
         * for the **PivotGrid** control.
         */
        copyHeaders: HeadersVisibility;
        /**
         * Gets or sets a value that determines whether the grid should skip
         * rendering cells that were updated in the last render cycle.
         *
         * The default value for this property is **true**.
         */
        lazyRender: boolean;
        /**
         * Gets or sets a value that determines whether the grid should
         * refresh all cells after a cell is edited.
         *
         * The default value for this property is **true**.
         */
        refreshOnEdit: boolean;
        /**
         * Gets or sets the minimum number of rows and/or columns required to enable
         * virtualization.
         *
         * This property is set to zero by default, meaning virtualization is always
         * enabled. This improves binding performance and memory requirements, at the
         * expense of a small performance decrease while scrolling.
         *
         * If your grid has a small number of rows (about 50 to 100), you may be able to
         * improve scrolling performance by setting this property to a slightly higher
         * value (like 150). This will disable virtualization and will slow down binding,
         * but may improve perceived scroll performance. For example, the code below sets
         * causes the grid to virtualize cells when the data source has more than 150 items:
         *
         * ```typescript
         * // virtualize grid when there are more than 150 items
         * theGrid.virtualizationThreshold = 150;
         * ```
         *
         * Setting this property to values higher than 200 is not recommended. Loading
         * times will become too long; the grid will freeze for a few seconds while
         * creating cells for all rows, and the browser will become slow because of
         * the large number of elements on the page.
         *
         * If you want to set separate virtualization thresholds for rows and columns,
         * you may set the {@link virtualizationThreshold} property to an array with two
         * numbers. In this case, the first number will be used as the row threshold
         * and the second as the column threshold. For example, the code below sets
         * causes the grid to virtualize rows but not columns:
         *
         * ```typescript
         * // virtualize rows (threshold 0) but not columns (threshold 10,000)
         * theGrid.virtualizationThreshold = [0, 10000];
         * ```
         *
         * The default value for this property is **0**, which virtualizes all
         * rows and columns.
         */
        virtualizationThreshold: number | number[];
        /**
         * Gets or sets a value that determines whether the grid should generate
         * columns automatically based on the {@link itemsSource}.
         *
         * The column generation depends on the {@link itemsSource} property containing
         * at least one item. This data item is inspected and a column is created and
         * bound to each property that contains a primitive value (number, string,
         * Boolean, or Date).
         *
         * Properties set to null do not generate columns, because the grid would
         * have no way of guessing the appropriate type. In this type of scenario,
         * you should set the {@link autoGenerateColumns} property to false and create
         * the columns explicitly. For example:
         *
         * ```typescript
         * import { FlexGrid } from '@grapecity/wijmo.grid';
         * let grid = new FlexGrid('#theGrid', {
         *   autoGenerateColumns: false, // data items may contain null values
         *   columns: [                  // so define columns explicitly
         *     { binding: 'name', header: 'Name', dataType: 'String' },
         *     { binding: 'amount', header: 'Amount', dataType: 'Number' },
         *     { binding: 'date', header: 'Date', dataType: 'Date' },
         *     { binding: 'active', header: 'Active', dataType: 'Boolean' }
         *   ],
         *   itemsSource: customers
         * });
         * ```
         *
         * The default value for this property is **true** for the {@link FlexGrid}
         * control and **false** for the **PivotGrid** control.
         */
        autoGenerateColumns: boolean;
        /**
         * Gets or sets a value that determines whether the grid should handle
         * clipboard shortcuts.
         *
         * The clipboard shortcuts are as follows:
         *
         * <dl class="dl-horizontal">
         *   <dt>ctrl+C, ctrl+Ins</dt>    <dd>Copy grid selection to clipboard.</dd>
         *   <dt>ctrl+V, shift+Ins</dt>   <dd>Paste clipboard text to grid selection.</dd>
         * </dl>
         *
         * Only visible rows and columns are included in clipboard operations.
         *
         * Read-only cells are not affected by paste operations.
         *
         * The default value for this property is **true**.
         */
        autoClipboard: boolean;
        /**
         * Gets or sets a value that determines whether the grid should automatically
         * expand the selection to include cells in merged ranges when copying or pasting
         * content to/from the clipboard.
         *
         * The default value for this property is **true**.
         */
        expandSelectionOnCopyPaste: boolean;
        /**
         * Gets or sets a value that determines whether the grid should automatically
         * scroll its contents while users drag rows or columns into new positions.
         *
         * Row and column dragging are controlled by the {@link allowDragging} property.
         *
         * The default value for this property is **true**.
         */
        autoScroll: boolean;
        /**
         * Gets or sets a value that determines whether the grid should search for
         * cells as the users types into read-only cells.
         *
         * The search happens on the column that is currently selected, if it is
         * not editable. The search starts at the currently selected row and is
         * case-insensitive.
         *
         * See also the {@link caseSensitiveSearch} property.
         *
         * The default value for this property is **false**.
         */
        autoSearch: boolean;
        /**
         * Gets or sets a value that determines whether searches performed
         * while the user types should case-sensitive.
         *
         * See also the {@link autoSearch} property.
         *
         * The default value for this property is **false**.
         */
        caseSensitiveSearch: boolean;
        /**
         * Gets or sets a JSON string that defines the current column layout.
         *
         * The column layout string represents an array with the columns and their
         * properties. It can be used to persist column layouts defined by users so
         * they are preserved across sessions, and can also be used to implement undo/redo
         * functionality in applications that allow users to modify the column layout.
         *
         * The column layout string does not include **dataMap** properties because
         * data maps are not serializable.
         */
        columnLayout: string;
        /**
         * Gets or sets an array used to define hierarchical column groups.
         *
         * The items in the array should be JSON objects with properties of
         * {@link Column} objects, plus three optional members:
         *
         * * 'columns' array containing an array of child columns,
         * * 'collapseTo' string containing the binding of the child column
         *   that should remain visible when the group is collapsed.
         * * 'isCollapsed' boolean that determines if the group should be
         *   initially collapsed.
         *
         * For example, the code below generates a grid with two column groups,
         * both initially collapsed:
         *
         * ```typescript
         * new FlexGrid('#theGrid', {
         *     autoGenerateColumns: false,
         *     columnGroups: [
         *         { header: 'Group 1', align: 'center', collapseTo: 'country', isCollapsed: true, columns: [
         *             { binding: 'id', header: 'ID' },
         *             { binding: 'date', header: 'Date', dataType: 'Date' },
         *             { binding: 'country', header: 'Country', dataType: 'String' },
         *             { binding: 'active', header: 'Active', dataType: 'Boolean' },
         *         ]},
         *         { header: 'Group 2', align: 'center', collapseTo: 'sales', isCollapsed: true, columns: [
         *             { binding: 'sales', header: 'Sales', dataType: 'Number' },
         *             { binding: 'expenses', header: 'Expenses', dataType: 'Number' },
         *         ]}
         *     ],
         *     itemsSource: getData(20)
         * });
         * ```
         */
        columnGroups: any[];
        /**
         * Gets or sets a value that determines whether the user can modify
         * cell values using the mouse and keyboard.
         *
         * The default value for this property is **false** for the {@link FlexGrid}
         * control and **true** for the **PivotGrid** control.
         */
        isReadOnly: boolean;
        /**
         * Gets or sets a value that determines whether the checkboxes used to edit
         * boolean columns should extend to cover the whole cell width.
         *
         * Big checkboxes are easier to toggle with the mouse, since the user may
         * click anywhere in the cell to toggle them.
         *
         * The default value for this property is **false**.
         */
        bigCheckboxes: boolean;
        /**
         * Gets or sets a value that determines whether the control is disabled.
         *
         * Disabled controls cannot get mouse or keyboard events.
         */
        isDisabled: boolean;
        /**
         * Gets or sets a value that determines whether the grid should support
         * Input Method Editors (IME) while not in edit mode.
         *
         * This property is relevant only for sites/applications in Japanese,
         * Chinese, Korean, and other languages that require IME support.
         *
         * The default value for this property is **false**.
         */
        imeEnabled: boolean;
        /**
         * Gets or sets a value that determines whether users may resize
         * rows and/or columns with the mouse.
         *
         * If resizing is enabled, users can resize columns by dragging
         * the right edge of column header cells, or rows by dragging the
         * bottom edge of row header cells.
         *
         * Users may also double-click the edge of the header cells to
         * automatically resize rows and columns to fit their content.
         * The auto-size behavior can be customized using the {@link autoSizeMode}
         * property.
         *
         * The default value for this property is **AllowResizing.Columns**.
         */
        allowResizing: AllowResizing;
        /**
         * Gets or sets a value that determines whether row and column resizing
         * should be deferred until the user releases the mouse button.
         *
         * By default, {@link deferResizing} is set to false, causing rows and columns
         * to be resized as the user drags the mouse. Setting this property to true
         * causes the grid to show a resizing marker and to resize the row or column
         * only when the user releases the mouse button.
         *
         * The default value for this property is **false** for the {@link FlexGrid} control
         * and **true** for the **PivotGrid** control.
         */
        deferResizing: boolean;
        /**
         * Gets or sets which cells should be taken into account when auto-sizing a
         * row or column.
         *
         * This property controls what happens when users double-click the edge of
         * a column header.
         *
         * By default, the grid will automatically set the column width based on the
         * content of the header and data cells in the column. This property allows
         * you to change that to include only the headers or only the data.
         *
         * The default value for this property is **AutoSizeMode.Both**.
         */
        autoSizeMode: AutoSizeMode;
        /**
         * Gets or sets a value that determines whether the grid should automatically
         * resize the rows when the data or grid layout change.
         *
         * This property is especially useful when the grid has columns configured
         * to word-wrap their content (see {@link Column.wordWrap}), and when the grid
         * has a relatively small number of rows (auto-sizing is an expensive operation).
         *
         * The default value for this property is **false**.
         */
        autoRowHeights: boolean;
        /**
         * Gets or sets a value that determines whether the grid should optimize
         * performance over precision when auto-sizing columns.
         *
         * Setting this property to false disables quick auto-sizing. Setting
         * it to true enables the feature, subject to the value of each column's
         * {@link wijmo.grid.Column.quickAutoSize} property. Setting it to null
         * (the default value) enables the feature for grids that don't have a
         * custom {@link itemFormatter} or handlers attached to the {@link formatItem}
         * event.
         *
         * Quick auto-sizing uses different strategies when auto-sizing rows or
         * columns.
         *
         * When auto-sizing columns, it uses a temporary canvas element to locate
         * the row with the widest entry for a column. When the row is located, its
         * contents are measured precisely. The limitation with this approach is
         * that the canvas only renders plain text, so if cells contain HTML the
         * auto-sizing may miss the widest column.
         *
         * When auto-sizing rows, it uses a cache to store the row heights based
         * on the cell content, and skips measuring numeric cells. The limitation
         * with this approach is that it only improves performance if many cells
         * have the same content, or if many columns are numeric.
         *
         * If you find that auto-sizing is slowing down your application, it is
         * probably worth setting {@link quickAutoSize} to true and checking the
         * results to see if it works correctly and improves performance for your
         * app.
         */
        quickAutoSize: boolean;
        _getQuickAutoSize(): boolean;
        /**
         * Gets or sets a value that determines whether users are allowed to sort columns
         * by clicking the column header cells.
         *
         * The default value for this property is **AllowSorting.SingleColumn**.
         */
        allowSorting: AllowSorting;
        /**
         * Gets or sets a value that determines whether the grid should add pin
         * buttons to the column headers and how the pin buttons behave.
         *
         * The pin buttons allow users to pin (freeze) columns so they remain
         * in view as the user scrolls the grid horizontally.
         *
         * The default value for this property is **AllowPinning.None**.
         */
        allowPinning: AllowPinning | boolean;
        /**
         * Gets or sets a value that indicates whether the grid should provide a new row
         * template so users can add items to the source collection.
         *
         * The new row template will not be displayed if the {@link isReadOnly} property
         * is set to true.
         *
         * The default value for this property is **false**.
         */
        allowAddNew: boolean;
        /**
         * Gets or sets a value that indicates whether the new row template should be
         * located at the top of the grid or at the bottom.
         *
         * If you set the {@link newRowAtTop} property to true, and you want the new
         * row template to remain visible at all times, set the {@link frozenRows}
         * property to one. This will freeze the new row template at the top so
         * it won't scroll off the view.
         *
         * The new row template will be displayed only if the {@link allowAddNew} property
         * is set to true and if the {@link itemsSource} object supports adding new items.
         *
         * The default value for this property is **false**.
         */
        newRowAtTop: boolean;
        /**
         * Gets or sets a value that indicates whether the grid should delete
         * selected rows when the user presses the Delete key.
         *
         * Selected rows will not be deleted if the {@link isReadOnly} property
         * is set to true.
         *
         * The default value for this property is **false**.
         */
        allowDelete: boolean;
        /**
         * Gets or sets which parts of the grid provide cell merging.
         *
         * The default value for this property is **AllowMerging.None**
         * for the {@link FlexGrid} control and **AllowMerging.All**
         * for the **PivotGrid** control.
         *
         * This property does not apply to the **MultiRow** control.
         */
        allowMerging: AllowMerging;
        /**
         * Gets or sets a value that indicates whether the grid should
         * add class names to indicate selected header cells.
         *
         * The default value for this property is **HeadersVisibility.None**.
         */
        showSelectedHeaders: HeadersVisibility;
        /**
         * Gets or sets a value that indicates whether the grid should
         * display an Excel-style marquee around the current selection.
         *
         * The default value for this property is **false**.
         *
         * If you choose to show the marquee, you may want to improve
         * accessibility by using some simple CSS to make the marquee
         * fully opaque only when the grid has the focus:
         *
         * ```css
         * .wj-flexgrid:not(.wj-state-focused) .wj-marquee {
         *     opacity: 0.2;
         * }
         * ```
         */
        showMarquee: boolean;
        /**
         * Gets or sets a value that determines whether the grid should
         * use the column headers as placeholders when editing cells.
         *
         * The default value for this property is **false**.
         *
         * This property is especially useful in grids that have multiple
         * rows per data item (like the {@link MultiRow} grid) and in
         * grids that allow adding new items (see the {@link allowAddNew}
         * property).
         *
         * This property only works with the grid's built-in editor.
         * If you are using custom editors (see the {@link Column.editor}
         * property), then you are responsible for setting the placeholder
         * property on those.
         *
         * The Internet Explorer browser does not show input placeholders
         * on focused input elements, so this property is not useful in
         * IE.
         */
        showPlaceholders: boolean;
        /**
         * Gets or sets a value that determines whether the grid should display
         * sort indicators in the column headers.
         *
         * Sorting is controlled by the {@link ICollectionView.sortDescriptions}
         * property of the {@link ICollectionView} object used as a the grid's
         * {@link itemsSource}.
         *
         * The default value for this property is **true**.
         */
        showSort: boolean;
        /**
         * Gets or sets a value that determines whether the {@link FlexGrid} should insert
         * group rows to delimit data groups.
         *
         * Data groups are created by modifying the {@link ICollectionView.groupDescriptions}
         * property of the {@link ICollectionView} object used as an {@link itemsSource}.
         *
         * The default value for this property is **true**.
         */
        showGroups: boolean;
        /**
         * Gets or sets a value that determines the number of regular rows
         * between 'alternating' rows.
         *
         * The default value for this property is **1** for the {@link FlexGrid}.
         * Set it to zero to disable alternating rows, or to a number greater than
         * one to insert multiple regular rows between alternating rows.
         *
         * The default value for this property is **1** for the {@link FlexGrid}
         * control and **0** for the **PivotGrid** control.
         */
        alternatingRowStep: number;
        showAlternatingRows: boolean;
        /**
         * Gets or sets a value that determines whether the grid should add the
         * 'wj-state-invalid' class to cells that contain validation errors and
         * tooltips with error descriptions.
         *
         * The grid detects validation errors using the {@link itemValidator}
         * property and the {@link CollectionView.getError} property on the grid's
         * {@link itemsSource}.
         *
         * The default value for this property is **true**.
         */
        showErrors: boolean;
        /**
         * Gets or sets the {@link Tooltip} object used to show validation
         * errors detected by the grid when the {@link showErrors} property
         * is set to true.
         *
         * By default, this property is set to a tooltip with zero show delay
         * (so it appears immediately when hovering over invalid cells),
         * no HTML content, and a "wj-error-tip" class which can be used to
         * customize the tooltip's appearance.
         *
         * Setting this property to null causes the control to use the cell's
         * "title" attribute to show validation errors.
         */
        errorTip: wijmo.Tooltip;
        /**
         * Gets or sets a validator function to determine whether cells contain
         * valid data.
         *
         * If specified, the validator function should take parameters containing
         * the cell's row and column indices and a parsing parameter that describes
         * whether the data has already been parsed and applied to the data item
         * (parsing == false), or whether the user was trying to edit the value and
         * entered a value that could not be parsed into the data type expected
         * (parsing == true).
         *
         * The method returns a string containing an error message, or null if no
         * errors were detected.
         *
         * For example,
         *
         * ```typescript
         * grid.itemValidator = (row: number, col: number, parsing: boolean) => {
         *     let item = grid.rows[row].dataItem,
         *         prop = grid.columns[col].binding;
         *
         *     // parsing failed, show message
         *     if (parsing) {
         *         if (prop == 'date') {
         *             return 'Please enter a valid date in the format "MM/dd/yyyy"';
         *         } else if (prop == 'id') {
         *             return 'Please enter a positive number';
         *         }
         *     }
         *
         *     // check that stored (parsed) data is valid
         *     if (prop == 'date' && item.date < minDate) {
         *         return 'Please enter a date after ' + Globalize.formatDate(minDate, 'd');
         *     } else if (prop == 'id' && item.id < 0) {
         *         return 'Please enter a positive number';
         *     }
         * });
         * ```
         *
         * See also the {@link CollectionView.getError} method.
         */
        itemValidator: IItemValidator;
        /**
         * Gets or sets a value that determines whether the grid should remain
         * in edit mode when the user tries to commit edits that fail validation.
         *
         * The grid detects validation errors by calling the {@link CollectionView.getError}
         * method on the grid's {@link itemsSource}.
         *
         * The default value for this property is **true**.
         */
        validateEdits: boolean;
        /**
         * Gets or sets the format string used to create the group header content.
         *
         * The string may contain any text, plus the following replacement strings:
         * <ul>
         *   <li><b>{name}</b>: The name of the property being grouped on.</li>
         *   <li><b>{value}</b>: The value of the property being grouped on.</li>
         *   <li><b>{level}</b>: The group level.</li>
         *   <li><b>{count}</b>: The total number of items in this group.</li>
         * </ul>
         *
         * If a column is bound to the grouping property, the column header is used
         * to replace the <code>{name}</code> parameter, and the column's format and
         * data maps are used to calculate the <code>{value}</code> parameter.
         * If no column is available, the group information is used instead.
         *
         * You may add invisible columns bound to the group properties in order to
         * customize the formatting of the group header cells.
         *
         * The default value for this property is<br/>
         * <code>'{name}: &lt;b&gt;{value}&lt;/b&gt;({count:n0} items)'</code>,
         * which creates group headers similar to<br/>
         * <code>'Country: <b>UK</b> (12 items)'</code> or<br/>
         * <code>'Country: <b>Japan</b> (8 items)'</code>.
         */
        groupHeaderFormat: string;
        /**
         * Gets or sets a value that determines whether users are allowed to drag
         * rows and/or columns with the mouse.
         *
         * If the {@link autoScroll} property is set to true, the grid will automatically
         * scroll its contents while the user drags rows or columns into new positions.
         *
         * The grid allows dragging columns by default.
         *
         * Dragging rows requires special considerations in bound scenarios.
         *
         * When you drag rows on bound grids, the rows will get out of sync with the
         * data source (row 4 may refer to item 6 for example).
         * To avoid this, you should handle the {@link draggedRow} event and
         * synchronize the data with the new row positions.
         *
         * Also, remember to set the {@link allowSorting} property to false or you
         * the row order will be determined by the data, and dragging rows will be
         * pointless.
         *
         * This fiddle demonstrates row dragging with a bound grid:
         * <a href="https://jsfiddle.net/Wijmo5/kyg0qsda/" target="_blank">Bound Row Dragging</a>.
         *
         * The default value for this property is **AllowDragging.Columns**
         * for the {@link FlexGrid} control and **AllowDragging.None**
         * for the **PivotGrid** control.
         *
         * This property does not apply to the **MultiRow** control.
         */
        allowDragging: AllowDragging;
        /**
         * Gets or sets the array or {@link ICollectionView} that contains items
         * shown on the grid.
         */
        itemsSource: any;
        /**
         * Gets the {@link ICollectionView} that contains the grid data.
         *
         * If the {@link itemsSource} property was set to an {@link ICollectionView},
         * this property returns that value.
         *
         * If the {@link itemsSource} property was set to an array of data items,
         * this property returns the internal {@link CollectionView} created
         * by the grid to support currency, editing, and sorting.
         */
        readonly collectionView: wijmo.collections.ICollectionView;
        /**
         * Gets the {@link IEditableCollectionView} that contains the grid data.
         */
        readonly editableCollectionView: wijmo.collections.IEditableCollectionView;
        /**
         * Gets or sets the name of the property (or properties) used to generate
         * child rows in hierarchical grids.
         *
         * Set this property to a string to specify the name of the property that
         * contains an item's child items
         * (e.g. <code>childItemsPath = 'items';</code>).
         *
         * If items at different levels have child items with different names,
         * set this property to an array containing the names of the properties
         * that contain child items et each level
         * (e.g. <code>childItemsPath = ['checks','earnings'];</code>).
         *
         * {@sample Grid/TreeGrid/ChildItems/purejs Example}
         *
         * This property does not apply to the **MultiRow** control.
         */
        childItemsPath: string | string[];
        /**
         * Gets or sets the name of the property used to create row header
         * cells.
         *
         * Row header cells are not visible or selectable. They are meant
         * for use with accessibility tools.
         */
        rowHeaderPath: string;
        /**
         * Gets the {@link GridPanel} that contains the data cells.
         */
        readonly cells: GridPanel;
        /**
         * Gets the {@link GridPanel} that contains the column header cells.
         */
        readonly columnHeaders: GridPanel;
        /**
         * Gets the {@link GridPanel} that contains the column footer cells.
         *
         * The {@link columnFooters} panel appears below the grid cells, to the
         * right of the {@link bottomLeftCells} panel. It can be used to display
         * summary information below the grid data.
         *
         * The example below shows how you can add a row to the {@link columnFooters}
         * panel to display summary data for columns that have the
         * {@link Column.aggregate} property set:
         *
         * ```typescript
         * function addFooterRow(flex) {
         *
         *   // create a GroupRow to show aggregates
         *   let row = new wijmo.grid.GroupRow();
         *
         *   // add the row to the column footer panel
         *   flex.columnFooters.rows.push(row);
         *
         *   // show a sigma on the header
         *   flex.bottomLeftCells.setCellData(0, 0, '\u03A3');
         * }
         * ```
         */
        readonly columnFooters: GridPanel;
        /**
         * Gets the {@link GridPanel} that contains the row header cells.
         */
        readonly rowHeaders: GridPanel;
        /**
         * Gets the {@link GridPanel} that contains the top left cells
         * (to the left of the column headers).
         */
        readonly topLeftCells: GridPanel;
        /**
         * Gets the {@link GridPanel} that contains the bottom left cells.
         *
         * The {@link bottomLeftCells} panel appears below the row headers, to the
         * left of the {@link columnFooters} panel.
         */
        readonly bottomLeftCells: GridPanel;
        /**
         * Gets the grid's row collection.
         */
        readonly rows: RowCollection;
        /**
         * Gets the grid's column collection.
         */
        readonly columns: ColumnCollection;
        /**
         * Gets a column by name or by binding.
         *
         * The method searches the column by name. If a column with the given name
         * is not found, it searches by binding. The searches are case-sensitive.
         *
         * @param name The column name, binding, or index.
         * @return The column with the specified name or binding, or null if not found.
         */
        getColumn(name: string | number): Column;
        /**
         * Gets or sets the number of frozen rows.
         *
         * Frozen rows do not scroll vertically, but the cells they contain
         * may be selected and edited.
         *
         * The default value for this property is **0**.
         */
        frozenRows: number;
        /**
         * Gets or sets the number of frozen columns.
         *
         * Frozen columns do not scroll horizontally, but the cells they contain
         * may be selected and edited.
         *
         * The default value for this property is **0**.
         */
        frozenColumns: number;
        /**
         * Gets or sets a value that determines whether the FlexGrid should
         * clone frozen cells and show then in a separate element to reduce
         * flicker while scrolling.
         *
         * The default value for this property is **null**, which causes
         * the grid to select the best setting depending on the browser.
         */
        cloneFrozenCells: boolean;
        /**
         * Gets or sets the index of row in the column header panel that
         * shows and changes the current sort.
         *
         * The default value for this property is **null**,
         * which causes the bottom row in the {@link columnHeaders}
         * panel to act as the sort row.
         */
        sortRowIndex: number;
        /**
         * Gets or sets the index of column in the row header panel that
         * shows whether items are being edited.
         *
         * The default value for this property is **null**, which causes
         * the grid to show the edit glyph on the last column of the
         * {@link rowHeaders} panel.
         */
        editColumnIndex: number;
        /**
         * Gets or sets a {@link Point} that represents the value of the grid's scrollbars.
         */
        scrollPosition: wijmo.Point;
        /**
         * Gets the client size of the control (control size minus headers and scrollbars).
         */
        readonly clientSize: wijmo.Size;
        /**
         * Gets the bounding rectangle of the control in page coordinates.
         */
        readonly controlRect: wijmo.Rect;
        /**
         * Gets the size of the grid content in pixels.
         */
        readonly scrollSize: wijmo.Size;
        /**
         * Gets the range of cells currently in view.
         */
        readonly viewRange: CellRange;
        /**
         * Gets or sets the {@link CellFactory} that creates and updates cells for this grid.
         */
        cellFactory: CellFactory;
        /**
         * Gets or sets a formatter function used to customize cells on this grid.
         *
         * The formatter function can add any content to any cell. It provides
         * complete flexibility over the appearance and behavior of grid cells.
         *
         * If specified, the function should take four parameters: the {@link GridPanel}
         * that contains the cell, the row and column indices of the cell, and the
         * HTML element that represents the cell. The function will typically change
         * the **innerHTML** property of the cell element.
         *
         * For example:
         * ```typescript
         * flex.itemFormatter = (panel, r, c, cell) => {
         *   if (panel.cellType == CellType.Cell) {
         *
         *     // draw sparklines in the cell
         *     let col = panel.columns[c];
         *     if (col.name == 'sparklines') {
         *       cell.innerHTML = getSparkline(panel, r, c);
         *     }
         *   }
         * }
         * ```
         *
         * Note that the FlexGrid recycles cells, so if your {@link itemFormatter}
         * modifies the cell's style attributes, you must make sure that it resets
         * these attributes for cells that should not have them. For example:
         * ```typescript
         * flex.itemFormatter = (panel, r, c, cell) => {
         *
         *   // reset attributes we are about to customize
         *   let s = cell.style;
         *   s.color = '';
         *   s.backgroundColor = '';
         *   // customize color and backgroundColor attributes for this cell
         *   ...
         * }
         * ```
         *
         * If you have a scenario where multiple clients may want to customize the
         * grid rendering (for example when creating directives or re-usable libraries),
         * consider using the {@link formatItem} event instead. The event allows multiple
         * clients to attach their own handlers.
         */
        itemFormatter: IItemFormatter;
        /**
         * Gets a value that indicates whether a given cell can be edited.
         *
         * @param r Index of the row that contains the cell.
         * @param c Index of the column that contains the cell.
         */
        canEditCell(r: number, c: number): boolean;
        /**
         * Gets the value stored in a cell in the scrollable area of the grid.
         *
         * @param r Index of the row that contains the cell.
         * @param c Index, name, or binding of the column that contains the cell.
         * @param formatted Whether to format the value for display.
         */
        getCellData(r: number, c: number | string, formatted: boolean): any;
        /**
         * Gets a the bounds of a cell element in viewport coordinates.
         *
         * This method returns the bounds of cells in the {@link cells}
         * panel (scrollable data cells). To get the bounds of cells
         * in other panels, use the {@link getCellBoundingRect} method
         * in the appropriate {@link GridPanel} object.
         *
         * The returned value is a {@link Rect} object which contains the
         * position and dimensions of the cell in viewport coordinates.
         * The viewport coordinates are the same used by the
         * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect">getBoundingClientRect</a>
         * method.
         *
         * @param r Index of the row that contains the cell.
         * @param c Index of the column that contains the cell.
         * @param raw Whether to return the rectangle in raw panel coordinates
         * as opposed to viewport coordinates.
         */
        getCellBoundingRect(r: number, c: number, raw?: boolean): wijmo.Rect;
        /**
         * Sets the value of a cell in the scrollable area of the grid.
         *
         * @param r Index of the row that contains the cell.
         * @param c Index, name, or binding of the column that contains the cell.
         * @param value Value to store in the cell.
         * @param coerce Whether to change the value automatically to match the column's data type.
         * @param invalidate Whether to invalidate the grid to show the change.
         * @return True if the value was stored successfully, false otherwise.
         */
        setCellData(r: number, c: string | number, value: any, coerce?: boolean, invalidate?: boolean): boolean;
        /**
         * Gets a {@link wijmo.grid.HitTestInfo} object with information about a given point.
         *
         * For example:
         *
         * ```typescript
         * // hit test a point when the user clicks on the grid
         * flex.hostElement.addEventListener('click', (e) => {
         *   let ht = flex.hitTest(e.pageX, e.pageY);
         *   console.log('you clicked a cell of type "' +
         *     wijmo.grid.CellType[ht.cellType] + '".');
         * });
         * ```
         *
         * @param pt {@link Point} to investigate, in page coordinates, or a MouseEvent object, or x coordinate of the point.
         * @param y Y coordinate of the point in page coordinates (if the first parameter is a number).
         * @return A {@link wijmo.grid.HitTestInfo} object with information about the point.
         */
        hitTest(pt: number | wijmo.Point | MouseEvent | HTMLElement, y?: number | boolean): HitTestInfo;
        /**
         * Gets the content of a {@link CellRange} as a string suitable for
         * copying to the clipboard or exporting to CSV (comma-separated values)
         * files.
         *
         * Hidden rows and columns are not included in the clip string.
         *
         * @param rng {@link CellRange} to copy. If omitted, the current selection is used.
         * @param options A boolean value that specifies the clip string should be a CSV string
         * or a {@link ClipStringOptions} value that specifies options for the clip string.
         * @param colHeaders Whether to include the column headers.
         * @param rowHeaders Whether to include the row headers.
         *
         * To export the current selection, set the **rng** parameter to null.
         * This will include not only the primary selection but also extended
         * selections such as selected rows (in {@link SelectionMode.ListBox} mode)
         * and multiple selected ranges (in {@link SelectionMode.MultiRange} mode).
         *
         * Note that multiple selected ranges are included only if all selected ranges
         * refer to the same column range or row range.
         */
        getClipString(rng?: CellRange, options?: boolean | ClipStringOptions, colHeaders?: boolean, rowHeaders?: boolean): string;
        /**
         * Parses a string into rows and columns and applies the content to a given range.
         *
         * Hidden rows and columns are skipped.
         *
         * @param text Tab and newline delimited text to parse into the grid.
         * @param rng {@link CellRange} to copy. If omitted, the current selection is used.
         */
        setClipString(text: string, rng?: CellRange): void;
        /**
         * Overridden to set the focus to the grid without scrolling the  whole grid
         * into view.
         *
         * @param force Whether to perform the focus operation even if the grid
         * already contains the focus.
         */
        focus(force?: boolean): void;
        /**
         * Disposes of the control by removing its association with the host element.
         */
        dispose(): void;
        /**
         * Refreshes the grid display.
         *
         * @param fullUpdate Whether to update the grid layout and content, or just the content.
         */
        refresh(fullUpdate?: boolean): void;
        /**
         * Refreshes the grid display.
         *
         * @param fullUpdate Whether to update the grid layout and content, or just the content.
         * @param recycle Whether to recycle existing elements.
         * @param state Whether to keep existing elements and update their state.
         */
        refreshCells(fullUpdate: boolean, recycle?: boolean, state?: boolean): void;
        /**
         * Refreshes the cells in a range, updating their content and styles.
         *
         * Unlike the {@link refreshCells} method, which updates all the cells,
         * {@link refreshRange} allows you to specify which cells should be
         * refreshed, which in some cases can improve performance.
         *
         * @param rng {@link CellRange} to be refreshed.
         */
        refreshRange(rng: CellRange): void;
        /**
         * Resizes a column to fit its content.
         *
         * This method only works if the grid is visible. If its host element
         * has not been added to the DOM, or if any of the grid's ancestor
         * elements is hidden, the grid will not be able to measure the cells
         * and therefore will not be able to auto-size the columns.
         *
         * @param c Index of the column to resize.
         * @param header Whether the column index refers to a regular or a header row.
         * @param extra Extra spacing, in pixels.
         */
        autoSizeColumn(c: number, header?: boolean, extra?: number): void;
        /**
         * Resizes a range of columns to fit their content.
         *
         * The grid will always measure all rows in the current view range, plus up
         * to 2,000 rows not currently in view. If the grid contains a large amount
         * of data (say 50,000 rows),  then not all rows will be measured since that
         * could take a long time.
         *
         * This method only works if the grid is visible. If its host element has not
         * been added to the DOM, or if any of the grid's ancestor elements is hidden,
         * the grid will not be able to measure the cells and therefore will not be
         * able to auto-size the columns.
         *
         * @param firstColumn Index of the first column to resize (defaults to the first column).
         * @param lastColumn Index of the last column to resize (defaults to the last column).
         * @param header Whether the column indices refer to regular or header columns.
         * @param extra Extra spacing, in pixels.
         */
        autoSizeColumns(firstColumn?: number, lastColumn?: number, header?: boolean, extra?: number): void;
        /**
         * Resizes a row to fit its content.
         *
         * This method only works if the grid is visible. If its host element
         * has not been added to the DOM, or if any of the grid's ancestor
         * elements are hidden, the grid will not be able to measure the cells
         * and therefore will not be able to auto-size the rows.
         *
         * @param r Index of the row to resize.
         * @param header Whether the row index refers to a regular or a header row.
         * @param extra Extra spacing, in pixels.
         */
        autoSizeRow(r: number, header?: boolean, extra?: number): void;
        /**
         * Resizes a range of rows to fit their content.
         *
         * This method only works if the grid is visible. If its host element
         * has not been added to the DOM, or if any of the grid's ancestor
         * elements is hidden, the grid will not be able to measure the cells
         * and therefore will not be able to auto-size the rows.
         *
         * @param firstRow Index of the first row to resize.
         * @param lastRow Index of the last row to resize.
         * @param header Whether the row indices refer to regular or header rows.
         * @param extra Extra spacing, in pixels.
         */
        autoSizeRows(firstRow?: number, lastRow?: number, header?: boolean, extra?: number): void;
        /**
         * Gets or sets the indent used to offset row groups of different levels.
         *
         * The default value for this property is **14** pixels for the
         * {@link FlexGrid} control, and **32** pixels for the **PivotGrid**.
         */
        treeIndent: number;
        /**
         * Collapses all the group rows to a given level.
         *
         * @param level Maximum group level to show.
         */
        collapseGroupsToLevel(level: number): void;
        /**
         * Gets or sets the current selection mode.
         */
        selectionMode: SelectionMode;
        /**
         * Gets or sets the current selection.
         */
        selection: CellRange;
        /**
         * Selects a cell range and optionally scrolls it into view.
         *
         * The {@link select} method can be called by passing a {@link CellRange} and
         * an optional boolean parameter that indicates whether the new selection
         * should be scrolled into view. For example:
         *
         * ```typescript
         * // select cell 1,1 and scroll it into view
         * grid.select(new CellRange(1, 1), true);
         *
         * // select range (1,1)-(2,4) and do not scroll it into view
         * grid.select(new CellRange(1, 1, 2, 4), false);
         * ```
         *
         * You can also call the {@link select} method passing the index or the
         * row and column you want to select. In this case, the new selection
         * always scrolls into view. For example:
         *
         * ```typescript
         * // select cell 1,1 and scroll it into view
         * grid.select(1, 1);
         * ```
         *
         * @param rng Range to select (or index of the row to select).
         * @param show Whether to scroll the new selection into view (or index of the column to select).
         * @return True if the new selection was applied.
         */
        select(rng: (CellRange | number), show?: (boolean | number)): boolean;
        /**
         * Selects all the cells on the grid.
         */
        selectAll(): boolean;
        /**
         * Gets a {@link SelectedState} value that indicates the selected state of a cell.
         *
         * @param r Row index of the cell to inspect.
         * @param c Column index of the cell to inspect.
         */
        getSelectedState(r: number, c: number): SelectedState;
        /**
         * Gets or sets an array containing the rows that are currently selected.
         *
         * Note: this property can be read in all selection modes, but it can be
         * set only when {@link selectionMode} is set to **SelectionMode.ListBox**.
         */
        selectedRows: Row[];
        /**
         * Gets or sets an array containing the data items that are currently selected.
         *
         * Note: this property can be read in all selection modes, but it can be
         * set only when {@link selectionMode} is set to **SelectionMode.ListBox**.
         */
        selectedItems: any[];
        /**
         * Gets or sets an array with {@link CellRange} objects that represent
         * the current selection.
         *
         * The first element in the array is the current {@link selection}.
         * If the grid's {@link selectionMode} property is set to
         * {@link SelectionMode.MultiRange}, the array may contain additional
         * ranges that represent the extended selection.
         *
         * Note that ranges in the {@link selectedRanges} array may contain
         * overlapping areas, which may be important when performing actions
         * like aggregating over the extended selection.
         */
        selectedRanges: CellRange[];
        /**
         * Scrolls the grid to bring a specific cell into view.
         *
         * Negative row and column indices are ignored, so if you call
         *
         * ```typescript
         * grid.scrollIntoView(200, -1);
         * ```
         *
         * The grid will scroll vertically to show row 200, and will not
         * scroll horizontally.
         *
         * @param r Index of the row to scroll into view.
         * @param c Index of the column to scroll into view.
         * @param refresh Optional parameter that determines whether the grid
         * should refresh to show the new scroll position immediately.
         * @return True if the grid scrolled.
         */
        scrollIntoView(r: number, c: number, refresh?: boolean): boolean;
        /**
         * Checks whether a given CellRange is valid for this grid's row and column collections.
         *
         * @param rng Range to check.
         */
        isRangeValid(rng: CellRange): boolean;
        /**
         * Starts editing a given cell.
         *
         * Editing in the {@link FlexGrid} is similar to editing in Excel:
         * Pressing F2 or double-clicking a cell puts the grid in **full-edit** mode.
         * In this mode, the cell editor remains active until the user presses Enter, Tab,
         * or Escape, or until he moves the selection with the mouse. In full-edit mode,
         * pressing the cursor keys does not cause the grid to exit edit mode.
         *
         * Typing text directly into a cell puts the grid in **quick-edit mode**.
         * In this mode, the cell editor remains active until the user presses Enter,
         * Tab, or Escape, or any arrow keys.
         *
         * Full-edit mode is normally used to make changes to existing values.
         * Quick-edit mode is normally used for entering new data quickly.
         *
         * While editing, the user can toggle between full and quick modes by
         * pressing the F2 key.
         *
         * @param fullEdit Whether to stay in edit mode when the user presses the cursor keys. Defaults to true.
         * @param r Index of the row to be edited. Defaults to the currently selected row.
         * @param c Index of the column to be edited. Defaults to the currently selected column.
         * @param focus Whether to give the editor the focus when editing starts. Defaults to true.
         * @param evt Event that triggered this action (usually a keypress or keydown).
         * @return True if the edit operation started successfully.
         */
        startEditing(fullEdit?: boolean, r?: number, c?: number, focus?: boolean, evt?: any): boolean;
        /**
         * Commits any pending edits and exits edit mode.
         *
         * @param cancel Whether pending edits should be canceled or committed.
         * @return True if the edit operation finished successfully.
         */
        finishEditing(cancel?: boolean): boolean;
        /**
         * Gets the **HTMLElement** that represents the currently active cell element.
         *
         * If no cell is currently selected, or if the selected cell is not currently
         * within view, this property returns null.
         */
        readonly activeCell: HTMLElement;
        /**
         * Gets the **HTMLInputElement** that represents the currently active cell editor.
         *
         * If no cell is currently being edited, this property returns null.
         */
        readonly activeEditor: HTMLInputElement;
        /**
         * Gets a {@link CellRange} that identifies the cell currently being edited.
         */
        readonly editRange: CellRange;
        /**
         * Gets or sets the {@link MergeManager} object responsible for determining how cells
         * should be merged.
         */
        mergeManager: MergeManager;
        /**
         * Gets a {@link CellRange} that specifies the merged extent of a cell
         * in a {@link GridPanel}.
         *
         * @param p The {@link GridPanel} that contains the range.
         * @param r Index of the row that contains the cell.
         * @param c Index of the column that contains the cell.
         * @param clip Whether to clip the merged range to the grid's current view range.
         * @return A {@link CellRange} that specifies the merged range, or null if the cell is not merged.
         */
        getMergedRange(p: GridPanel, r: number, c: number, clip?: boolean): CellRange;
        /**
         * Gets or sets the action to perform when the TAB key is pressed.
         *
         * The default setting for this property is {@link KeyAction.None},
         * which causes the browser to select the next or previous controls
         * on the page when the TAB key is pressed. This is the recommended
         * setting to improve page accessibility.
         *
         * In previous versions, the default was set to {@link KeyAction.Cycle},
         * which caused the control to move the selection across and down
         * the grid. This is the standard Excel behavior, but is not good
         * for accessibility.
         *
         * There is also a {@link KeyAction.CycleOut} setting that causes the
         * selection to move through the cells (as {@link KeyAction.Cycle}),
         * and then on to the next/previous control on the page when the
         * last or first cells are selected.
         */
        keyActionTab: KeyAction;
        /**
         * Gets or sets the action to perform when the ENTER key is pressed.
         *
         * The default setting for this property is {@link KeyAction.MoveDown},
         * which causes the control to move the selection to the next row.
         * This is the standard Excel behavior.
         */
        keyActionEnter: KeyAction;
        /**
         * Gets or sets a value that determines whether the grid should keep
         * whitespace in cells as they appear in the data
         * <code>(white-space: pre)</code> or whether it should collapse the
         * whitespace into a single space character
         * <code>(white-space: normal)</code>.
         *
         * This property allows you to specify how the grid should handle
         * white space without changing any CSS rules. You choose to use
         * CSS rules instead, however, since they provide better control
         * over scope.
         *
         * For example, you could create CSS rules that apply to all grids
         * in the application, to specific grids, or to specific columns.
         *
         * Be aware that setting this property to **true** may have
         * undesired effects in applications that use interop cell templates
         * (Vue templates especially).
         *
         * The default value for this property is **false**.
         */
        preserveWhiteSpace: boolean;
        /**
         * Gets or sets a value that indicates whether the grid should add
         * drop-down buttons to data-mapped cells.
         *
         * The drop-down buttons are shown on columns that have a {@link Column.dataMap}
         * and are editable.
         *
         * Clicking on the drop-down buttons causes the grid to show a
         * drop-down list from which users can select the cell value.
         *
         * This setting may be overridden on specific columns using the
         * column's {@link Column.dataMapEditor} property.
         *
         * Cell drop-downs require the **wijmo.input module** to be loaded.
         */
        showDropDown: boolean;
        /**
         * Toggles the visibility of the drop-down list box associated with
         * the currently selected cell.
         *
         * The drop-down list is created automatically based on the column's
         * {@link Column.dataMap} property.
         *
         * This method can be used to show the drop-down list automatically
         * when the cell enters edit mode, or when the user presses certain
         * keys.
         *
         * For example, this code causes the grid to show the drop-down list
         * whenever the grid enters edit mode:
         *
         * ```typescript
         * // show the drop-down list when the grid enters edit mode
         * theGrid.beginningEdit.addHandler(() => {
         *   theGrid.toggleDropDownList();
         * });
         * ```
         *
         * This code causes the grid to show the drop-down list when the grid
         * enters edit mode after the user presses the space bar:
         *
         * ```typescript
         * // show the drop-down list when the user presses the space bar
         * theGrid.hostElement.addEventListener('keydown', (e) => {
         *   if (e.keyCode == 32) {
         *     e.preventDefault();
         *     theGrid.toggleDropDownList();
         *   }
         * }, true);
         * ```
         */
        toggleDropDownList(): boolean;
        /**
         * Gets a reference to a static object that defines the default width for
         * auto-generated grid columns based on their types.
         *
         * The object keys are {@link DataType} values. The object values are either
         * numbers (widths in pixels) or star-size strings (multiples of the default
         * width defined by the columns defaultSize property).
         *
         * For example:
         *
         * ```typescript
         * import { FlexGrid } from '@grapecity/wijmo.grid';
         * import { DataType } from '@grapecity/wijmo';
         *
         * // make boolean columns on all grids 100px wide by default
         * FlexGrid.defaultTypeWidth[DataType.Boolean] = 100;
         *
         * // make numeric columns on all grids 75% as wide as the columns defaultSize
         * FlexGrid.defaultTypeWidth[DataType.Number] = '0.75*';
         * ```
         */
        static readonly defaultTypeWidth: object;
        /**
         * Occurs before the grid is bound to a new items source.
         */
        readonly itemsSourceChanging: Event<FlexGrid, CancelEventArgs>;
        /**
         * Raises the {@link itemsSourceChanging} event.
         *
         * @param e {@link CancelEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onItemsSourceChanging(e: wijmo.CancelEventArgs): boolean;
        /**
         * Occurs after the grid has been bound to a new items source.
         */
        readonly itemsSourceChanged: Event<FlexGrid, EventArgs>;
        /**
         * Raises the {@link itemsSourceChanged} event.
         */
        onItemsSourceChanged(e?: wijmo.EventArgs): void;
        /**
         * Occurs after the control has scrolled.
         */
        readonly scrollPositionChanged: Event<FlexGrid, EventArgs>;
        /**
         * Raises the {@link scrollPositionChanged} event.
         */
        onScrollPositionChanged(e?: wijmo.EventArgs): void;
        /**
         * Occurs before selection changes.
         */
        readonly selectionChanging: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link selectionChanging} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onSelectionChanging(e: CellRangeEventArgs): boolean;
        /**
         * Occurs after selection changes.
         */
        readonly selectionChanged: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link selectionChanged} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         */
        onSelectionChanged(e: CellRangeEventArgs): void;
        /**
         * Occurs before the grid rows are bound to items in the data source.
         */
        readonly loadingRows: Event<FlexGrid, CancelEventArgs>;
        /**
         * Raises the {@link loadingRows} event.
         *
         * @param e {@link CancelEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onLoadingRows(e: wijmo.CancelEventArgs): boolean;
        /**
         * Occurs after the grid rows have been bound to items in the data source.
         */
        readonly loadedRows: Event<FlexGrid, EventArgs>;
        /**
         * Raises the {@link loadedRows} event.
         */
        onLoadedRows(e?: wijmo.EventArgs): void;
        /**
         * Occurs before the grid updates its internal layout.
         */
        readonly updatingLayout: Event<FlexGrid, CancelEventArgs>;
        /**
         * Raises the {@link updatingLayout} event.
         *
         * @param e {@link CancelEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onUpdatingLayout(e: wijmo.CancelEventArgs): boolean;
        /**
         * Occurs after the grid has updated its internal layout.
         */
        readonly updatedLayout: Event<FlexGrid, EventArgs>;
        /**
         * Raises the {@link updatedLayout} event.
         */
        onUpdatedLayout(e?: wijmo.EventArgs): void;
        /**
         * Occurs as columns are resized.
         */
        readonly resizingColumn: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link resizingColumn} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onResizingColumn(e: CellRangeEventArgs): boolean;
        /**
         * Occurs when the user finishes resizing a column.
         */
        readonly resizedColumn: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link resizedColumn} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         */
        onResizedColumn(e: CellRangeEventArgs): void;
        /**
         * Occurs before the user auto-sizes a column by double-clicking the
         * right edge of a column header cell.
         */
        readonly autoSizingColumn: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link autoSizingColumn} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onAutoSizingColumn(e: CellRangeEventArgs): boolean;
        /**
         * Occurs after the user auto-sizes a column by double-clicking the
         * right edge of a column header cell.
         */
        readonly autoSizedColumn: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link autoSizedColumn} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         */
        onAutoSizedColumn(e: CellRangeEventArgs): void;
        /**
         * When one or more columns have been resized due to star-sizing.
         */
        readonly starSizedColumns: Event<FlexGrid, EventArgs>;
        /**
         * Raises the {@link starSizedColumns} event.
         */
        onStarSizedColumns(e?: wijmo.EventArgs): void;
        /**
         * Occurs when the user starts dragging a column.
         */
        readonly draggingColumn: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link draggingColumn} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onDraggingColumn(e: CellRangeEventArgs): boolean;
        /**
         * Occurs as the user drags a column to a new position.
         *
         * The handler may cancel the event to prevent users from
         * dropping columns at certain positions. For example:
         *
         * ```typescript
         * // remember column being dragged
         * flex.draggingColumn.addHandler((s, e) => {
         *     theColumn = s.columns[e.col].binding;
         * });
         *
         * // prevent 'sales' column from being dragged to index 0
         * s.draggingColumnOver.addHandler((s, e) => {
         *     if (theColumn == 'sales' && e.col == 0) {
         *         e.cancel = true;
         *     }
         * });
         * ```
         */
        readonly draggingColumnOver: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link draggingColumnOver} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onDraggingColumnOver(e: CellRangeEventArgs): boolean;
        /**
         * Occurs when the user finishes dragging a column.
         */
        readonly draggedColumn: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link draggedColumn} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         */
        onDraggedColumn(e: CellRangeEventArgs): void;
        /**
         * Occurs before one or more columns are pinned.
         */
        readonly pinningColumn: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link pinningColumn} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onPinningColumn(e: CellRangeEventArgs): boolean;
        /**
         * Occurs after one or more columns are pinned.
         */
        readonly pinnedColumn: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link pinnedColumn} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         */
        onPinnedColumn(e: CellRangeEventArgs): void;
        /**
         * Occurs as rows are resized.
         */
        readonly resizingRow: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link resizingRow} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onResizingRow(e: CellRangeEventArgs): boolean;
        /**
         * Occurs when the user finishes resizing rows.
         */
        readonly resizedRow: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link resizedRow} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         */
        onResizedRow(e: CellRangeEventArgs): void;
        /**
         * Occurs before the user auto-sizes a row by double-clicking the
         * bottom edge of a row header cell.
         */
        readonly autoSizingRow: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link autoSizingRow} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onAutoSizingRow(e: CellRangeEventArgs): boolean;
        /**
         * Occurs after the user auto-sizes a row by double-clicking the
         * bottom edge of a row header cell.
         */
        readonly autoSizedRow: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link autoSizedRow} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         */
        onAutoSizedRow(e: CellRangeEventArgs): void;
        /**
         * Occurs when the user starts dragging a row.
         */
        readonly draggingRow: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link draggingRow} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onDraggingRow(e: CellRangeEventArgs): boolean;
        /**
         * Occurs as the user drags a row to a new position.
         */
        readonly draggingRowOver: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link draggingRowOver} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onDraggingRowOver(e: CellRangeEventArgs): boolean;
        /**
         * Occurs when the user finishes dragging a row.
         */
        readonly draggedRow: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link draggedRow} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         */
        onDraggedRow(e: CellRangeEventArgs): void;
        /**
         * Occurs when a group is about to be expanded or collapsed.
         */
        readonly groupCollapsedChanging: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link groupCollapsedChanging} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onGroupCollapsedChanging(e: CellRangeEventArgs): boolean;
        /**
         * Occurs after a group has been expanded or collapsed.
         */
        readonly groupCollapsedChanged: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link groupCollapsedChanged} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         */
        onGroupCollapsedChanged(e: CellRangeEventArgs): void;
        /**
         * Occurs when a column group is about to be expanded or collapsed.
         *
         * The 'data' property of the handler parameters contains a reference
         * to the {@link ColumnGroup} that is about to change.
         */
        readonly columnGroupCollapsedChanging: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link columnGroupCollapsedChanging} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onColumnGroupCollapsedChanging(e: CellRangeEventArgs): boolean;
        /**
         * Occurs after a column group has been expanded or collapsed.
         *
         * The 'data' property of the handler parameters contains a reference
         * to the {@link ColumnGroup} that is about to change.
         */
        readonly columnGroupCollapsedChanged: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link columnGroupCollapsedChanged} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         */
        onColumnGroupCollapsedChanged(e: CellRangeEventArgs): void;
        /**
         * Occurs before the user applies a sort by clicking on a column header.
         *
         * The 'data' property of the handler parameters contains a reference
         * to the DOM event that caused the sort.
         *
         * The event handler may cancel the sort action.
         */
        readonly sortingColumn: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link sortingColumn} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onSortingColumn(e: CellRangeEventArgs): boolean;
        /**
         * Occurs after the user applies a sort by clicking on a column header.
         */
        readonly sortedColumn: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link sortedColumn} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         */
        onSortedColumn(e: CellRangeEventArgs): void;
        /**
         * Occurs before a cell enters edit mode.
         *
         * The 'data' property of the handler parameters contains a reference
         * to the DOM event that caused the grid to enter edit mode.
         *
         * The event handler may cancel the edit operation.
         */
        readonly beginningEdit: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link beginningEdit} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onBeginningEdit(e: CellRangeEventArgs): boolean;
        /**
         * Occurs when an editor cell is created and before it becomes active.
         *
         * The event handler can access the editor element using the grid's
         * {@link activeEditor} property.
         */
        readonly prepareCellForEdit: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link prepareCellForEdit} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         */
        onPrepareCellForEdit(e: CellRangeEventArgs): void;
        /**
         * Occurs when a cell edit is ending.
         *
         * You can use this event to perform validation and prevent invalid edits.
         * For example, the code below prevents users from entering values that
         * do not contain the letter 'a'. The code demonstrates how you can obtain
         * the old and new values before the edits are applied.
         *
         * ```typescript
         * function cellEditEnding(flex, e) {
         *
         *   // get old and new values
         *   let oldVal = flex.getCellData(e.row, e.col),
         *       newVal = flex.activeEditor.value;
         *
         *   // cancel edits if newVal doesn't contain 'a'
         *   e.cancel = newVal.indexOf('a') &lt; 0;
         * }
         * ```
         *
         * Setting the {@link CellEditEndingEventArgs.cancel} parameter to
         * true causes the grid to discard the edited value and keep the
         * cell's original value.
         *
         * If you also set the {@link CellEditEndingEventArgs.stayInEditMode}
         * parameter to true, the grid will remain in edit mode so the user
         * can correct invalid entries before committing the edits.
         */
        readonly cellEditEnding: Event<FlexGrid, CellEditEndingEventArgs>;
        /**
         * Raises the {@link cellEditEnding} event.
         *
         * @param e {@link CellEditEndingEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onCellEditEnding(e: CellEditEndingEventArgs): boolean;
        /**
         * Occurs when a cell edit has been committed or canceled.
         */
        readonly cellEditEnded: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link cellEditEnded} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         */
        onCellEditEnded(e: CellRangeEventArgs): void;
        /**
         * Occurs before a row enters edit mode.
         */
        readonly rowEditStarting: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link rowEditStarting} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onRowEditStarting(e: CellRangeEventArgs): boolean;
        /**
         * Occurs after a row enters edit mode.
         */
        readonly rowEditStarted: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link rowEditStarted} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         */
        onRowEditStarted(e: CellRangeEventArgs): void;
        /**
         * Occurs when a row edit is ending, before the changes are committed or canceled.
         *
         * This event can be used in conjunction with the {@link rowEditStarted} event to
         * implement deep-binding edit undos. For example:
         *
         * ```typescript
         * // save deep bound values when editing starts
         * let itemData = {};
         * s.rowEditStarted.addHandler((s, e) => {
         *   let item = s.collectionView.currentEditItem;
         *   itemData = {};
         *   s.columns.forEach(function (col) {
         *     if (col.binding.indexOf('.') &gt; -1) { // deep binding
         *       let binding = new wijmo.Binding(col.binding);
         *       itemData[col.binding] = binding.getValue(item);
         *     }
         *   })
         * });
         *
         * // restore deep bound values when edits are canceled
         * s.rowEditEnded.addHandler((s, e) => {
         *   if (e.cancel) { // edits were canceled by the user
         *     let item = s.collectionView.currentEditItem;
         *     for (let k in itemData) {
         *       let binding = new wijmo.Binding(k);
         *       binding.setValue(item, itemData[k]);
         *     }
         *   }
         *   itemData = {};
         * });
         * ```
         */
        readonly rowEditEnding: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link rowEditEnding} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         */
        onRowEditEnding(e: CellRangeEventArgs): void;
        /**
         * Occurs when a row edit has been committed or canceled.
         */
        readonly rowEditEnded: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link rowEditEnded} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         */
        onRowEditEnded(e: CellRangeEventArgs): void;
        /**
         * Occurs when the user creates a new item by editing the new row template
         * (see the {@link allowAddNew} property).
         *
         * The event handler may customize the content of the new item or cancel
         * the new item creation.
         */
        readonly rowAdded: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link rowAdded} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         * @return True if the event was not canceled and the new row should be kept.
         */
        onRowAdded(e: CellRangeEventArgs): boolean;
        /**
         * Occurs when the user is deleting a selected row by pressing the Delete
         * key (see the {@link allowDelete} property).
         *
         * The event handler may cancel the row deletion.
         */
        readonly deletingRow: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link deletingRow} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onDeletingRow(e: CellRangeEventArgs): boolean;
        /**
         * Occurs after the user has deleted a row by pressing the Delete
         * key (see the {@link allowDelete} property).
         */
        readonly deletedRow: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link deletedRow} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         */
        onDeletedRow(e: CellRangeEventArgs): void;
        /**
         * Occurs when the user is copying the selection content to the
         * clipboard by pressing one of the clipboard shortcut keys
         * (see the {@link autoClipboard} property).
         *
         * The event handler may cancel the copy operation.
         */
        readonly copying: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link copying} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onCopying(e: CellRangeEventArgs): boolean;
        /**
         * Occurs after the user has copied the selection content to the
         * clipboard by pressing one of the clipboard shortcut keys
         * (see the {@link autoClipboard} property).
         */
        readonly copied: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link copied} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         */
        onCopied(e: CellRangeEventArgs): void;
        /**
         * Occurs when the user is pasting content from the clipboard by
         * pressing one of the clipboard shortcut keys
         * (see the {@link autoClipboard} property).
         *
         * The 'data' property of the handler parameters contains a copy
         * of the text being pasted into the grid.
         *
         * The event handler may cancel the paste operation.
         */
        readonly pasting: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link pasting} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onPasting(e: CellRangeEventArgs): boolean;
        /**
         * Occurs after the user has pasted content from the
         * clipboard by pressing one of the clipboard shortcut keys
         * (see the {@link autoClipboard} property).
         */
        readonly pasted: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link pasted} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         */
        onPasted(e: CellRangeEventArgs): void;
        /**
         * Occurs when the user is pasting content from the clipboard
         * into a cell (see the {@link autoClipboard} property).
         *
         * The 'data' property of the handler parameters contains a copy
         * of the text being pasted into the cell.
         *
         * The event handler may cancel the paste operation.
         */
        readonly pastingCell: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link pastingCell} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onPastingCell(e: CellRangeEventArgs): boolean;
        /**
         * Occurs after the user has pasted content from the
         * clipboard into a cell (see the {@link autoClipboard} property).
         */
        readonly pastedCell: Event<FlexGrid, CellRangeEventArgs>;
        /**
         * Raises the {@link pastedCell} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         */
        onPastedCell(e: CellRangeEventArgs): void;
        /**
         * Occurs when an element representing a cell has been created.
         *
         * This event can be used to format cells for display. It is similar
         * in purpose to the {@link itemFormatter} property, but has the advantage
         * of allowing multiple independent handlers.
         *
         * For example, this code removes the 'wj-wrap' class from cells in
         * group rows:
         *
         * ```typescript
         * flex.formatItem.addHandler((flex, e) => {
         *   if (flex.rows[e.row] instanceof wijmo.grid.GroupRow) {
         *     wijmo.removeClass(e.cell, 'wj-wrap');
         *   }
         * });
         * ```
         */
        readonly formatItem: Event<FlexGrid, FormatItemEventArgs>;
        /**
         * Raises the {@link formatItem} event.
         *
         * @param e {@link FormatItemEventArgs} that contains the event data.
         */
        onFormatItem(e: FormatItemEventArgs): void;
        /**
         * Occurs when the grid starts creating/updating the elements that
         * make up the current view.
         */
        readonly updatingView: Event<FlexGrid, CancelEventArgs>;
        /**
         * Raises the {@link updatingView} event.
         *
         * @param e {@link CancelEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onUpdatingView(e: wijmo.CancelEventArgs): boolean;
        /**
         * Occurs when the grid finishes creating/updating the elements that
         * make up the current view.
         *
         * The grid updates the view in response to several actions, including:
         *
         * <ul>
         * <li>Refreshing the grid or its data source,</li>
         * <li>Adding, removing, or changing rows or columns,</li>
         * <li>Resizing or scrolling the grid,</li>
         * <li>Changing the selection.</li>
         * </ul>
         */
        readonly updatedView: Event<FlexGrid, EventArgs>;
        /**
         * Raises the {@link updatedView} event.
         */
        onUpdatedView(e?: wijmo.EventArgs): void;
        _autoRowHeights(): void;
        _getShowErrors(): boolean;
        _getHasValidation(): boolean;
        _getError(p: GridPanel, r: number, c: number, parsing?: boolean): string | null;
        private _setAria;
        private _setFocus;
        _setFocusNoScroll(e: HTMLElement): void;
        private _getDefaultRowHeight;
        protected _getCollectionView(value: any): wijmo.collections.ICollectionView;
        private _getCanvasContext;
        private _getWidestRow;
        private _getDesiredWidth;
        private _getDesiredHeight;
        _getDesiredRowHeight(panel: GridPanel, r: number, eMeasure: HTMLElement, cache: any): number;
        _getSortRowIndex(): number;
        _getDeleteColumnIndex(): number;
        _getEditColumnIndex(): number;
        _mappedColumns: any;
        private _sortConverter;
        protected _bindGrid(full: boolean): void;
        private _getMap;
        _cvCollectionChanged(sender: any, e: wijmo.collections.NotifyCollectionChangedEventArgs): void;
        private _cvCurrentChanged;
        private _syncSelection;
        private _getRowIndex;
        _getCvIndex(index: number): number;
        private _findRow;
        private _updateLayout;
        private _updateStickyHeaders;
        private _updateScrollHandler;
        _getClipToScreen(): boolean;
        private _scroll;
        private _getCssPage;
        private _updateScrollPosition;
        private _updateContent;
        private _fixScroll;
        private _clearCells;
        _useFrozenDiv(): boolean;
        private _updateFrozenCells;
        _updateMarquee(): void;
        private _getMarqueeRect;
        _bindColumns(): void;
        _getColumnTypes(arr: any[]): wijmo.IBindingInfo[];
        _updateColumnTypes(): void;
        _getMapEditor(row: Row, col: Column): DataMapEditor;
        _getBindingColumn(p: GridPanel, r: Number, c: Column): Column;
        _getBindingColumns(): Column[];
        _getRowHeaderPath(): wijmo.Binding;
        _bindRows(): void;
        _addBoundRow(items: any[], index: number): void;
        _addGroupRow(group: wijmo.collections.CollectionViewGroup): void;
        _addNode(items: any[], index: number, level: number): void;
        private _addGroup;
        protected static _getSerializableProperties(obj: any): string[];
        _hasColumnGroups(): boolean;
        _getColumnGroup(r: number, c: number): ColumnGroup;
        _copy(key: string, value: any): boolean;
        _isInputElement(e: any): boolean;
        _isNativeCheckbox(edt: any): boolean;
        _wantsInput(e: any): boolean;
        private static _maxCssHeight;
        private static _getMaxSupportedCssHeight;
        static _rtlMode: string;
        private static _getRtlMode;
    }
}
declare module wijmo.grid {
    /**
     * Implements a hidden input element so users can choose IME modes when
     * the FlexGrid has focus, and start composing before the grid enters
     * edit mode.
     */
    class _ImeHandler {
        _g: FlexGrid;
        _tbx: HTMLInputElement;
        _updateImeFocusBnd: any;
        _cmpstartBnd: any;
        _keypressBnd: any;
        static _cssHidden: {
            position: string;
            width: string;
            left: number;
            top: number;
            overflow: string;
        };
        /**
         * Initializes a new instance of the {@link _ImeHandler} class
         * and attaches it to a {@link FlexGrid}.
         *
         * @param g {@link FlexGrid} that this {@link _ImeHandler} will be attached to.
         */
        constructor(g: FlexGrid);
        /**
         * Disposes of this {@link _ImeHandler}.
         */
        dispose(): void;
        _compositionstart(evt: any): void;
        _cellEditEnded(): void;
        _keypress(e: KeyboardEvent): void;
        _updateImeFocus(): void;
        _enableIme(): boolean;
    }
}
declare module wijmo.grid {
    /**
     * Handles the grid's collection of column groups.
     */
    class _ColumnGroupHandler {
        protected _grid: FlexGrid;
        protected _colGroups: ColumnGroup[];
        protected _groupDefs: any[];
        /**
         * Initializes a new instance of the {@link _ColumnGroupHandler} class.
         *
         * @param g {@link FlexGrid} that owns this {@link _ColumnGroupHandler}.
         */
        constructor(grid: FlexGrid);
        /**
         * Initializes the column groups based on an array of
         * column definition objects.
         *
         * @param arr Array of column definition objects that defines the groups.
         */
        createColumnGroups(arr: any[]): void;
        private _addColumnGroup;
        /**
         * Gets a value that determines whether the grid has any
         * column groups.
         */
        hasColumnGroups(): boolean;
        /**
         * Gets the original array used to define the column groups.
         */
        getGroupDefinitions(): any[];
        /**
         * Gets the {@link ColumnGroup} that contains a given row and column.
         *
         * @param r Index of the row containted in the the group.
         * @param c Index of the column containted in the group.
         */
        getColumnGroup(r: number, c: number): ColumnGroup;
    }
    /**
     * Extends the {@link Column} class to provide column groups.
     *
     * This class adds a {@link columns} property so any group column
     * may have any number of child columns.
     *
     * It also adds {@link isCollapsed} and {@link collapseTo}
     * properties that control the expand/collapse behavior of the
     * group.
     *
     * Since it extends the {@link Column} class, you can create
     * and use {@link ColumnGroup} columns as you normal columns.
     *
     * For example, the code below creates a grid with two collapsible
     * column groups, each with a few child columns:
     *
     * ```typescript
     * let theGrid = new FlexGrid('#theGrid', {
     *     selectionMode: 'MultiRange',
     *     autoGenerateColumns: false,
     *     columns: [
     *         { header: 'Transaction', collapseTo: 'id', align: 'left', columns: [
     *              { binding: 'id', header: 'ID' },
     *              { binding: 'date', header: 'Date' },
     *              { binding: 'time', header: 'Time', format: 'HH:mm:ss' }
     *         ]},
     *         { header: 'Details', collapseTo: 'sales', align: 'left', columns: [
     *              { binding: 'country', header: 'Country' },
     *              { binding: 'sales', header: 'Sales' },
     *              { binding: 'expenses', header: 'Expenses' }
     *         ]}
     *     ],
     *     itemsSource: getData()
     * });
     * ```
     */
    class ColumnGroup extends Column {
        _rng: CellRange;
        _grid: FlexGrid;
        private _pGrp;
        private _cols;
        private _lvl;
        private _collTo;
        private _collapsed;
        /**
         * Initializes a new instance of the {@link ColumnGroup} class.
         *
         * @param options JavaScript object containing initialization data for the instance.
         * @param parent Parent group, or null for top-level groups.
         */
        constructor(options: any, parent: ColumnGroup);
        /**
         * Gets or sets the collection of child {@link ColumnGroup} columns.
         */
        columns: ColumnGroup[];
        /**
         * Gets this {@link ColumnGroup}'s parent column group.
         *
         * You can use this property to restrict column dragging
         * so users can only drag within groups. For example:
         *
         * ```typescript
         * let theDragColumn: ColumnGroup;
         * new FlexGrid(host, {
         *     columnGroups: ...,
         *     itemsSource: ...,
         *     draggingColumn: (s, e) => { // keep track of group being dragged
         *         theDragColumn = e.getColumn() as ColumnGroup;
         *     },
         *     draggingColumnOver: (s, e) => { // allow dropping only within groups
         *         let col = e.getColumn() as ColumnGroup;
         *         e.cancel = col.parentGroup != theDragColumn.parentGroup;
         *     }
         * });
         * ```
         */
        readonly parentGroup: ColumnGroup;
        /**
         * Gets or sets the binding of the column that should remain
         * visible when this {@link ColumnGroup} is collapsed.
         */
        collapseTo: string;
        /**
         * Gets or sets a value that determines whether this {@link ColumnGroup}
         * is collapsed.
         */
        isCollapsed: boolean;
        /**
         * Overridden to return the parent grid.
         *
         * This is needed since not all {@link ColumnGroup} columns are added
         * to the grid's columns collection.
         */
        readonly grid: FlexGrid;
        _updateCollapsedState(): void;
        _getMaxLevel(): number;
        _expandRange(maxLevel: number): void;
        _shiftRange(delta: number): void;
    }
}
declare module wijmo.grid {
    /**
     * Manages the new row template used to add rows to the grid.
     */
    class _AddNewHandler {
        protected _g: FlexGrid;
        protected _nrt: _NewRowTemplate;
        protected _keydownBnd: any;
        protected _top: boolean;
        protected _committing: boolean;
        /**
         * Initializes a new instance of the {@link _AddNewHandler} class.
         *
         * @param g {@link FlexGrid} that owns this {@link _AddNewHandler}.
         */
        constructor(g: FlexGrid);
        /**
         * Gets or sets a value that indicates whether the new row template
         * should be located at the top of the grid or at the bottom.
         */
        newRowAtTop: boolean;
        /**
         * Updates the new row template to ensure it's visible only if the
         * grid is bound to a data source that supports adding new items,
         * and that it is in the right position.
         */
        updateNewRowTemplate(): void;
        _attach(): void;
        _detach(): void;
        _keydown(e: KeyboardEvent): void;
        _beginningEdit(s: FlexGrid, e: CellRangeEventArgs): void;
        _rowEditEnded(s: FlexGrid, e: CellRangeEventArgs): void;
    }
    /**
     * Represents a row template used to add items to the source collection.
     */
    class _NewRowTemplate extends Row {
    }
}
declare module wijmo.grid {
    /**
     * Specifies constants that define which areas of the grid support cell merging.
     */
    enum AllowMerging {
        /** No merging. */
        None = 0,
        /** Merge scrollable cells. */
        Cells = 1,
        /** Merge column headers. */
        ColumnHeaders = 2,
        /** Merge row headers. */
        RowHeaders = 4,
        /** Merge column and row headers. */
        AllHeaders = 6,
        /** Merge all areas. */
        All = 7
    }
    /**
     * Defines the {@link FlexGrid}'s cell merging behavior.
     *
     * An instance of this class is automatically created and assigned to
     * the grid's {@link FlexGrid.mergeManager} property to implement the
     * grid's default merging behavior.
     *
     * If you want to customize the default merging behavior, create a class
     * that derives from {@link MergeManager} and override the {@link getMergedRange}
     * method.
     */
    class MergeManager {
        _g: FlexGrid;
        /**
         * Initializes a new instance of the {@link MergeManager} class.
         *
         * @param g The {@link FlexGrid} object that owns this {@link MergeManager}.
         */
        constructor(g: FlexGrid);
        /**
         * Gets a {@link CellRange} that specifies the merged extent of a cell
         * in a {@link GridPanel}.
         *
         * @param p The {@link GridPanel} that contains the range.
         * @param r The index of the row that contains the cell.
         * @param c The index of the column that contains the cell.
         * @param clip Whether to clip the merged range to the grid's current view range.
         * @return A {@link CellRange} that specifies the merged range, or null if the cell is not merged.
         */
        getMergedRange(p: GridPanel, r: number, c: number, clip?: boolean): CellRange;
        private _mergeCell;
    }
}
declare module wijmo.grid {
    /**
     * Contains information about the part of a {@link FlexGrid} control
     * at a given position on the page.
     */
    class HitTestInfo {
        _g: FlexGrid;
        _p: GridPanel;
        _pt: wijmo.Point;
        _target: Element;
        _row: number;
        _col: number;
        _rng: CellRange;
        _edge: number;
        static _SZEDGE: number[];
        /**
         * Initializes a new instance of the {@link wijmo.grid.HitTestInfo} class.
         *
         * @param grid The {@link FlexGrid} control, {@link GridPanel}, or cell element
         * to investigate.
         * @param pt The {@link Point} object in page coordinates to investigate.
         */
        constructor(grid: any, pt: any);
        /**
         * Gets the point in control coordinates that this {@link wijmo.grid.HitTestInfo} refers to.
         */
        readonly point: wijmo.Point;
        /**
         * Gets the type of cell found at the specified position.
         */
        readonly cellType: CellType;
        /**
         * Gets the {@link GridPanel} that this {@link HitTestInfo} refers to.
         */
        readonly panel: GridPanel;
        /**
         * Gets the {@link FlexGrid} that this {@link HitTestInfo} refers to.
         */
        readonly grid: FlexGrid;
        /**
         * Gets the index of the row at the specified position.
         *
         * To get the {@link Row} object, use the {@link getRow} method.
         */
        readonly row: number;
        /**
         * Gets the {@link Row} object object at the specified position.
         *
         * To get the row index, use the {@link row} property.
         */
        getRow(): Row;
        /**
         * Gets the index of the column at the specified position.
         *
         * To get the {@link Column} object, use the {@link getColumn} method.
         */
        readonly col: number;
        /**
         * Gets the {@link Column} object at the specified position.
         *
         * To get the column index, use the {@link col} property.
         *
         * @param binding Whether to get the column by index or by binding.
         * This parameter only makes a difference in grids that have multiple
         * rows per data item (like the {@link MultiRow} grid).
         */
        getColumn(binding?: boolean): Column;
        /**
         * Gets the cell range at the specified position.
         */
        readonly range: CellRange;
        /**
         * Gets a value that indicates whether the mouse is near the left edge of the cell.
         */
        readonly edgeLeft: boolean;
        /**
         * Gets a value that indicates whether the mouse is near the top edge of the cell.
         */
        readonly edgeTop: boolean;
        /**
         * Gets a value that indicates whether the mouse is near the right edge of the cell.
         */
        readonly edgeRight: boolean;
        /**
         * Gets a value that indicates whether the mouse is very near the right edge of the cell.
         */
        readonly edgeFarRight: boolean;
        /**
         * Gets a value that indicates whether the mouse is near the bottom edge of the cell.
         */
        readonly edgeBottom: boolean;
        /**
         * Gets a value that indicates whether the mouse is very near the bottom edge of the cell.
         */
        readonly edgeFarBottom: boolean;
        /**
         * Gets the target element used to create this {@link HitTestInfo}.
         */
        readonly target: Element;
    }
}
declare module wijmo.grid {
    function softInput(): typeof wijmo.input;
}
declare module wijmo.grid {
    /**
     * Creates HTML elements that represent cells within a {@link FlexGrid} control.
     */
    class CellFactory {
        static _WJC_RADIOMAP: string;
        static _WJC_CHECKBOX: string;
        static _WJC_COLLAPSE: string;
        static _WJC_DROPDOWN: string;
        static _WJC_PIN: string;
        static _tplDdBtn: string;
        static _ddBtn: HTMLElement;
        static _fmtRng: CellRange;
        static _tplCtx: ICellTemplateContext;
        /**
         * Creates or updates a cell in the grid.
         *
         * @param p The {@link GridPanel} that contains the cell.
         * @param r The index of the row that contains the cell.
         * @param c The index of the column that contains the cell.
         * @param cell The element that represents the cell.
         * @param rng The {@link CellRange} object that contains the cell's
         * merged range, or null if the cell is not merged.
         * @param updateContent Whether to update the cell's content as
         * well as its position and style.
         */
        updateCell(p: GridPanel, r: number, c: number, cell: HTMLElement, rng?: CellRange, updateContent?: boolean): void;
        /**
         * Disposes of a cell element and releases all resources associated with it.
         *
         * @param cell The element that represents the cell.
         */
        disposeCell(cell: HTMLElement): void;
        /**
         * Gets the value of the editor currently being used.
         *
         * @param g {@link FlexGrid} that owns the editor.
         */
        getEditorValue(g: FlexGrid): any;
    }
}
declare module wijmo.grid {
    /**
     * Handles the grid's editing.
     */
    class _EditHandler {
        _g: FlexGrid;
        _rng: CellRange;
        _edt: HTMLInputElement;
        _edItem: any;
        _lbx: wijmo.input.ListBox;
        _fullEdit: boolean;
        _list: any;
        _evtInput: any;
        _evtChange: any;
        _edtValue: string;
        _cstEdtValue: any;
        /**
         * Initializes a new instance of the {@link _EditHandler} class.
         *
         * @param g {@link FlexGrid} that owns this {@link _EditHandler}.
         */
        constructor(g: FlexGrid);
        /**
         * Starts editing a given cell.
         *
         * @param fullEdit Whether to stay in edit mode when the user presses the cursor keys. Defaults to false.
         * @param r Index of the row to be edited. Defaults to the currently selected row.
         * @param c Index of the column to be edited. Defaults to the currently selected column.
         * @param focus Whether to give the editor the focus. Defaults to true.
         * @param evt Event that triggered this action (usually a keypress or keydown).
         * @return True if the edit operation started successfully.
         */
        startEditing(fullEdit?: boolean, r?: number, c?: number, focus?: boolean, evt?: any): boolean;
        /**
         * Commits any pending edits and exits edit mode.
         *
         * @param cancel Whether pending edits should be canceled or committed.
         * @return True if the edit operation finished successfully.
         */
        finishEditing(cancel?: boolean): boolean;
        _setCustomEditorValue(value: any): void;
        _setCellError(cell: HTMLElement, error: string): void;
        /**
         * Gets the <b>HTMLInputElement</b> that represents the cell editor currently active.
         */
        readonly activeEditor: HTMLInputElement;
        /**
         * Gets a {@link CellRange} that identifies the cell currently being edited.
         */
        readonly editRange: CellRange;
        /**
         * Gets the content of a {@link CellRange} as a string suitable for
         * copying to the clipboard.
         *
         * Hidden rows and columns are not included in the clip string.
         *
         * @param rng {@link CellRange} to copy. If omitted, the current selection is used.
         * @param options {@link ClipStringOptions} that specifies options for the clip string
         * to be generated.
         * @param colHdrs Whether to include the column headers.
         * @param rowHdrs Whether to include the row headers.
         */
        getClipString(rng: CellRange, options: ClipStringOptions, colHdrs?: boolean, rowHdrs?: boolean): string;
        _getRowClipString(p: GridPanel, r: number, rng: CellRange, options: ClipStringOptions, rh: boolean): string;
        protected _skipMergedCell(p: GridPanel, rng: CellRange, r: number, c: number): boolean;
        protected _getCellClipString(cell: any, options: ClipStringOptions): string;
        _sameRows(ranges: CellRange[]): boolean;
        _sameCols(ranges: CellRange[]): boolean;
        /**
         * Parses a string into rows and columns and applies the content to a given range.
         *
         * Hidden rows and columns are skipped.
         *
         * @param text Tab and newline delimited text to parse into the grid.
         * @param rng {@link CellRange} to use when pasting the data. If omitted, the current selection is used.
         */
        setClipString(text: string, rng?: CellRange): boolean;
        _deferPaste(rng: CellRange, cnt: number): boolean;
        _parseClipString(text: string): string[][];
        private _parseClipCell;
        _expandClipRows(rows: string[][], rng: CellRange): void;
        private _updateEditorCell;
        private _updateRowHeaderCell;
        private _updateCell;
        private _getValidationError;
        _allowEdit(r?: number, c?: number): boolean;
        _commitRowEdits(): void;
        _keydown(e: KeyboardEvent): boolean;
        private _keydownListBox;
        _keypress(e: KeyboardEvent): void;
        _findString(items: string[], text: string, caseSensitive: boolean): number;
        _toggleListBox(evt: any, rng?: CellRange): boolean;
        private _createListBox;
        private _removeListBox;
    }
}
declare module wijmo.grid {
    /**
     * Class used to implement custom grid editors.
     */
    class _CustomEditor {
        _g: FlexGrid;
        _col: Column;
        _ctl: wijmo.Control;
        _tbx: HTMLInputElement;
        _prop: string;
        _isDropDown: boolean;
        _isComboBox: boolean;
        _isAutoComplete: boolean;
        _isInputDateTime: boolean;
        _updateFocusBnd: any;
        _keypressBnd: any;
        _keydownBnd: any;
        _cmpstartBnd: any;
        _mousedownBnd: any;
        static _cssHidden: {
            position: string;
            left: number;
            top: number;
            width: string;
            height: string;
            overflow: string;
            border: string;
        };
        static _cssVisible: {
            position: string;
            left: number;
            top: number;
            width: string;
            height: string;
        };
        /**
         * Initializes a new instance of a {@link _CustomEditor}.
         *
         * @param col {@link Column} that owns this {@link _CustomEditor}.
         * @param control {@link Control} to be used as an editor for the specified column.
         */
        constructor(col: Column, control: wijmo.Control);
        /**
         * Gets a reference to the {@link FlexGrid} that owns this {@link _CustomEditor}.
         */
        readonly grid: FlexGrid;
        /**
         * Gets a reference to the {@link Column} this {@link _CustomEditor} is connected to.
         */
        readonly column: Column;
        /**
         * Gets a reference to the {@link Control} used as a custom editor by this {@link _CustomEditor}.
         */
        readonly control: wijmo.Control;
        /**
         * Disposes of this {@link _CustomEditor}, disconnecting it from the original column.
         */
        dispose(): void;
        _connect(): void;
        _disconnect(): void;
        _prepareCellForEdit(s: FlexGrid, e: CellRangeEventArgs): void;
        _cellEditEnding(s: FlexGrid, e: CellEditEndingEventArgs): void;
        _cellEditEnded(s: FlexGrid, e: CellRangeEventArgs): void;
        _cmpstart(e: any): void;
        _keypress(e: KeyboardEvent): void;
        _keydown(e: KeyboardEvent): void;
        _mousedown(e: MouseEvent): void;
        _activateEditor(e: any): boolean;
        _showEditor(): void;
        _hideEditor(): void;
        _updateFocus(): void;
    }
}
declare module wijmo.grid {
    /**
     * Specifies constants that define the action to perform when special
     * keys such as ENTER and TAB are pressed.
     */
    enum KeyAction {
        /** No special action (let the browser handle the key). */
        None = 0,
        /** Move the selection to the next row. */
        MoveDown = 1,
        /** Move the selection to the next column. */
        MoveAcross = 2,
        /** Move the selection to the next column, then wrap to the next row. */
        Cycle = 3,
        /** Move the selection to the next column, then wrap to the next row, then out of the control. */
        CycleOut = 4,
        /** Move the selection to the next editable column, then wrap to the next row. */
        CycleEditable = 5
    }
    /**
     * Handles the grid's keyboard commands.
     */
    class _KeyboardHandler {
        _g: FlexGrid;
        _kaTab: KeyAction;
        _kaEnter: KeyAction;
        _search: string;
        _toSearch: any;
        /**
         * Initializes a new instance of the {@link _KeyboardHandler} class.
         *
         * @param g {@link FlexGrid} that owns this {@link _KeyboardHandler}.
         */
        constructor(g: FlexGrid);
        _keydown(e: KeyboardEvent): void;
        _performKeyAction(action: KeyAction, shift: boolean): boolean;
        private _keypress;
        private _findNext;
        private _moveSel;
        private _deleteSel;
        private _deleteRange;
        private _startEditing;
    }
}
declare module wijmo.grid {
    /**
     * Specifies constants that define the row/column sizing behavior.
     */
    enum AllowResizing {
        /** The user may not resize rows or columns. */
        None = 0,
        /** The user may resize columns by dragging the edge of the column headers. */
        Columns = 1,
        /** The user may resize rows by dragging the edge of the row headers. */
        Rows = 2,
        /** The user may resize rows and columns by dragging the edge of the headers. */
        Both = 3,
        /** The user may resize columns by dragging the edge of any cell. */
        ColumnsAllCells,
        /** The user may resize rows by dragging the edge of any cell. */
        RowsAllCells,
        /** The user may resize rows and columns by dragging the edge of any cell. */
        BothAllCells
    }
    /**
     * Specifies constants that define the row/column auto-sizing behavior.
     */
    enum AutoSizeMode {
        /** Autosizing is disabled. */
        None = 0,
        /** Autosizing accounts for header cells. */
        Headers = 1,
        /** Autosizing accounts for data cells. */
        Cells = 2,
        /** Autosizing accounts for header and data cells. */
        Both = 3
    }
    /**
     * Specifies constants that define the row/column dragging behavior.
     */
    enum AllowDragging {
        /** The user may not drag rows or columns. */
        None = 0,
        /** The user may drag columns. */
        Columns = 1,
        /** The user may drag rows. */
        Rows = 2,
        /** The user may drag rows and columns. */
        Both = 3
    }
    /**
     * Handles the grid's mouse commands.
     */
    class _MouseHandler {
        _g: FlexGrid;
        _htDown: HitTestInfo;
        _htDrag: HitTestInfo;
        _selDown: CellRange;
        _isDown: boolean;
        _eMouse: MouseEvent;
        _lbSelState: boolean;
        _szRowCol: RowCol;
        _szStart: number;
        _szArgs: CellRangeEventArgs;
        _dragSrc: any;
        _dvMarker: HTMLElement;
        _rngTarget: CellRange;
        _updating: boolean;
        _ignoreClick: boolean;
        static _SZ_MIN: number;
        /**
         * Initializes a new instance of the {@link _MouseHandler} class.
         *
         * @param g {@link FlexGrid} that owns this {@link _MouseHandler}.
         */
        constructor(g: FlexGrid);
        /**
         * Resets the mouse state.
         */
        resetMouseState(): void;
        private _mousedown;
        private _mousemove;
        private _mouseup;
        private _click;
        private _handleClick;
        private _hasRadioMap;
        private _clickSort;
        private _clickPin;
        private _dblclick;
        private _hover;
        private _getResizeColHt;
        private _getResizeRowHt;
        _getResizeCol(panel: GridPanel, index: number, previous?: boolean): Column;
        _getResizeRow(panel: GridPanel, index: number, previous?: boolean): Row;
        private _asResizable;
        private _mouseSelect;
        private _handleResizing;
        private _dragstart;
        private _dragend;
        private _dragover;
        private _drop;
        private _hitTest;
        private _showResizeMarker;
        private _showDragMarker;
        private _finishResizing;
        private _handleSelection;
        private _splitRange;
    }
}
declare module wijmo.grid {
}

declare module wijmo.grid.filter {
    /**
     * Defines a filter condition.
     *
     * This class is used by the {@link FlexGridFilter} class;
     * you will rarely have to use it directly.
     */
    class FilterCondition {
        private _op;
        private _val;
        private _strVal;
        private _filter;
        static _refDateTime: Date;
        /**
         * Initializes a new instance of the {@link FilterCondition} class.
         *
         * @param filter The {@link ConditionFilter} that owns this {@link FilterCondition}.
         */
        constructor(filter?: ConditionFilter);
        /**
         * Gets or sets the operator used by this {@link FilterCondition}.
         */
        operator: Operator;
        /**
         * Gets or sets the value used by this {@link FilterCondition}.
         */
        value: any;
        /**
         * Gets a value that indicates whether the condition is active.
         */
        readonly isActive: boolean;
        /**
         * Clears the condition.
         */
        clear(): void;
        /**
         * Returns a value that determines whether the given value passes this
         * {@link FilterCondition}.
         *
         * @param value The value to test.
         * @param dateOnly Whether to disregard the time part of <b>Date</b> values.
         * @param timeOnly Whether to disregard the date part of <b>Date</b> values.
         */
        apply(value: any, dateOnly?: boolean, timeOnly?: boolean): boolean;
    }
    /**
     * Specifies filter condition operators.
     */
    enum Operator {
        /** Equals. */
        EQ = 0,
        /** Does not equal. */
        NE = 1,
        /** Greater than. */
        GT = 2,
        /** Greater than or equal to. */
        GE = 3,
        /** Less than. */
        LT = 4,
        /** Less than or equal to. */
        LE = 5,
        /** Begins with. */
        BW = 6,
        /** Ends with. */
        EW = 7,
        /** Contains. */
        CT = 8,
        /** Does not contain. */
        NC = 9
    }
}
declare module wijmo.grid.filter {
    /**
     * Defines a filter for a column on a {@link FlexGrid} control.
     *
     * This class is used by the {@link FlexGridFilter} class; you
     * rarely use it directly.
     */
    interface IColumnFilter {
        column: wijmo.grid.Column;
        isActive: boolean;
        apply(value: any): boolean;
        clear(): void;
    }
}
declare module wijmo.grid.filter {
    /**
     * Defines a condition filter for a column on a {@link FlexGrid} control.
     *
     * Condition filters contain two conditions that may be combined
     * using an 'and' or an 'or' operator.
     *
     * This class is used by the {@link FlexGridFilter} class; you will
     * rarely use it directly.
     */
    class ConditionFilter implements IColumnFilter {
        private _col;
        private _c1;
        private _c2;
        private _and;
        private _map;
        /**
         * Initializes a new instance of the {@link ConditionFilter} class.
         *
         * @param column The column to filter.
         */
        constructor(column: wijmo.grid.Column);
        /**
         * Gets the first condition in the filter.
         */
        readonly condition1: FilterCondition;
        /**
         * Gets the second condition in the filter.
         */
        readonly condition2: FilterCondition;
        /**
         * Gets a value that indicates whether to combine the two conditions
         * with an AND or an OR operator.
         *
         * The default value for this property is <b>true</b>.
         */
        and: boolean;
        /**
         * Gets or sets the {@link DataMap} used to convert raw values into display
         * values shown when editing this filter.
         */
        dataMap: wijmo.grid.DataMap;
        /**
         * Gets the {@link Column} to filter.
         */
        readonly column: wijmo.grid.Column;
        /**
         * Gets a value that indicates whether the filter is active.
         *
         * The filter is active if at least one of the two conditions
         * has its operator and value set to a valid combination.
         */
        readonly isActive: boolean;
        /**
         * Returns a value indicating whether a value passes this filter.
         *
         * @param value The value to test.
         */
        apply(value: any): boolean;
        /**
         * Clears the filter.
         */
        clear(): void;
        _hasDatePart(): boolean;
        _hasTimePart(): boolean;
        /**
         * Returns true if this object supports a given interface.
         *
         * @param interfaceName Name of the interface to look for.
         */
        implementsInterface(interfaceName: string): boolean;
    }
}
declare module wijmo.grid.filter {
    /**
     * The editor used to inspect and modify {@link ConditionFilter} objects.
     *
     * This class is used by the {@link FlexGridFilter} class; you
     * rarely use it directly.
     */
    class ConditionFilterEditor extends wijmo.Control {
        private _filter;
        private _cmb1;
        private _val1;
        private _cmb2;
        private _val2;
        private _divHdr;
        private _divCmb1;
        private _divVal1;
        private _divCmb2;
        private _divVal2;
        private _spAnd;
        private _spOr;
        private _btnAnd;
        private _btnOr;
        /**
         * Gets or sets the template used to instantiate {@link ConditionFilterEditor} controls.
         */
        static controlTemplate: string;
        /**
         * Initializes a new instance of the {@link ConditionFilterEditor} class.
         *
         * @param element The DOM element that hosts the control, or a selector
         * for the host element (e.g. '#theCtrl').
         * @param filter The {@link ConditionFilter} to edit.
         */
        constructor(element: any, filter: ConditionFilter);
        /**
         * Gets a reference to the {@link ConditionFilter} being edited.
         */
        readonly filter: ConditionFilter;
        /**
         * Updates editor with current filter settings.
         */
        updateEditor(): void;
        /**
         * Clears the editor without applying changes to the filter.
         */
        clearEditor(): void;
        /**
         * Gets a value that determines whether the editor has been cleared.
         */
        readonly isEditorClear: boolean;
        /**
         * Updates filter to reflect the current editor values.
         */
        updateFilter(): void;
        private _getComboValue;
        private _createOperatorCombo;
        private _createValueInput;
        private _btnAndOrChanged;
        private _checkRadio;
        private _keydown;
    }
}
declare module wijmo.grid.filter {
    /**
     * Defines a value filter for a column on a {@link FlexGrid} control.
     *
     * Value filters contain an explicit list of values that should be
     * displayed by the grid.
     */
    class ValueFilter implements IColumnFilter {
        private _col;
        private _values;
        private _filterText;
        private _xValueSearch;
        private _maxValues;
        private _uniqueValues;
        private _sortValues;
        private _map;
        /**
         * Initializes a new instance of the {@link ValueFilter} class.
         *
         * @param column The column to filter.
         */
        constructor(column: wijmo.grid.Column);
        /**
         * Gets or sets an object with the selected (checked) values on the
         * value list.
         *
         * If the filter is not active, this property is set to null and all
         * values present in the data source are shown on the list.
         *
         * If the filter is active (the user selected some values from the list
         * but not all), the {@link showValues} property is set to an object
         * whose property names are the display values of the selected values.
         *
         * For example, if the value list contains country names and the user
         * selected "US" and "Japan", the {@link showValues} property returns:
         *
         * ```javascript
         * { Japan: true, US: true }
         * ```
         */
        showValues: any;
        /**
         * Gets or sets a string used to filter the list of display values.
         */
        filterText: string;
        /**
         * Gets or sets a value that determines whether the filter should
         * include only values selected by the {@link filterText} property.
         *
         * This property is set to true by default, which matches Excel's
         * behavior.
         *
         * Set it to false to disable this behavior, so searching only affects
         * which items are displayed on the list and not which items are
         * included in the filter.
         */
        exclusiveValueSearch: boolean;
        /**
         * Gets or sets the maximum number of elements on the list of display values.
         *
         * Adding too many items to the list makes searching difficult and hurts
         * performance. This property limits the number of items displayed at any time,
         * but users can still use the search box to filter the items they are
         * interested in.
         *
         * This property is set to 250 by default.
         *
         * This code changes the value to 1,000,000, effectively listing all unique
         * values for the field:
         *
         * ```typescript
         * import { FlexGridFilter} from '@grapecity/wijmo.grid.filter';
         *
         * // change the maxItems property for the 'id' column:
         * let f = new FlexGridFilter(theGrid);
         * f.getColumnFilter('id').valueFilter.maxValues = 1000000;
         * ```
         */
        maxValues: number;
        /**
         * Gets or sets an array containing the unique values to be displayed on the list.
         *
         * If this property is set to null, the list will be filled based on the grid data.
         *
         * Explicitly assigning the list of unique values is more efficient than building
         * the list from the data, and is required for value filters to work properly when
         * the data is filtered on the server (because in this case some values might not
         * be present on the client so the list will be incomplete).
         *
         * By default, the filter editor will sort the unique values when displaying them
         * to the user. If you want to prevent that and show the values in the order you
         * provided, set the {@link sortValues} property to false.
         *
         * For example, the code below provides a list of countries to be used in the
         * {@link ValueFilter} for the column bound to the 'country' field:
         *
         * ```typescript
         * import { FlexGridFilter} from '@grapecity/wijmo.grid.filter';
         *
         * // create filter for a FlexGrid
         * let filter = new FlexGridFilter(grid);
         *
         * // assign list of unique values to country filter
         * let cf = filter.getColumnFilter('country');
         * cf.valueFilter.uniqueValues = ['Austria', 'Belgium', 'Chile', 'Denmark'];
         * ```
         */
        uniqueValues: any[];
        /**
         * Gets or sets a value that determines whether the values should be sorted
         * when displayed in the editor.
         *
         * This property is especially useful when you are using the {@link uniqueValues}
         * to provide a custom list of values property and you would like to preserve
         * the order of the values.
         */
        sortValues: boolean;
        /**
         * Gets or sets the {@link DataMap} used to convert raw values into display
         * values shown when editing this filter.
         */
        dataMap: wijmo.grid.DataMap;
        /**
         * Gets the {@link Column} to filter.
         */
        readonly column: wijmo.grid.Column;
        /**
         * Gets a value that indicates whether the filter is active.
         *
         * The filter is active if some values are selected and some are not.
         * If all values are in the same state (either selected or un-selected),
         * then the filter is not active.
         */
        readonly isActive: boolean;
        /**
         * Gets a value that indicates whether a value passes the filter.
         *
         * @param value The value to test.
         */
        apply(value: any): boolean;
        /**
         * Clears the filter.
         */
        clear(): void;
        /**
         * Gets an array containing objects that represent all unique values
         * for this {@link column}.
         *
         * The objects in the array returned contain two properties:
         * *value* (the data value) and *text* (the formatted data value).
         *
         * If the {@link uniqueValues} property is set to an array of values,
         * that array is used as a data source.
         *
         * If {@link uniqueValues} is null, the method scans all items in the
         * data source and returns an creates an array containing all unique
         * values.
         *
         * This method is used by the {@link ValueFilterEditor} class to
         * populate the list of values shown to users.
         *
         * @param filtered Whether to apply all other filters when retrieving
         * the values from the data source.
         */
        getUniqueValues(filtered?: boolean): any[];
        /**
         * Returns true if this object supports a given interface.
         *
         * @param interfaceName Name of the interface to look for.
         */
        implementsInterface(interfaceName: string): boolean;
    }
}
declare module wijmo.grid.filter {
    /**
     * The editor used to inspect and modify {@link ValueFilter} objects.
     *
     * This class is used by the {@link FlexGridFilter} class; you
     * rarely use it directly.
     */
    class ValueFilterEditor extends wijmo.Control {
        private _filter;
        private _toFilter;
        private _filterText;
        private _rxFilter;
        private _view;
        private _divFilter;
        private _cmbFilter;
        private _cbSelectAll;
        private _spSelectAll;
        private _divValues;
        private _lbValues;
        /**
         * Gets or sets the template used to instantiate {@link ColumnFilterEditor} controls.
         */
        static controlTemplate: string;
        /**
         * Initializes a new instance of the {@link ValueFilterEditor} class.
         *
         * @param element The DOM element that hosts the control, or a selector
         * for the host element (e.g. '#theCtrl').
         * @param filter The {@link ValueFilter} to edit.
         */
        constructor(element: any, filter: ValueFilter);
        /**
         * Gets a reference to the {@link ValueFilter} being edited.
         */
        readonly filter: ValueFilter;
        /**
         * Updates editor with current filter settings.
         */
        updateEditor(): void;
        /**
         * Clears the editor without applying changes to the filter.
         *
         * @param checkAll Whether to check or uncheck all values
         * (either way, the filter is not applied in this case).
         */
        clearEditor(checkAll?: boolean): void;
        /**
         * Gets a value that determines whether the editor has been cleared.
         */
        readonly isEditorClear: boolean;
        /**
         * Updates filter to reflect the current editor values.
         */
        updateFilter(): void;
        private _getItems;
        private _filterTextChanged;
        private _filterValues;
        private _cbSelectAllClicked;
        private _updateSelectAllCheck;
    }
}
declare module wijmo.grid.filter {
    /**
     * Defines a filter for a column on a {@link FlexGrid} control.
     *
     * The {@link ColumnFilter} contains a {@link ConditionFilter} and a
     * {@link ValueFilter}; only one of them may be active at a time.
     *
     * This class is used by the {@link FlexGridFilter} class; you
     * rarely use it directly.
     */
    class ColumnFilter implements IColumnFilter {
        private _owner;
        private _col;
        private _valueFilter;
        private _conditionFilter;
        private _filterType;
        /**
         * Initializes a new instance of the {@link ColumnFilter} class.
         *
         * @param owner The {@link FlexGridFilter} that owns this column filter.
         * @param column The {@link Column} to filter.
         */
        constructor(owner: FlexGridFilter, column: wijmo.grid.Column);
        /**
         * Gets or sets the types of filtering provided by this filter.
         *
         * Setting this property to null causes the filter to use the value
         * defined by the owner filter's {@link FlexGridFilter.defaultFilterType}
         * property.
         */
        filterType: FilterType;
        /**
         * Gets or sets the {@link DataMap} used to convert raw values into display
         * values shown when editing this filter.
         *
         * The example below assigns a {@link DataMap} to Boolean column filters
         * so the filter editor displays 'Yes' and 'No' instead of 'true' and 'false':
         *
         * ```typescript
         * import { FlexGridFilter } from '@grapecity/wijmo.grid.filter';
         * var filter = new FlexGridFilter(grid),
         *     map = new wijmo.grid.DataMap([
         *             { value: true, caption: 'Yes' },
         *             { value: false, caption: 'No' },
         *         ], 'value', 'caption');
         * for (var c = 0; c &lt; grid.columns.length; c++) {
         *     if (grid.columns[c].dataType == wijmo.DataType.Boolean) {
         *         filter.getColumnFilter(c).dataMap = map;
         *     }
         * }
         * ```
         */
        dataMap: wijmo.grid.DataMap;
        /**
         * Gets the {@link ValueFilter} in this {@link ColumnFilter}.
         */
        readonly valueFilter: ValueFilter;
        /**
         * Gets the {@link ConditionFilter} in this {@link ColumnFilter}.
         */
        readonly conditionFilter: ConditionFilter;
        /**
         * Gets the {@link Column} being filtered.
         */
        readonly column: wijmo.grid.Column;
        /**
         * Gets a value that indicates whether the filter is active.
         */
        readonly isActive: boolean;
        /**
         * Gets a value that indicates whether a value passes the filter.
         *
         * @param value The value to test.
         */
        apply(value: any): boolean;
        /**
         * Clears the filter.
         */
        clear(): void;
        /**
         * Returns true if this object supports a given interface.
         *
         * @param interfaceName Name of the interface to look for.
         */
        implementsInterface(interfaceName: string): boolean;
    }
}
declare module wijmo.grid.filter {
    /**
     * Specifies types of column filter.
     */
    enum FilterType {
        /** No filter. */
        None = 0,
        /** A filter based on two conditions. */
        Condition = 1,
        /** A filter based on a set of values. */
        Value = 2,
        /** A filter that combines condition and value filters. */
        Both = 3
    }
    /**
     * Implements an Excel-style filter for {@link FlexGrid} controls.
     *
     * To enable filtering on a {@link FlexGrid} control, create an instance
     * of the {@link FlexGridFilter} and pass the grid as a parameter to the
     * constructor. For example:
     *
     * ```typescript
     * import { FlexGrid } from '@grapecity/wijmo.grid';
     * import { FlexGridFilter } from '@grapecity/wijmo.grid.filter';
     * let flex = new FlexGrid('#theGrid'); // create the grid
     * let filter = new FlexGridFilter(flex); // add a filter to the grid
     * ```
     *
     * Once this is done, a filter icon is added to the grid's column headers.
     * Clicking the icon shows an editor where the user can edit the filter
     * conditions for that column.
     *
     * The {@link FlexGridFilter} class depends on the <b>wijmo.grid</b> and
     * <b>wijmo.input</b> modules.
     *
     * The example below shows how you can use a {@link FlexGridFilter} to add
     * filtering to a {@link FlexGrid} control:
     *
     * {@sample Grid/FilteringSearching/Excel-likeFilter/Overview/purejs Example}
     */
    class FlexGridFilter {
        static _WJC_FILTER: string;
        private _g;
        private _filters;
        private _filterColumns;
        private _divEdt;
        private _edtCol;
        private _edtColPrev;
        private _showIcons;
        private _showSort;
        private _defFilterType;
        private _xValueSearch;
        /**
         * Initializes a new instance of the {@link FlexGridFilter} class.
         *
         * @param grid The {@link FlexGrid} to filter.
         * @param options Initialization options for the {@link FlexGridFilter}.
         */
        constructor(grid: wijmo.grid.FlexGrid, options?: any);
        /**
         * Gets a reference to the {@link FlexGrid} that owns this filter.
         */
        readonly grid: wijmo.grid.FlexGrid;
        /**
         * Gets or sets an array containing the names or bindings of the columns
         * that have filters.
         *
         * Setting this property to null or to an empty array adds filters to
         * all columns.
         */
        filterColumns: string[];
        /**
         * Gets or sets a value indicating whether the {@link FlexGridFilter} adds filter
         * editing buttons to the grid's column headers.
         *
         * If you set this property to false, then you are responsible for providing
         * a way for users to edit, clear, and apply the filters.
         *
         * The default value for this property is <b>true</b>.
         */
        showFilterIcons: boolean;
        /**
         * Gets or sets a value indicating whether the filter editor should include
         * sort buttons.
         *
         * By default, the editor shows sort buttons like Excel does. But since users
         * can sort columns by clicking their headers, sort buttons in the filter editor
         * may not be desirable in some circumstances.
         *
         * The default value for this property is <b>true</b>.
         */
        showSortButtons: boolean;
        /**
         * Gets the filter for the given column.
         *
         * @param col The {@link Column} that the filter applies to (or column name or index).
         * If the specified column does not exist, the method returns null.
         * @param create Whether to create the filter if it does not exist.
         */
        getColumnFilter(col: wijmo.grid.Column | string | number, create?: boolean): ColumnFilter;
        /**
         * Gets or sets the default filter type to use.
         *
         * This value can be overridden in filters for specific columns.
         * For example, the code below creates a filter that filters by
         * conditions on all columns except the "ByValue" column:
         *
         * ```typescript
         * import { FlexGridFilter, FilterType } from '@grapecity/wijmo.grid.filter';
         * let filter = new FlexGridFilter(flex);
         * filter.defaultFilterType = FilterType.Condition;
         * let col = flex.getColumn('ByValue'),
         *     cf = filter.getColumnFilter(col);
         * cf.filterType = FilterType.Value;
         * ```
         *
         * The default value for this property is <b>FilterType.Both</b>.
         */
        defaultFilterType: FilterType;
        /**
         * Gets or sets a value that determines whether the filter should
         * include only values selected by the {@link ValueFilter.filterText}
         * property.
         *
         * This property is set to true by default, which matches Excel's
         * behavior.
         *
         * Set it to false to disable this behavior, so searching only affects
         * which items are displayed on the list and not which items are
         * included in the filter.
         */
        exclusiveValueSearch: boolean;
        /**
         * Gets or sets the current filter definition as a JSON string.
         *
         * The {@link filterDefinition} includes information about all
         * currently active column filters. It does not include data maps
         * because data maps are not serializable.
         */
        filterDefinition: string;
        /**
         * Gets the active {@link ColumnFilterEditor}.
         *
         * This property allows you to customize the filter editor when
         * handling the {@link filterChanging} event.
         * It returns null when no filters are being edited.
         */
        readonly activeEditor: ColumnFilterEditor;
        /**
         * Shows the filter editor for the given grid column.
         *
         * @param col The {@link Column} that contains the filter to edit.
         * @param ht A {@link wijmo.grid.HitTestInfo} object containing the range of the cell
         * that triggered the filter display.
         * @param ref An HTMLElement to use as a reference for positioning the editor.
         */
        editColumnFilter(col: any, ht?: wijmo.grid.HitTestInfo, ref?: HTMLElement): void;
        _setAriaExpanded(cell: HTMLElement, value: boolean): void;
        /**
         * Closes the filter editor.
         */
        closeEditor(): void;
        /**
         * Applies the current column filters to the grid.
         */
        apply(): void;
        /**
         * Clears all column filters.
         */
        clear(): void;
        /**
         * Occurs after the filter is applied.
         */
        readonly filterApplied: Event<FlexGridFilter, EventArgs>;
        /**
         * Raises the {@link filterApplied} event.
         */
        onFilterApplied(e?: wijmo.EventArgs): void;
        /**
         * Occurs when a column filter is about to be edited by the user.
         *
         * Use this event to customize the column filter if you want to
         * override the default settings for the filter.
         *
         * For example, the code below sets the operator used by the filter
         * conditions to 'contains' if they are null:
         *
         * ```typescript
         * import { FilterType, Operator } from '@grapecty/wijmo.grid.filter';
         * filter.filterChanging.addHandler((s, e) => {
         *     let cf = filter.getColumnFilter(e.col);
         *     if (!cf.valueFilter.isActive && cf.conditionFilter.condition1.operator == null) {
         *         cf.filterType = FilterType.Condition;
         *         cf.conditionFilter.condition1.operator = Operator.CT;
         *     }
         * });
         * ```
         */
        readonly filterChanging: Event<FlexGridFilter, CellRangeEventArgs>;
        /**
         * Raises the {@link filterChanging} event.
         *
         * @param e {@link CellRangeEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onFilterChanging(e: wijmo.grid.CellRangeEventArgs): boolean;
        /**
         * Occurs after a column filter has been edited by the user.
         *
         * Use the event parameters to determine the column that owns
         * the filter and whether changes were applied or canceled.
         */
        readonly filterChanged: Event<FlexGridFilter, CellRangeEventArgs>;
        /**
         * Raises the {@link filterChanged} event.
         */
        onFilterChanged(e: wijmo.grid.CellRangeEventArgs): void;
        _asColumn(col: wijmo.grid.Column | string | number): wijmo.grid.Column;
        private _filter;
        private _formatItem;
        _addFilterButton(col: wijmo.grid.Column, cf: ColumnFilter, cell: HTMLElement): void;
        _mousedown(e: MouseEvent): void;
        _click(e: MouseEvent): void;
        private _toggleEditor;
        _keydown(e: KeyboardEvent): void;
    }
}
declare module wijmo.grid.filter {
    /**
     * The editor used to inspect and modify column filters.
     *
     * This class is used by the {@link FlexGridFilter} class; you
     * rarely use it directly.
     */
    class ColumnFilterEditor extends wijmo.Control {
        private _filter;
        private _edtVal;
        private _edtCnd;
        private _wasTouching;
        private _divSort;
        private _btnAsc;
        private _btnDsc;
        private _divType;
        private _aCnd;
        private _aVal;
        private _divEdtVal;
        private _divEdtCnd;
        private _btnApply;
        private _btnCancel;
        private _btnClear;
        /**
         * Gets or sets the template used to instantiate {@link ColumnFilterEditor} controls.
         */
        static controlTemplate: string;
        /**
         * Initializes a new instance of the {@link ColumnFilterEditor} class.
         *
         * @param element The DOM element that hosts the control, or a selector
         * for the host element (e.g. '#theCtrl').
         * @param filter The {@link ColumnFilter} to edit.
         * @param sortButtons Whether to show sort buttons in the editor.
         */
        constructor(element: any, filter: ColumnFilter, sortButtons?: boolean);
        /**
         * Gets a reference to the {@link ColumnFilter} being edited.
         */
        readonly filter: ColumnFilter;
        /**
         * Updates editor with current filter settings.
         */
        updateEditor(): void;
        /**
         * Updates filter with current editor settings.
         */
        updateFilter(): void;
        /**
         * Occurs after the filter is modified.
         */
        readonly filterChanged: Event<ColumnFilterEditor, EventArgs>;
        /**
         * Raises the {@link filterChanged} event.
         */
        onFilterChanged(e?: wijmo.EventArgs): void;
        /**
         * Occurs when one of the editor buttons is clicked.
         */
        readonly buttonClicked: Event<ColumnFilterEditor, EventArgs>;
        /**
         * Raises the {@link buttonClicked} event.
         */
        onButtonClicked(e?: wijmo.EventArgs): void;
        _showFilter(filterType: FilterType): void;
        private _enableLink;
        private _updateSortButtonState;
        private _getFilterType;
        private _btnClicked;
    }
}
declare module wijmo.grid.filter {
}

declare module wijmo.grid.grouppanel {
    function softGridFilter(): typeof wijmo.grid.filter;
}
declare module wijmo.grid.grouppanel {
    /**
     * Represents a method that takes a binding and returns a {@link:GroupDescription}.
     */
    interface IGroupDescriptionCreator {
        /**
         * @param: property Name of the property to group by.
         * @returns A {@link GroupDescription} object used to create the groups.
         */
        (property: string): wijmo.collections.GroupDescription;
    }
    /**
     * The {@link GroupPanel} control provides a drag and drop UI for editing
     * groups in a bound {@link FlexGrid} control.
     *
     * It allows users to drag columns from the {@link FlexGrid} into the
     * panel and to move groups within the panel. Users may click the
     * group markers in the panel to sort based on the group column or to
     * remove groups.
     *
     * In order to use a {@link GroupPanel}, add it to a page that contains a
     * {@link FlexGrid} control and set the panel's {@link grid} property to the
     * {@link FlexGrid} control. For example:
     *
     * ```typescript
     * import { FlexGrid } from '@grapecity/wijmo.grid';
     * import { GroupPanel } from '@grapecity/wijmo.grid.grouppanel';
     *
     * // create a FlexGrid
     * let theGrid = new FlexGrid('#theGrid', {
     *     itemsSource: getData();
     * });
     *
     * // add a GroupPanel to edit data groups
     * let thePanel = new GroupPanel('#thePanel', {
     *     grid: theGrid,
     *     placeholder: 'Drag columns here to create groups.'
     * });
     * ```
     *
     * The example below shows how you can use a {@link GroupPanel} control to
     * add Outlook-style grouping to a {@link FlexGrid} control:
     *
     * {@sample Grid/Grouping/GroupPanel/purejs Example}
     */
    class GroupPanel extends wijmo.Control {
        _g: any;
        _view: wijmo.collections.ICollectionView;
        _gds: wijmo.collections.ObservableArray<wijmo.collections.GroupDescription>;
        _hideGroupedCols: boolean;
        _showDragGlyphs: boolean;
        _maxGroups: number;
        _dragCol: wijmo.grid.Column;
        _dragMarker: HTMLElement;
        _divMarkers: HTMLElement;
        _divPH: HTMLElement;
        _hiddenCols: any[];
        _filter: wijmo.grid.filter.FlexGridFilter;
        _filterMarker: HTMLElement;
        _gdc: IGroupDescriptionCreator;
        /**
         * Gets or sets the template used to instantiate {@link GroupPanel} controls.
         */
        static controlTemplate: string;
        /**
         * Initializes a new instance of the {@link GroupPanel} class.
         *
         * @param element The DOM element that hosts the control, or a CSS selector for the host element (e.g. '#theCtrl').
         * @param options The JavaScript object containing initialization data for the control.
         */
        constructor(element: any, options?: any);
        /**
         * Gets or sets a value indicating whether the panel hides grouped columns in the owner grid.
         *
         * The {@link FlexGrid} displays grouping information in row headers, so it is
         * usually a good idea to hide grouped columns since they display redundant
         * information.
         *
         * The default value for this property is <b>true</b>.
         */
        hideGroupedColumns: boolean;
        /**
         * Gets or sets a value that determines whether the control should
         * add drag glyphs to the group marker elements.
         *
         * The default value for this property is <b>true</b>.
         */
        showDragGlyphs: boolean;
        /**
         * Gets or sets the maximum number of groups allowed.
         *
         * Setting this property to -1 allows any number of groups
         * to be created. Setting it to zero prevents any grouping.
         *
         * The default value for this property is <b>6</b>.
         */
        maxGroups: number;
        /**
         * Gets or sets a string to display in the control when it contains no groups.
         *
         * The default value for this property is a localized version of the string
         * "Drag and Drop columns here to create groups."
         *
         * Set this property to a custom string if you want, or set it to an empty
         * string to remove the placeholder message, or set it to null to restore
         * the default message.
         */
        placeholder: string;
        /**
         * Gets or sets the {@link FlexGrid} that is connected to this {@link GroupPanel}.
         *
         * Once a grid is connected to the panel, the panel displays the groups
         * defined in the grid's data source. Users can drag grid columns
         * into the panel to create new groups, drag groups within the panel to
         * re-arrange the groups, or delete items in the panel to remove the groups.
         */
        grid: wijmo.grid.FlexGrid;
        /**
         * Gets or sets the {@link wijmo.grid.filter.FlexGridFilter} to use for filtering
         * the grid data.
         *
         * If you set this property to a valid filter, the group descriptors will
         * display filter icons that can be used to see and edit the filer conditions
         * associated with the groups.
         */
        filter: wijmo.grid.filter.FlexGridFilter;
        /**
         * Gets or sets a {@link GroupDescription} creator function used to create
         * group descriptions when users drag columns into the group.
         *
         * For example, the code below defines a {@link groupDescriptionCreator}
         * function that groups dates by year and values in ranges:
         *
         * ```typescript
         * thePanel.groupDescriptionCreator = (prop: string) => {
         *     switch (prop) {
         *         case 'date':
         *             return new PropertyGroupDescription(prop, (item, prop) => {
         *                 return Globalize.formatDate(item[prop], 'yyyy');
         *             });
         *         case 'sales':
         *             return new PropertyGroupDescription(prop, (item, prop) => {
         *                 let value = item[prop];
         *                 if (value > 50000) return 'High';
         *                 if (value > 25000) return 'Medium';
         *                 return 'Low';
         *             });
         *     }
         *     return null; // default
         * }
         * ```
         */
        groupDescriptionCreator: IGroupDescriptionCreator;
        /**
         * Updates the panel to show the current groups.
         */
        refresh(): void;
        _filterChanged(): void;
        _getColumnFilter(col: wijmo.grid.Column): any;
        _editFilter(marker: HTMLElement): void;
        _addGroup(col: wijmo.grid.Column, e: MouseEvent): void;
        _moveGroup(marker: HTMLElement, e: MouseEvent): void;
        _removeGroup(index: number, groups?: collections.ObservableArray<collections.GroupDescription>): void;
        _getIndex(e: MouseEvent): number;
        _getElementIndex(e: HTMLElement): number;
        _draggingColumn(s: wijmo.grid.FlexGrid, e: wijmo.grid.CellRangeEventArgs): void;
        _itemsSourceChanging(s: wijmo.grid.FlexGrid, e: wijmo.EventArgs): void;
        _itemsSourceChanged(s: wijmo.grid.FlexGrid, e: wijmo.EventArgs): void;
        _collectionChanged(sender: any, e: wijmo.collections.NotifyCollectionChangedEventArgs): void;
        _dragStart(e: DragEvent): void;
        _dragOver(e: DragEvent): void;
        _drop(e: DragEvent): void;
        _dragEnd(e: DragEvent): void;
        _click(e: MouseEvent): void;
        _updateSort(e: MouseEvent, marker: HTMLElement): void;
    }
}
declare module wijmo.grid.grouppanel {
}

declare module wijmo.grid.detail {
    /**
     * Row that contains a single detail cell spanning all grid columns.
     */
    class DetailRow extends wijmo.grid.Row {
        _detail: HTMLElement;
        /**
         * Initializes a new instance of the {@link DetailRow} class.
         *
         * @param parentRow {@link Row} that this {@link DetailRow} provides details for.
         */
        constructor(parentRow: wijmo.grid.Row);
        /**
         * Gets or sets the HTML element that represents the detail cell in this {@link DetailRow}.
         */
        detail: HTMLElement;
    }
}
declare module wijmo.grid.detail {
    /**
     * Merge manager class used by the {@link FlexGridDetailProvider} class.
     *
     * The {@link DetailMergeManager} merges detail cells (cells in a {@link DetailRow})
     * into a single detail cell that spans all grid columns.
     */
    class DetailMergeManager extends wijmo.grid.MergeManager {
        /**
         * Initializes a new instance of the {@link DetailMergeManager} class.
         *
         * @param grid The {@link FlexGrid} object that owns this {@link DetailMergeManager}.
         */
        constructor(grid: wijmo.grid.FlexGrid);
        /**
         * Gets a {@link CellRange} that specifies the merged extent of a cell
         * in a {@link GridPanel}.
         *
         * @param p The {@link GridPanel} that contains the range.
         * @param r The index of the row that contains the cell.
         * @param c The index of the column that contains the cell.
         * @param clip Whether to clip the merged range to the grid's current view range.
         * @return A {@link CellRange} that specifies the merged range, or null if the cell is not merged.
         */
        getMergedRange(p: wijmo.grid.GridPanel, r: number, c: number, clip?: boolean): wijmo.grid.CellRange;
    }
}
declare module wijmo.grid.detail {
    /**
     * Specifies constants that define the action to perform when the
     * ENTER key is pressed.
     */
    enum KeyAction {
        /** No special action (let the grid handle the key). */
        None = 0,
        /** Toggle the detail display. */
        ToggleDetail = 1
    }
    /**
     * Specifies when and how the row details are displayed.
     */
    enum DetailVisibilityMode {
        /**
         * Details are shown or hidden in code, using the
         * {@link FlexGridDetailProvider.showDetail} and
         * {@link FlexGridDetailProvider.hideDetail} methods.
         */
        Code = 0,
        /**
         * Details are shown for the row that is currently selected.
         */
        Selection = 1,
        /**
         * Details are shown or hidden using buttons added to the row headers.
         * Only one row may be expanded at a time.
         */
        ExpandSingle = 2,
        /**
         * Details are shown or hidden using buttons added to the row headers.
         * Multiple rows may be expanded at a time.
         */
        ExpandMulti = 3
    }
    /**
     * Represents a method that takes a {@link Row} and returns an HTMLElement
     * containing details about the row.
     */
    interface ICreateDetailCell {
        /**
         * @param row {@link Row} that contains the details.
         * @param col {@link Column} that contains the details.
         * @returns Element with details about the row.
         */
        (row: wijmo.grid.Row, col?: wijmo.grid.Column): HTMLElement;
    }
    /**
     * Represents a method that takes a {@link Row} and disposes of detail
     * elements associated with the row.
     */
    interface IDisposeDetailCell {
        /**
         * @param row {@link Row} that contains details that were just removed from view.
         * @returns Returning true will prevent {@link FlexGridDetailProvider} from
         * disposing controls in details. Can be used if all the disposing logic is
         * fulfilled by the method.
         */
        (row: wijmo.grid.Row): boolean | void;
    }
    /**
     * Represents a method that takes a {@link Row} and returns true if
     * the row has details that can be displayed.
     */
    interface IRowHasDetail {
        /**
         * @param row {@link Row} on the main grid.
         * @returns true if the row has details that can be shown.
         */
        (row: wijmo.grid.Row): boolean;
    }
    /**
     * Implements detail rows for {@link FlexGrid} controls.
     *
     * To add detail rows to a {@link FlexGrid} control, create an instance of a
     * {@link FlexGridDetailProvider} and set the {@link createDetailCell} property
     * to a function that creates elements to be displayed in the detail cells.
     *
     * For example:
     *
     * ```typescript
     * import { FlexGrid } from '@grapecity/wijmo.grid';
     * import { FlexGridDetailProvider } from '@grapecity/wijmo.grid.detail';
     *
     * // create FlexGrid to show categories
     * let gridCat = new FlexGrid('#gridCat', {
     *     itemsSource: getCategories();
     * });
     *
     * // add detail rows showing products in each category
     * let detailProvider = new FlexGridDetailProvider(gridCat, {
     *     createDetailCell: (row) => {
     *         let cell = document.createElement('div');
     *         new FlexGrid(cell, {
     *             itemsSource: getProducts(row.dataItem.CategoryID)
     *         });
     *         return cell;
     *     }
     * });
     * ```
     *
     * The {@link FlexGridDetailProvider} provides a {@link detailVisibilityMode} property
     * that determines when the detail rows should be displayed. The default value for
     * this property is <b>ExpandSingle</b>, which adds collapse/expand icons to the
     * row headers.
     *
     * The example below shows how you can use a {@link FlexGridDetailProvider} to add
     * different types of detail to the rows in a {@link FlexGrid}:
     *
     * {@sample Grid/Rows/RowDetail/Overview/purejs Example}
     */
    class FlexGridDetailProvider {
        static _WJC_DETAIL: string;
        _g: wijmo.grid.FlexGrid;
        _maxHeight: number;
        _mode: DetailVisibilityMode;
        _animated: boolean;
        _toSel: any;
        _createDetailCellFn: ICreateDetailCell;
        _disposeDetailCellFn: IDisposeDetailCell;
        _rowHasDetailFn: IRowHasDetail;
        _keyActionEnter: KeyAction;
        /**
         * Initializes a new instance of the {@link FlexGridDetailProvider} class.
         *
         * @param grid {@link FlexGrid} that will receive detail rows.
         * @param options Initialization options for the new {@link FlexGridDetailProvider}.
         */
        constructor(grid: wijmo.grid.FlexGrid, options?: any);
        /**
         * Gets the {@link FlexGrid} that owns this {@link FlexGridDetailProvider}.
         */
        readonly grid: wijmo.grid.FlexGrid;
        /**
         * Gets or sets a value that determines when row details are displayed.
         *
         * The default value for this property is <b>DetailVisibilityMode.ExpandSingle</b>.
         */
        detailVisibilityMode: DetailVisibilityMode;
        /**
         * Gets or sets the maximum height of the detail rows, in pixels.
         *
         * The default value for this property is <b>null</b>, which means
         * there's no upper limit to the detail row height.
         */
        maxHeight: number;
        /**
         * Gets or sets a value that indicates whether to use animation when
         * showing row details.
         *
         * The default value for this property is <b>false</b>.
         */
        isAnimated: boolean;
        /**
         * Gets or sets the action to perform when the ENTER key is pressed.
         *
         * The default setting for this property is {@link KeyAction.None},
         * which lets the grid handle the key.
         * The other option is {@link KeyAction.ToggleDetail}, which handles
         * the Enter key to toggle the display of the row details.
         */
        keyActionEnter: KeyAction;
        /**
         * Gets or sets the callback function that creates detail cells.
         *
         * The callback function takes a {@link Row} as a parameter and
         * returns an HTML element representing the row details.
         * For example:
         *
         * ```typescript
         * // create detail cells for a given row
         * dp.createDetailCell = (row) => {
         *     let cell = document.createElement('div');
         *     new FlexGrid(cell, {
         *         itemsSource: getProducts(row.dataItem.CategoryID),
         *         headersVisibility: 'Column'
         *     });
         *     return cell;
         * };
         * ```
         */
        createDetailCell: ICreateDetailCell;
        /**
         * Gets or sets the callback function that disposes of detail cells.
         *
         * The callback function takes a {@link Row} as a parameter and
         * disposes of any resources associated with the detail cell.
         *
         * This function is optional. Use it in cases where the
         * {@link createDetailCell} function allocates resources that are not
         * automatically garbage-collected.
         */
        disposeDetailCell: IDisposeDetailCell;
        /**
         * Gets or sets the callback function that determines whether a row
         * has details.
         *
         * The callback function takes a {@link Row} as a parameter and
         * returns a boolean value that indicates whether the row has
         * details. For example:
         *
         * ```typescript
         * // remove details from items with odd CategoryID
         * dp.rowHasDetail = (row) => {
         *     return row.dataItem.CategoryID % 2 == 0;
         * };
         * ```
         *
         * Setting this property to null means all regular data
         * rows (not group rows or new item templates) have details.
         */
        rowHasDetail: IRowHasDetail;
        /**
         * Gets the detail row associated with a given grid row.
         *
         * @param row Row or index of the row to investigate.
         */
        getDetailRow(row: any): DetailRow;
        /**
         * Gets a value that determines if a row's details are visible.
         *
         * @param row Row or index of the row to investigate.
         */
        isDetailVisible(row: any): boolean;
        /**
         * Gets a value that determines if a row has details to show.
         *
         * @param row Row or index of the row to investigate.
         */
        isDetailAvailable(row: any): boolean;
        /**
         * Hides the detail row for a given row.
         *
         * @param row {@link Row} or index of the row that will have its details hidden.
         * This parameter is optional. If not provided, all detail rows are hidden.
         */
        hideDetail(row?: wijmo.grid.Row | number): void;
        /**
         * Shows the detail row for a given row.
         *
         * @param row {@link Row} or index of the row that will have its details shown.
         * @param hideOthers Whether to hide details for all other rows.
         */
        showDetail(row: wijmo.grid.Row | number, hideOthers?: boolean): void;
        _sizeDetailRow(row: DetailRow): void;
        _handleFrozenCells(): void;
        _toIndex(row: any): number;
        _hdrClick(e: MouseEvent): void;
        _toggleRowDetail(row: number): boolean;
        _selectionChanged(s: wijmo.grid.FlexGrid, e: wijmo.EventArgs): void;
        _formatItem(s: any, e: wijmo.grid.FormatItemEventArgs): void;
        _resizedRow(s: any, e: wijmo.grid.CellRangeEventArgs): void;
        _hasDetail(row: number): boolean;
        _isRegularRow(row: wijmo.grid.Row): boolean;
        _createDetailCell(row: wijmo.grid.Row): HTMLElement;
    }
}
declare module wijmo.grid.detail {
}

declare module wijmo.grid.transposed {
    /**
     * Extends the {@link FlexGrid} control to display data using a transposed
     * layout, where columns represent data items and rows represent item
     * properties.
     *
     * Features based on regular (non-transposed) data sources only apply to the
     * original data source, so you can sort, filter, group, or paginate items before
     * assigning them to the {@link TransposedGrid}, but if you later change those
     * parameters, the grid will not be automatically updated.
     *
     * Also, some regular {@link FlexGrid} features are not available in the
     * {@link TransposedGrid} because they don't make sense with transposed data
     * sources.
     *
     * For example, adding or removing rows in a transposed grid would mean adding
     * or removing properties to the data items. For this reason, the {@link allowAddNew}
     * and {@link allowDelete} properties are disabled.
     *
     * Also, the {@link autoGenerateColumns} property has no effect on the
     * {@link TransposedGrid}, which has an {@link autoGenerateRows} property instead.
     */
    class TransposedGrid extends wijmo.grid.FlexGrid {
        protected _view: wijmo.collections.ICollectionView;
        protected _keyPrefix: string;
        protected _autoGenRows: boolean;
        protected _toRowInfo: any;
        _rowInfo: wijmo.grid.ColumnCollection;
        /**
         * Initializes a new instance of the {@link TransposedGrid} class.
         *
         * @param element The DOM element that hosts the control, or a CSS selector for the host element (e.g. '#theCtrl').
         * @param options JavaScript object containing initialization data for the control.
         */
        constructor(element: any, options?: any);
        /**
         * Gets or sets a value that determines whether the grid should generate
         * rows automatically based on the {@link itemsSource}.
         *
         * The default value for this property is <b>true</b>.
         */
        autoGenerateRows: boolean;
        refresh(fullUpdate?: boolean): void;
        allowAddNew: boolean;
        allowDelete: boolean;
        onRowEditEnded(e: wijmo.grid.CellRangeEventArgs): void;
        protected _getCollectionView(value: any): wijmo.collections.ICollectionView;
        _getColumnTypes(arr: any[]): wijmo.IBindingInfo[];
        _copy(key: string, value: any): boolean;
        onLoadedRows(e?: wijmo.EventArgs): void;
        _getBindingColumn(p: wijmo.grid.GridPanel, r: number, c: wijmo.grid.Column): wijmo.grid.Column;
        private _copyProps;
        _rowInfoChanged(): void;
        _sourceViewChanged(sender: wijmo.collections.ICollectionView, e: wijmo.collections.NotifyCollectionChangedEventArgs): void;
        _transposeItemsSource(arr: any[]): wijmo.collections.ObservableArray;
        _supportsProxies(): boolean;
        _createProxy(arr: any[], rowInfo: any, proxyKeys: string[]): any;
        _createTransposedObject(arr: any[], rowInfo: any, keyPrefix: string): {
            _arr: any[];
            _rowInfo: any;
        };
        _getRowInfo(arr: any[]): any[];
    }
    /**
     * This class is for internal use only.
     */
    class TransposedGridRow extends wijmo.grid.Column {
    }
}
declare module wijmo.grid.transposed {
}

declare module wijmo.input {
    /**
     * The {@link InputNumber} control allows users to enter numbers.
     *
     * The control prevents users from accidentally entering invalid data and
     * formats the number as it is edited.
     *
     * Pressing the minus key reverses the sign of the value being edited,
     * regardless of cursor position.
     *
     * You may use the {@link min} and {@link max} properties to limit the range of
     * acceptable values, and the {@link step} property to provide spinner buttons
     * that increase or decrease the value with a click.
     *
     * For details about using the {@link min} and {@link max} properties, please see
     * the <a href="/wijmo/docs/Topics/Input/Using-Min-Max">Using the min and max properties</a> topic.
     *
     * Use the {@link value} property to get or set the currently selected number.
     *
     * The example below creates several {@link InputNumber} controls and shows
     * the effect of using different formats.
     *
     * {@sample Input/InputNumber/Formatting/purejs Example}
     */
    class InputNumber extends wijmo.Control {
        _tbx: HTMLInputElement;
        _btnUp: HTMLElement;
        _btnDn: HTMLElement;
        _value: number;
        _min: number;
        _max: number;
        _format: string;
        _step: number;
        _showBtn: boolean;
        _readOnly: boolean;
        _oldText: string;
        _oldValue: number;
        _composing: boolean;
        _chrDec: string;
        _chrCur: string;
        _chrNeg: string;
        _chrPls: string;
        _chrPct: string;
        _chrTho: string;
        _fmtSpc: string;
        _fmtPrc: number;
        _rxSym: RegExp;
        _rxNeg: RegExp;
        _delKey: boolean;
        _rptUp: wijmo._ClickRepeater;
        _rptDn: wijmo._ClickRepeater;
        /**
         * Gets or sets the template used to instantiate {@link InputNumber} controls.
         */
        static controlTemplate: string;
        /**
         * Initializes a new instance of the {@link InputNumber} class.
         *
         * @param element The DOM element that hosts the control, or a CSS selector for the host element (e.g. '#theCtrl').
         * @param options The JavaScript object containing initialization data for the control.
         */
        constructor(element: any, options?: any);
        /**
         * Gets the HTML input element hosted by the control.
         *
         * Use this property in situations where you want to customize the
         * attributes of the input element.
         */
        readonly inputElement: HTMLInputElement;
        /**
         * Gets or sets the "type" attribute of the HTML input element hosted by the control.
         *
         * By default, this property is set to "tel", a value that causes mobile devices to
         * show a numeric keypad that includes a negative sign and a decimal separator.
         *
         * Use this property to change the default setting if the default does not work well
         * for the current culture, device, or application. In those cases, try changing
         * the value to "number" or "text."
         *
         * Note that input elements with type "number" prevent selection in Chrome and
         * therefore that type is not recommended. For more details, see this link:
         * https://stackoverflow.com/questions/21177489/selectionstart-selectionend-on-input-type-number-no-longer-allowed-in-chrome
         */
        inputType: string;
        /**
         * Gets or sets the current value of the control.
         */
        value: number;
        /**
         * Gets or sets a value indicating whether the control value must be
         * a number or whether it can be set to null (by deleting the content
         * of the control).
         *
         * The default value for this property is <b>true</b>.
         */
        isRequired: boolean;
        /**
         * Gets or sets a value that indicates whether the user can modify
         * the control value using the mouse and keyboard.
         *
         * The default value for this property is <b>false</b>.
         */
        isReadOnly: boolean;
        /**
         * Gets or sets the smallest number that the user can enter.
         *
         * For details about using the {@link min} and {@link max} properties, please see the
         * <a href="/wijmo/docs/Topics/Input/Using-Min-Max">Using the min and max properties</a> topic.
         */
        min: number;
        /**
         * Gets or sets the largest number that the user can enter.
         *
         * For details about using the {@link min} and {@link max} properties, please see the
         * <a href="/wijmo/docs/Topics/Input/Using-Min-Max">Using the min and max properties</a> topic.
         */
        max: number;
        /**
         * Gets or sets the amount to add or subtract to the {@link value} property
         * when the user clicks the spinner buttons.
         */
        step: number;
        /**
         * Gets or sets the format used to display the number being edited (see {@link Globalize}).
         *
         * The format string is expressed as a .NET-style
         * <a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings" target="_blank">
         * standard numeric format string</a>.
         */
        format: string;
        /**
         * Gets or sets the text shown in the control.
         */
        text: string;
        /**
         * Gets or sets the string shown as a hint when the control is empty.
         */
        placeholder: string;
        /**
         * Gets or sets a value indicating whether the control displays spinner buttons
         * to increment or decrement the value (the step property must be set to a
         * value other than zero).
         *
         * The default value for this property is <b>true</b>.
         */
        showSpinner: boolean;
        /**
         * Gets or sets a value that determines whether the spinner buttons
         * should act as repeat buttons, firing repeatedly as long as the
         * button remains pressed.
         *
         * The default value for this property is <b>true</b>.
         */
        repeatButtons: boolean;
        /**
         * Sets the focus to the control and selects all its content.
         */
        selectAll(): void;
        /**
         * Returns a value within the range defined by the {@link min} and {@link max}
         * properties.
         *
         * @param value Value to clamp.
         */
        clamp(value: number): number;
        /**
         * Occurs when the value of the {@link text} property changes.
         */
        readonly textChanged: Event<InputNumber, EventArgs>;
        /**
         * Raises the {@link textChanged} event.
         */
        onTextChanged(e?: wijmo.EventArgs): void;
        /**
         * Occurs when the value of the {@link value} property changes, either
         * as a result of user actions or by assignment in code.
         */
        readonly valueChanged: Event<any, EventArgs>;
        /**
         * Raises the {@link valueChanged} event.
         */
        onValueChanged(e?: wijmo.EventArgs): void;
        dispose(): void;
        onGotFocus(e: wijmo.EventArgs): void;
        onLostFocus(e?: wijmo.EventArgs): void;
        refresh(fullUpdate?: boolean): void;
        private _updateSymbols;
        private _isNumeric;
        private _getInputRange;
        private _flipSign;
        private _getSelStartDigits;
        private _setSelStartDigits;
        private _increment;
        protected _updateBtn(): void;
        protected _setText(text: string): void;
        protected _keypress(e: KeyboardEvent): void;
        protected _keydown(e: KeyboardEvent): void;
        protected _input(): void;
        protected _clickSpinner(e: MouseEvent): void;
        protected _updateAria(): void;
    }
}
declare module wijmo.input {
    /**
     * The {@link InputMask} control provides a way to govern what a user is allowed
     * to enter.
     *
     * The control prevents users from accidentally entering invalid data and
     * saves time by skipping over literals (such as slashes in dates) as the
     * user types.
     *
     * The mask used to validate the input is defined by the {@link InputMask.mask}
     * property, which may contain one or more of the following special
     * characters:
     *
     *  <dl class="dl-horizontal">
     *      <dt>0</dt>      <dd>Digit.</dd>
     *      <dt>9</dt>      <dd>Digit or space.</dd>
     *      <dt>#</dt>      <dd>Digit, sign, or space.</dd>
     *      <dt>L</dt>      <dd>Letter.</dd>
     *      <dt>l</dt>      <dd>Letter or space.</dd>
     *      <dt>A</dt>      <dd>Alphanumeric.</dd>
     *      <dt>a</dt>      <dd>Alphanumeric or space.</dd>
     *      <dt>.</dt>      <dd>Localized decimal point.</dd>
     *      <dt>,</dt>      <dd>Localized thousand separator.</dd>
     *      <dt>:</dt>      <dd>Localized time separator.</dd>
     *      <dt>/</dt>      <dd>Localized date separator.</dd>
     *      <dt>$</dt>      <dd>Localized currency symbol.</dd>
     *      <dt>&lt;</dt>   <dd>Converts characters that follow to lowercase.</dd>
     *      <dt>&gt;</dt>   <dd>Converts characters that follow to uppercase.</dd>
     *      <dt>|</dt>      <dd>Disables case conversion.</dd>
     *      <dt>\</dt>      <dd>Escapes any character, turning it into a literal.</dd>
     *      <dt>９ (\uff19)</dt>    <dd>DBCS Digit.</dd>
     *      <dt>Ｊ (\uff2a)</dt>    <dd>DBCS Hiragana.</dd>
     *      <dt>Ｇ (\uff27)</dt>    <dd>DBCS big Hiragana.</dd>
     *      <dt>Ｋ (\uff2b)</dt>    <dd>DBCS Katakana. </dd>
     *      <dt>Ｎ (\uff2e)</dt>    <dd>DBCS big Katakana.</dd>
     *      <dt>K</dt>              <dd>SBCS Katakana.</dd>
     *      <dt>N</dt>              <dd>SBCS big Katakana.</dd>
     *      <dt>Ｚ (\uff3a)</dt>    <dd>Any DBCS character.</dd>
     *      <dt>H</dt>              <dd>Any SBCS character.</dd>
     *      <dt>All others</dt>     <dd>Literals.</dd>
     *  </dl>
     *
     * The example below shows how you can use the {@link InputMask} control to
     * edit strings with custom formats:
     *
     * {@sample Input/InputMask/Overview Example}
     */
    class InputMask extends wijmo.Control {
        _tbx: HTMLInputElement;
        _oldValue: string;
        _msk: wijmo._MaskProvider;
        /**
         * Gets or sets the template used to instantiate {@link InputMask} controls.
         */
        static controlTemplate: string;
        /**
         * Initializes a new instance of the {@link InputMask} class.
         *
         * @param element The DOM element that hosts the control, or a CSS selector for the host element (e.g. '#theCtrl').
         * @param options The JavaScript object containing initialization data for the control.
         */
        constructor(element: any, options?: any);
        /**
         * Gets the HTML input element hosted by the control.
         *
         * Use this property in situations where you want to customize the
         * attributes of the input element.
         */
        readonly inputElement: HTMLInputElement;
        /**
         * Gets or sets the "type" attribute of the HTML input element hosted
         * by the control.
         *
         * The default value for this property is <b>text</b>.
         */
        inputType: string;
        /**
         * Gets or sets the text currently shown in the control.
         */
        value: string;
        /**
         * Gets or sets the raw value of the control (excluding mask literals).
         *
         * The raw value of the control excludes prompt and literal characters.
         * For example, if the {@link mask} property is set to "AA-9999" and the
         * user enters the value "AB-1234", the {@link rawValue} property will
         * return "AB1234", excluding the hyphen that is part of the mask.
         */
        rawValue: string;
        /**
         * Gets or sets the mask used to validate the input as the user types.
         *
         * The mask is defined as a string with one or more of the masking
         * characters listed in the {@link InputMask} topic.
         */
        mask: string;
        /**
         * Gets or sets the symbol used to show input positions in the control.
         */
        promptChar: string;
        /**
         * Gets or sets the string shown as a hint when the control is empty.
         */
        placeholder: string;
        /**
         * Gets a value that indicates whether the mask has been completely filled.
         */
        readonly maskFull: boolean;
        /**
         * Gets or sets a value indicating whether the control value
         * must be a non-empty string.
         *
         * The default value for this property is <b>true</b>.
         */
        isRequired: boolean;
        /**
         * Gets or sets a value that indicates whether the user can modify
         * the control value using the mouse and keyboard.
         *
         * The default value for this property is <b>false</b>.
         */
        isReadOnly: boolean;
        /**
         * Sets the focus to the control and selects all its content.
         */
        selectAll(): void;
        /**
         * Occurs when the value of the {@link value} property changes, either
         * as a result of user actions or by assignment in code.
         */
        readonly valueChanged: Event<InputMask, EventArgs>;
        /**
         * Raises the {@link valueChanged} event.
         */
        onValueChanged(e?: wijmo.EventArgs): void;
        _commitText(): void;
        dispose(): void;
        refresh(fullUpdate?: boolean): void;
        onGotFocus(e: any): void;
    }
}
declare module wijmo.input {
    /**
     * The {@link ColorPicker} control allows users to select a color by clicking
     * on panels to adjust color channels (hue, saturation, brightness, alpha).
     *
     * Use the {@link value} property to get or set the currently selected color.
     *
     * The control is used as a drop-down for the {@link InputColor} control.
     *
     * {@sample Input/InputColor/Overview/purejs Example}
     */
    class ColorPicker extends wijmo.Control {
        _hsb: number[];
        _alpha: number;
        _value: string;
        _palette: string[];
        _eSB: HTMLElement;
        _eHue: HTMLElement;
        _eAlpha: HTMLElement;
        _cSB: HTMLElement;
        _cHue: HTMLElement;
        _cAlpha: HTMLElement;
        _ePal: HTMLElement;
        _ePreview: HTMLElement;
        _eText: HTMLElement;
        _htDown: Element;
        /**
         * Gets or sets the template used to instantiate {@link ColorPicker} controls.
         */
        static controlTemplate: string;
        static _tplCursor: string;
        /**
         * Initializes a new instance of the {@link ColorPicker} class.
         *
         * @param element The DOM element that hosts the control, or a selector for the host element (e.g. '#theCtrl').
         * @param options The JavaScript object containing initialization data for the control.
         */
        constructor(element: any, options?: any);
        /**
         * Gets or sets a value indicating whether the {@link ColorPicker} allows users
         * to edit the color's alpha channel (transparency).
         *
         * The default value for this property is **true**.
         */
        showAlphaChannel: boolean;
        /**
         * Gets or sets a value indicating whether the {@link ColorPicker} shows a string representation
         * of the current color.
         *
         * The default value for this property is **false**.
         */
        showColorString: boolean;
        /**
         * Gets or sets the currently selected color.
         *
         * The default value for this property is **"#ffffff"** (white).
         */
        value: string;
        /**
         * Gets or sets an array that contains the colors in the palette.
         *
         * The palette contains ten colors, represented by an array with
         * ten strings. The first two colors are usually white and black.
         */
        palette: string[];
        /**
         * Occurs when the value of the {@link value} property changes, either
         * as a result of user actions or by assignment in code.
         */
        readonly valueChanged: Event<ColorPicker, EventArgs>;
        /**
         * Raises the {@link valueChanged} event.
         */
        onValueChanged(e?: wijmo.EventArgs): void;
        protected _mouseDown(e: MouseEvent): void;
        protected _mouseMove(e: MouseEvent): void;
        protected _mouseUp(e: MouseEvent): void;
        private _updateColor;
        private _updatePalette;
        private _makePalEntry;
        private _updatePanels;
        private _getTargetPanel;
    }
}
declare module wijmo.input {
    /**
     * The {@link CollectionViewNavigator} control provides a UI for navigating
     * through the data items or pages in a {@link CollectionView} object.
     *
     * Use the navigator's {@link cv} property to bind it to a {@link CollectionView},
     * and the {@link byPage} property to define whether the navigator should show
     * data items or pages.
     *
     * The navigator shows VCR-like buttons that allow users to select the
     * first/previous/next/last data item (or page) in the {@link CollectionView},
     * and some text showing the current index and total count.
     *
     * You may use the {@link headerFormat} property to customize the text displayed
     * by the navigator.
     */
    class CollectionViewNavigator extends wijmo.Control {
        private _btnFirst;
        private _btnPrev;
        private _btnNext;
        private _btnLast;
        private _txtCurr;
        private _view;
        private _byPage;
        private _rptNext;
        private _rptPrev;
        private _fmt;
        /**
         * Gets or sets the template used to instantiate {@link  CollectionViewNavigator} controls.
         */
        static controlTemplate: string;
        /**
         * Initializes a new instance of the {@link CollectionViewNavigator} class.
         *
         * @param element The DOM element that hosts the control, or a CSS selector for the host element (e.g. '#theCtrl').
         * @param options The JavaScript object containing initialization data for the control.
         */
        constructor(element: any, options?: any);
        /**
         * Gets or sets the {@link CollectionView} controlled by this {@link CollectionViewNavigator}.
         */
        cv: wijmo.collections.CollectionView;
        /**
         * Gets or sets a value that determines whether this {@link CollectionViewNavigator} should
         * navigate items or pages.
         *
         * To navigate pages, the {@link CollectionView} associated with the navigator should
         * have it's {@link CollectionView.pageSize} property set to a value greater than zero.
         */
        byPage: boolean;
        /**
         * Gets or sets the format string used to display the current
         * total item/page values in the control header.
         *
         * The format string may contain the '{current}' and '{count}'
         * replacement strings, which are replaced with values that
         * depend on the value of the {@link byPage} property.
         *
         * The format string may also contain the following replacement
         * strings: '{currentItem}', '{itemCount}', '{currentPage}', and
         * '{pageCount}', which are replaced with values that do not
         * depend on the value of the {@link byPage} property.
         *
         * The default value for this property is the string
         * <b>"{current:n0} / {count:n0}"</b>.
         *
         * The control header element is an input element and contains
         * plain text (HTML is not supported).
         */
        headerFormat: string;
        /**
         * Gets or sets a value that determines whether the next/previous buttons
         * should act as repeat buttons, firing repeatedly as long as the button
         * remains pressed.
         *
         * The default value for this property is <b>true</b>.
         */
        repeatButtons: boolean;
        _update(): void;
        _currentChanged(): void;
        _collectionChanged(): void;
        _click(e: MouseEvent): void;
    }
}
declare module wijmo.input {
    /**
     * Represents a method that formats an item for display in a
     * {@link ListBox} control.
     */
    interface IItemFormatter {
        /**
         * @param index Index of the item being formatted.
         * @param item Default text or HTML used to represent the item.
         * @returns Customized text or HTML used to represent the item.
         */
        (index: number, item: string): string;
    }
    /**
     * The {@link ListBox} control displays a list of items which may contain
     * plain text or HTML, and allows users to select items with the mouse
     * or the keyboard.
     *
     * Use the {@link ListBox.selectedIndex} property to determine which item
     * is currently selected.
     *
     * You can populate a {@link ListBox} using an array of strings or you can
     * use an array of objects, in which case the {@link ListBox.displayMemberPath}
     * property determines which object property is displayed on the list.
     *
     * To display items that contain HTML rather than plain text, set the
     * {@link ListBox.isContentHtml} property to true.
     *
     * The {@link ListBox} control supports the following keyboard commands:
     *
     * <table>
     *   <thead>
     *     <tr><th>Key Combination</th><th>Action</th></tr>
     *   </thead>
     *   <tbody>
     *     <tr><td>Up/Down</td><td>Select the previous/next item</td></tr>
     *     <tr><td>PageUp/Down</td><td>Select the item one page above or below the selection</td></tr>
     *     <tr><td>Home/End</td><td>Select the first/last items</td></tr>
     *     <tr><td>Space</td><td>Toggle the checkbox in the current item (see the {@link checkedMemberPath} property)</td></tr>
     *     <tr><td>Other characters</td><td>Search for items that contain the text typed (multi-character auto-search)</td></tr>
     *   </tbody>
     * </table>
     *
     * The example below creates a {@link ListBox} control and populates it using
     * a 'countries' array. The control updates its {@link ListBox.selectedIndex}
     * and {@link ListBox.selectedItem} properties as the user moves the selection.
     *
     * {@sample Input/ListBox/Overview/purejs Example}
     */
    class ListBox extends wijmo.Control {
        _items: any;
        _cv: wijmo.collections.ICollectionView;
        _itemFormatter: IItemFormatter;
        _pathDisplay: Binding;
        _pathValue: Binding;
        _pathChecked: Binding;
        _html: boolean;
        _shGroups: boolean;
        _checkedItems: any[];
        _itemRole: string;
        _checking: boolean;
        _search: string;
        _caseSensitive: boolean;
        _toSearch: any;
        _bndDisplay: wijmo.Binding;
        _fmtItemHandlers: number;
        _itemCount: number;
        /**
         * Initializes a new instance of the {@link ListBox} class.
         *
         * @param element The DOM element that hosts the control, or a CSS selector for the host element (e.g. '#theCtrl').
         * @param options The JavaScript object containing initialization data for the control.
         */
        constructor(element: any, options?: any);
        /**
         * Gets or sets the array or {@link ICollectionView} object that contains
         * the list items.
         */
        itemsSource: any;
        /**
         * Gets the {@link ICollectionView} object used as the item source.
         */
        readonly collectionView: wijmo.collections.ICollectionView;
        /**
         * Gets or sets a value that determines whether the {@link ListBox} should
         * include group header items to delimit data groups.
         *
         * Data groups are created by modifying the {@link ICollectionView.groupDescriptions}
         * property of the {@link ICollectionView} object used as an {@link itemsSource}.
         *
         * The {@link ListBox} only shows the first level of grouping.
         *
         * The default value for this property is <b>false</b>.
         */
        showGroups: boolean;
        /**
         * Gets or sets a value indicating whether items contain plain
         * text or HTML.
         *
         * The default value for this property is <b>false</b>.
         */
        isContentHtml: boolean;
        /**
         * Gets or sets a function used to customize the values shown on
         * the list.
         *
         * The function takes two arguments, the item index and the default
         * text or html, and returns the new text or html to display.
         *
         * If the formatting function needs a scope (i.e. a meaningful
         * 'this' value), then remember to set the filter using the 'bind'
         * function to specify the 'this' object. For example:
         *
         * ```typescript
         * listBox.itemFormatter = customItemFormatter.bind(this);
         * function customItemFormatter(index, content) {
         *     if (this.makeItemBold(index)) {
         *         content = '&lt;b&gt;' + content + '&lt;/b&gt;';
         *     }
         *     return content;
         * }
         * ```
         */
        itemFormatter: IItemFormatter;
        /**
         * Gets or sets the name of the property to use as the visual
         * representation of the items.
         */
        displayMemberPath: string;
        /**
         * Gets or sets the name of the property used to get the
         * {@link selectedValue} from the {@link selectedItem}.
         */
        selectedValuePath: string;
        /**
         * Gets or sets the name of the property used to control
         * check boxes placed next to each item.
         *
         * Use this property to create multi-select LisBoxes.
         *
         * When an item is checked or unchecked, the control raises the
         * {@link itemChecked} event.
         *
         * Use the {@link selectedItem} property to retrieve the item that
         * was checked or unchecked, or use the {@link checkedItems} property
         * to retrieve the list of items that are currently checked.
         */
        checkedMemberPath: string;
        /**
         * Gets or sets a value that determines whether searches performed
         * while the user types should case-sensitive.
         *
         * The default value for this property is <b>false</b>.
         */
        caseSensitiveSearch: boolean;
        /**
         * Gets or sets the value or the "role" attribute added to the
         * list items. The default value for this property is "option".
         */
        itemRole: string;
        /**
         * Gets the string displayed for the item at a given index.
         *
         * The string may be plain text or HTML, depending on the setting
         * of the {@link isContentHtml} property.
         *
         * @param index The index of the item in the {@link itemsSource}.
         */
        getDisplayValue(index: number): string;
        /**
         * Gets the text displayed for the item at a given index (as plain text).
         *
         * @param index The index of the item in the {@link itemsSource}.
         */
        getDisplayText(index: number): string;
        /**
         * Gets a value that determines whether the item at a given index is enabled.
         *
         * @param index The index of the item in the {@link itemsSource}.
         */
        isItemEnabled(index: number): boolean;
        /**
         * Gets or sets the index of the currently selected item.
         */
        selectedIndex: number;
        /**
         * Gets or sets the item that is currently selected.
         */
        selectedItem: any;
        /**
         * Gets or sets the value of the {@link selectedItem} obtained using
         * the {@link selectedValuePath}.
         */
        selectedValue: any;
        /**
         * Gets or sets the maximum height of the list (in pixels).
         */
        maxHeight: number;
        /**
         * Highlights the selected item and scrolls it into view.
         *
         * @param setFocus Whether to set the focus to the list after scrolling
         * the selected item into view.
         */
        showSelection(setFocus?: boolean): void;
        /**
         * Loads the list with items from the current {@link itemsSource}.
         */
        loadList(): void;
        /**
         * Gets the checked state of an item on the list.
         *
         * This method can be used with multi-select ListBoxes
         * (see the {@link checkedMemberPath} property).
         *
         * @param index Item index.
         */
        getItemChecked(index: number): boolean;
        /**
         * Sets the checked state of an item on the list.
         *
         * This method is applicable only on multi-select ListBoxes
         * (see the {@link checkedMemberPath} property).
         *
         * @param index Item index.
         * @param checked Item's new checked state.
         */
        setItemChecked(index: number, checked: boolean): void;
        /**
         * Toggles the checked state of an item on the list.
         * This method is applicable only to multi-select ListBoxes
         * (see the {@link checkedMemberPath} property).
         *
         * @param index Item index.
         */
        toggleItemChecked(index: number): void;
        /**
         * Gets or sets an array containing the items that are currently checked.
         */
        checkedItems: any[];
        /**
         * Gets the data index of an element within the list.
         *
         * @param e Element to search for.
         * @return The index of the element in the list, or -1 if the element
         * is not a member of the list.
         */
        indexOf(e: HTMLElement): number;
        /**
         * Occurs when the value of the {@link selectedIndex} property changes.
         */
        readonly selectedIndexChanged: Event<ListBox, EventArgs>;
        /**
         * Raises the {@link selectedIndexChanged} event.
         */
        onSelectedIndexChanged(e?: wijmo.EventArgs): void;
        /**
         * Occurs when the list of items changes.
         */
        readonly itemsChanged: Event<ListBox, EventArgs>;
        /**
         * Raises the {@link itemsChanged} event.
         */
        onItemsChanged(e?: wijmo.EventArgs): void;
        /**
         * Occurs before the list items are generated.
         */
        readonly loadingItems: Event<ListBox, EventArgs>;
        /**
         * Raises the {@link loadingItems} event.
         */
        onLoadingItems(e?: wijmo.EventArgs): void;
        /**
         * Occurs after the list items have been generated.
         */
        readonly loadedItems: Event<ListBox, EventArgs>;
        /**
         * Raises the {@link loadedItems} event.
         */
        onLoadedItems(e?: wijmo.EventArgs): void;
        /**
         * Occurs when the current item is checked or unchecked by the user.
         *
         * This event is raised when the {@link checkedMemberPath} is set to
         * the name of a property to add check boxes to each item in the control.
         *
         * Use the {@link selectedItem} property to retrieve the item that was
         * checked or unchecked.
         */
        readonly itemChecked: Event<ListBox, EventArgs>;
        /**
         * Raises the {@link itemChecked} event.
         */
        onItemChecked(e?: wijmo.EventArgs): void;
        /**
         * Occurs when the value of the {@link checkedItems} property changes.
         */
        readonly checkedItemsChanged: Event<ListBox, EventArgs>;
        /**
         * Raises the {@link checkedItemsChanged} event.
         */
        onCheckedItemsChanged(e?: wijmo.EventArgs): void;
        /**
         * Occurs when an element representing a list item has been created.
         *
         * This event can be used to format list items for display. It is similar
         * in purpose to the {@link itemFormatter} property, but has the advantage
         * of allowing multiple independent handlers.
         */
        readonly formatItem: Event<ListBox, FormatItemEventArgs>;
        /**
         * Raises the {@link formatItem} event.
         *
         * @param e {@link FormatItemEventArgs} that contains the event data.
         */
        onFormatItem(e: FormatItemEventArgs): void;
        /**
         * Refreshes the control.
         *
         * @param fullUpdate Whether to update the control layout as well as the content.
         */
        refresh(fullUpdate?: boolean): void;
        _arrayEquals(arr1: any[], arr2: any[]): boolean;
        _getChild(index: number): HTMLElement;
        _getElementIndex(index: number): number;
        private _setItemChecked;
        private _cvCollectionChanged;
        private _cvCurrentChanged;
        private _populateList;
        _createItem(i: number): string;
        _getAriaSelected(isSelected: boolean, isChecked: boolean): boolean;
        _createHeaderItem(group: wijmo.collections.CollectionViewGroup): string;
        private _click;
        private _keydown;
        private _keypress;
        _selectNext(): boolean;
        _selectPrev(): boolean;
        _selectFirst(): boolean;
        _selectLast(): boolean;
        _selectNextPage(): boolean;
        _selectPrevPage(): boolean;
        private _findNext;
        private _getCheckbox;
        _initFromSelect(hostElement: HTMLElement): void;
    }
    /**
     * Provides arguments for the {@link ListBox.formatItem} event.
     */
    class FormatItemEventArgs extends wijmo.EventArgs {
        _index: number;
        _data: any;
        _item: HTMLElement;
        /**
         * Initializes a new instance of the {@link FormatItemEventArgs} class.
         *
         * @param index Index of the item being formatted in the source {@link ICollectionView}, or -1 if the item is a group header.
         * @param data Data item being formatted, or a {@link CollectionViewGroup} object if the item is a group header.
         * @param item Element that represents the list item to be formatted.
         */
        constructor(index: number, data: any, item: HTMLElement);
        /**
         * Gets the index of the data item in the list.
         */
        readonly index: number;
        /**
         * Gets the data item being formatted.
         */
        readonly data: any;
        /**
         * Gets a reference to the element that represents the list item to be formatted.
         */
        readonly item: HTMLElement;
    }
}
declare module wijmo.input {
    /**
     * The {@link MultiSelectListBox} control contains a {@link ListBox} with
     * a "Select All" button and a "Filter" input.
     *
     * The "Select All" and "Filter" elements can be shown or hidden using
     * the {@link showSelectAllCheckbox} and {@link showFilterInput} properties.
     *
     * The {@link MultiSelectListBox} control is used as a drop-down by the
     * {@link MultiSelect} control.
     */
    class MultiSelectListBox extends wijmo.Control {
        _selectAll: HTMLElement;
        _filter: HTMLInputElement;
        _lbHost: HTMLElement;
        _lbx: ListBox;
        _cbSelectAll: HTMLInputElement;
        _spSelectAll: HTMLSpanElement;
        _selectAllLabel: string;
        _filterPlaceholder: string;
        _filterText: string;
        _checkOnFilter: boolean;
        _toSearch: any;
        static _DEF_CHECKED_PATH: string;
        /**
         * Gets or sets the template used to instantiate {@link MultiSelectListBox} controls.
         */
        static controlTemplate: string;
        /**
         * Initializes a new instance of the {@link MultiSelectListBox} class.
         *
         * @param element The DOM element that hosts the control, or a CSS selector for the host element (e.g. '#theCtrl').
         * @param options The JavaScript object containing initialization data for the control.
         */
        constructor(element: any, options?: any);
        /**
         * Gets or sets the array or {@link ICollectionView} object that contains
         * the list items.
         */
        itemsSource: any;
        /**
         * Gets or sets the name of the property to use as the visual
         * representation of the items.
         */
        displayMemberPath: string;
        /**
         * Gets or sets a value indicating whether items contain plain
         * text or HTML.
         *
         * The default value for this property is <b>false</b>.
         */
        isContentHtml: boolean;
        /**
         * Gets or sets a value that determines whether the {@link MultiSelectListBox} should
         * include group header items to delimit data groups.
         *
         * Data groups are created by modifying the {@link ICollectionView.groupDescriptions}
         * property of the {@link ICollectionView} object used as an {@link itemsSource}.
         *
         * The {@link MultiSelectListBox} only shows the first level of grouping.
         *
         * The default value for this property is <b>false</b>.
         */
        showGroups: boolean;
        /**
         * Gets or sets a value that determines whether the {@link MultiSelectListBox} should
         * automatically select all the filtered items when the filter text changes.
         *
         * The default value for this property is <b>true</b>.
         */
        checkOnFilter: boolean;
        /**
         * Gets a reference to the {@link ListBox} control hosted by this
         * {@link MultiSelectListBox}.
         */
        readonly listBox: ListBox;
        /**
         * Gets or sets whether the control should display a "filter" input
         * above the items to filter the items displayed.
         *
         * The default value for this property is <b>false</b>.
         */
        showFilterInput: boolean;
        /**
         * Gets or sets the string used as a placeholder for the filter input element.
         *
         * The default value for this property is null, which causes the control
         * to show a localized version of the string "Filter".
         */
        filterInputPlaceholder: string;
        /**
         * Gets or sets whether the control should display a "Select All" checkbox
         * above the items to select or de-select all items.
         *
         * The default value for this property is <b>false</b>.
         */
        showSelectAllCheckbox: boolean;
        /**
         * Gets or sets the string to be used as a label for the "Select All"
         * checkbox that is displayed when the {@link showSelectAllCheckbox}
         * property is set to true.
         *
         * The default value for this property is null, which causes the control
         * to show a localized version of the string "Select All".
         */
        selectAllLabel: string;
        /**
         * Gets or sets the name of the property used to control the checkboxes
         * placed next to each item.
         */
        checkedMemberPath: string;
        /**
         * Gets or sets an array containing the items that are currently checked.
         */
        checkedItems: any[];
        /**
         * Occurs when the value of the {@link checkedItems} property changes.
         */
        readonly checkedItemsChanged: Event<MultiSelectListBox, EventArgs>;
        /**
         * Raises the {@link checkedItemsChanged} event.
         */
        onCheckedItemsChanged(e?: wijmo.EventArgs): void;
        refresh(fullUpdate?: boolean): void;
        dispose(): void;
        _applyFilter(): void;
        _updateCheckAllCheckbox(): void;
    }
}
declare module wijmo.input {
    /**
     * Specifies constants that define the date selection behavior.
     */
    enum DateSelectionMode {
        /** The user cannot change the current value using the mouse or keyboard. */
        None = 0,
        /** The user can select days. */
        Day = 1,
        /** The user can select months. */
        Month = 2
    }
    /**
     * Represents a method that formats a date on the {@link Calendar}
     * control.
     *
     * The method typically adds class names to the element to modify
     * its appearance.
     */
    interface IDateFormatter {
        /**
         * @param date The date value to be formatted.
         * @param element The HTMLElement that represents the date value.
         */
        (date: Date, element: HTMLElement): void;
    }
    /**
     * Represents a method that takes a date value as a parameter and
     * returns a boolean value that indicates the date is valid and
     * should be selectable by the user.
     */
    interface IDateValidator {
        /**
         * @param date The date value to be formatted.
         * @returns True if the date is valid and should be selectable by the user.
         */
        (date: Date): boolean;
    }
    /**
     * The {@link Calendar} control displays a one-month calendar and allows users
     * to select a date.
     *
     * You may use the {@link min} and {@link max} properties to restrict the range
     * of dates that the user can select.
     *
     * For details about using the {@link min} and {@link max} properties, please see the
     * <a href="/wijmo/docs/Topics/Input/Using-Min-Max">Using the min and max properties</a> topic.
     *
     * Use the {@link value} property to get or set the currently selected date.
     *
     * Use the {@link selectionMode} property to determine whether users should be
     * allowed to select days, months, or no values at all.
     *
     * The {@link Calendar} control supports the following keyboard commands:
     *
     * <table>
     *   <thead>
     *     <tr><th>Key Combination</th><th>Moves Selection To</th></tr>
     *   </thead>
     *   <tbody>
     *     <tr><td>Left</td><td>Previous day</td></tr>
     *     <tr><td>Right</td><td>Next day</td></tr>
     *     <tr><td>Up</td><td>Previous week</td></tr>
     *     <tr><td>Down</td><td>Next week</td></tr>
     *     <tr><td>PgUp</td><td>Previous month</td></tr>
     *     <tr><td>PgDn</td><td>Next month</td></tr>
     *     <tr><td>Alt + PgUp</td><td>Previous year</td></tr>
     *     <tr><td>Alt + PgDn</td><td>Next year</td></tr>
     *     <tr><td>Home</td><td>First valid day of the month</td></tr>
     *     <tr><td>End</td><td>Last valid day of the month</td></tr>
     *     <tr><td>Alt + End</td><td>Today's date</td></tr>
     *   </tbody>
     * </table>
     *
     *  The example below shows a
     * {@link Calendar} control that allows users to select the date with a
     * single click.
     *
     * {@sample Input/Calendar/Overview/purejs Example}
     */
    class Calendar extends wijmo.Control {
        private _tbHdr;
        private _tbMth;
        private _tbYr;
        private _btnMth;
        private _spMth;
        private _btnPrv;
        private _btnTdy;
        private _btnNxt;
        private _lbYears;
        private _rptUp;
        private _rptDn;
        private _yrPicker;
        private _mtPicker;
        private _wksBefore;
        private _wksAfter;
        private _rngMin;
        private _rngMax;
        private _value;
        private _rngEnd;
        private _month;
        private _min;
        private _max;
        private _readOnly;
        private _fdw;
        private _selMode;
        private _itemFormatter;
        private _itemValidator;
        private _tmYrHidden;
        private _syncing;
        private _tdFirst;
        private _tdLast;
        private _cals;
        private _fmtYrMo;
        private _fmtYr;
        private _fmtDayHdr;
        private _fmtDay;
        private _fmtMonths;
        static _DATE_KEY: string;
        /**
         * Gets or sets the template used to instantiate {@link Calendar} controls.
         */
        static controlTemplate: string;
        /**
         * Initializes a new instance of the {@link Calendar} class.
         *
         * @param element The DOM element that hosts the control, or a selector for the host element (e.g. '#theCtrl').
         * @param options The JavaScript object containing initialization data for the control.
         */
        constructor(element: any, options?: any);
        /**
         * Gets or sets the currently selected date.
         *
         * The default value for this property is the current date.
         */
        value: Date;
        rangeEnd: Date;
        rangeMin: number;
        rangeMax: number;
        /**
         * Gets or sets the earliest date that the user can select in the calendar.
         *
         * The default value for this property is <b>null</b>, which means no earliest
         * date is defined.
         *
         * For details about using the {@link min} and {@link max} properties, please see the
         * <a href="/wijmo/docs/Topics/Input/Using-Min-Max">Using the min and max properties</a> topic.
         */
        min: Date;
        /**
         * Gets or sets the latest date that the user can select in the calendar.
         *
         * The default value for this property is <b>null</b>, which means no latest
         * date is defined.
         *
         * For details about using the {@link min} and {@link max} properties, please see the
         * <a href="/wijmo/docs/Topics/Input/Using-Min-Max">Using the min and max properties</a> topic.
         */
        max: Date;
        /**
         * Gets or sets a value that indicates whether users can select
         * days, months, or no values at all.
         *
         * The default value for this property is <b>DateSelectionMode.Day</b>.
         */
        selectionMode: DateSelectionMode;
        /**
         * Gets or sets a value that indicates whether the user can modify
         * the control value using the mouse and keyboard.
         *
         * The default value for this property is <b>false</b>.
         */
        isReadOnly: boolean;
        /**
         * Gets or sets a value that determines whether the calendar buttons
         * should act as repeat buttons, firing repeatedly as the button
         * remains pressed.
         *
         * The default value for this property is <b>true</b>.
         */
        repeatButtons: boolean;
        /**
         * Gets or sets a value that determines whether the calendar should
         * display a list of years when the user clicks the header element
         * on the year calendar.
         *
         * The default value for this property is <b>true</b>.
         */
        showYearPicker: boolean;
        showMonthPicker: boolean;
        /**
         * Gets or sets a value that represents the first day of the week,
         * the one displayed in the first column of the calendar.
         *
         * Setting this property to null causes the calendar to use the default
         * for the current culture. In the English culture, the first day of the
         * week is Sunday (0); in most European cultures, the first day of the
         * week is Monday (1).
         */
        firstDayOfWeek: number;
        /**
         * Gets or sets the month displayed in the calendar.
         */
        displayMonth: Date;
        displayMonths: number;
        /**
         * Gets or sets the format used to display the month and year
         * above the calendar in month view.
         *
         * The default value for this property is <b>'y'</b>.
         */
        formatYearMonth: string;
        /**
         * Gets or sets the format used to display the headers
         * above the days in month view.
         *
         * The default value for this property is <b>'ddd'</b>.
         */
        formatDayHeaders: string;
        /**
         * Gets or sets the format used to display the days
         * in month view.
         *
         * The default value for this property is 'd ' (the space after the 'd'
         * prevents the format from being interpreted as 'd', the standard format
         * used to represent the short date pattern).
         */
        formatDays: string;
        /**
         * Gets or sets the format used to display the year
         * above the months in year view.
         *
         * The default value for this property is <b>'yyyy'</b>.
         */
        formatYear: string;
        /**
         * Gets or sets the format used to display the months
         * in year view.
         *
         * The default value for this property is <b>'MMM'</b>.
         */
        formatMonths: string;
        /**
         * Gets or sets a value indicating whether the control displays the header
         * area with the current month and navigation buttons.
         *
         * The default value for this property is <b>true</b>.
         */
        showHeader: boolean;
        /**
         * Gets or sets a value indicating whether the calendar displays
         * a month or a year.
         *
         * The default value for this property is <b>true</b>.
         */
        monthView: boolean;
        /**
         * Gets or sets the number of weeks to show on the calendar
         * before the current month.
         *
         * The default value for this property is <b>zero</b>.
         */
        weeksBefore: number;
        /**
         * Gets or sets the number of weeks to show on the calendar
         * after the current month.
         *
         * The default value for this property is <b>zero</b>.
         */
        weeksAfter: number;
        /**
         * Gets or sets a formatter function to customize dates in the calendar.
         *
         * The formatter function can add any content to any date. It allows
         * complete customization of the appearance and behavior of the calendar.
         *
         * If specified, the function takes two parameters:
         * <ul>
         *     <li>the date being formatted </li>
         *     <li>the HTML element that represents the date</li>
         * </ul>
         *
         * For example, the code below shows weekends with a yellow background:
         * ```typescript
         * calendar.itemFormatter = (date, element) => {
         *     let day = date.getDay();
         *     element.style.backgroundColor = (day == 0 || day == 6) ? 'yellow' : '';
         * }
         * ```
         */
        itemFormatter: IDateFormatter;
        /**
         * Gets or sets a validator function to determine whether dates are valid for selection.
         *
         * If specified, the validator function should take one parameter representing the
         * date to be tested, and should return false if the date is invalid and should not
         * be selectable.
         *
         * For example, the code below shows weekends in a disabled state and prevents users
         * from selecting those dates:
         * ```typescript
         * calendar.itemValidator = date => {
         *     let weekday = date.getDay();
         *     return weekday != 0 && weekday != 6;
         * }
         * ```
         */
        itemValidator: IDateValidator;
        /**
         * Gets the date represented by an HTML element.
         *
         * @param e Element to test.
         * @returns The date represented by the element, or null if the
         * element does not represent a date.
         */
        hitTest(e: HTMLElement): Date;
        /**
         * Occurs when the value of the {@link value} property changes.
         */
        readonly valueChanged: Event<Calendar, EventArgs>;
        /**
         * Raises the {@link valueChanged} event.
         */
        onValueChanged(e?: wijmo.EventArgs): void;
        readonly rangeEndChanged: Event<Calendar, EventArgs>;
        onRangeEndChanged(e?: wijmo.EventArgs): void;
        /**
         * Occurs after the {@link displayMonth} property changes.
         */
        readonly displayMonthChanged: Event<Calendar, EventArgs>;
        /**
         * Raises the {@link displayMonthChanged} event.
         */
        onDisplayMonthChanged(e?: wijmo.EventArgs): void;
        /**
         * Occurs when an element representing a day in the calendar has been created.
         *
         * This event can be used to format calendar items for display. It is similar
         * in purpose to the {@link itemFormatter} property, but has the advantage
         * of allowing multiple independent handlers.
         *
         * For example, the code below uses the {@link formatItem} event to disable weekends
         * so they appear dimmed in the calendar:
         * ```typescript
         * // disable Sundays and Saturdays
         * calendar.formatItem.addHandler((s, e) => {
         *     let day = e.data.getDay();
         *     if (day == 0 || day == 6) {
         *       addClass(e.item, 'wj-state-disabled');
         *     }
         * });
         * ```
         */
        readonly formatItem: Event<Calendar, FormatItemEventArgs>;
        /**
         * Raises the {@link formatItem} event.
         *
         * @param e {@link FormatItemEventArgs} that contains the event data.
         */
        onFormatItem(e: FormatItemEventArgs): void;
        containsFocus(): boolean;
        dispose(): void;
        refresh(fullUpdate?: boolean): void;
        private _getCalendar;
        private _getCalendars;
        private _syncProp;
        private _updateContent;
        private _updateSelection;
        private _addWeek;
        _customizeCell(index: number, day: Date, cell: HTMLElement): void;
        private _canChangeValue;
        private _valid;
        private _inValidRange;
        private _monthInValidRange;
        private _yearInValidRange;
        private _sameMonth;
        private _getValidDate;
        _clamp(value: Date): Date;
        private _createChildren;
        private _createYearPicker;
        private _createElement;
        private _click;
        private _keydown;
        private _getMonth;
        private _ensureVisible;
        _mthMode(): boolean;
        _rngMode(): boolean;
        private _navigate;
    }
}
declare module wijmo.input {
    /**
     * Specifies constants that define the action to perform when the
     * user clicks the input element in the control.
     */
    enum ClickAction {
        /** Selects the input element content. */
        Select = 0,
        /** Open the drop-down. */
        Open = 1,
        /** Toggle the drop-down. */
        Toggle = 2
    }
    /**
     * DropDown control (abstract).
     *
     * Contains an input element and a button used to show or hide the drop-down.
     *
     * Derived classes must override the _createDropDown method to create whatever
     * editor they want to show in the drop down area (a list of items, a calendar,
     * a color editor, etc).
     */
    class DropDown extends wijmo.Control {
        _tbx: HTMLInputElement;
        _elRef: HTMLElement;
        _btn: HTMLElement;
        _dropDown: HTMLElement;
        _clickAction: ClickAction;
        _showBtn: boolean;
        _autoExpand: boolean;
        _animate: boolean;
        _cssClass: string;
        _oldText: string;
        _minWidthDropdown: string;
        _setFocus: boolean;
        /**
         * Gets or sets the template used to instantiate {@link DropDown} controls.
         */
        static controlTemplate: string;
        /**
         * Initializes a new instance of the {@link DropDown} class.
         *
         * @param element The DOM element that hosts the control, or a selector for the host element (e.g. '#theCtrl').
         * @param options The JavaScript object containing initialization data for the control.
         */
        constructor(element: any, options?: any);
        /**
         * Gets or sets the text shown on the control.
         */
        text: string;
        /**
         * Gets the HTML input element hosted by the control.
         *
         * Use this property in situations where you want to customize the
         * attributes of the input element.
         */
        readonly inputElement: HTMLInputElement;
        /**
         * Gets or sets the "type" attribute of the HTML input element hosted
         * by the control.
         *
         * The default value for this property is <b>text</b>.
         */
        inputType: string;
        /**
         * Gets or sets a value that indicates whether the user can modify
         * the control value using the mouse and keyboard.
         *
         * The default value for this property is <b>false</b>.
         */
        isReadOnly: boolean;
        /**
         * Gets or sets a value that determines whether the control value must be
         * set to a non-null value or whether it can be set to null
         * (by deleting the content of the control).
         *
         * This property defaults to true for most controls, including {@link ComboBox},
         * {@link InputDate}, {@link InputTime}, {@link InputDateTime}, and {@link InputColor}.
         * It defaults to false for the {@link AutoComplete} control.
         */
        isRequired: boolean;
        /**
         * Gets or sets the string shown as a hint when the control is empty.
         */
        placeholder: string;
        /**
         * Gets or sets a value that specifies the action to perform when the
         * user clicks the input element in the control.
         *
         * For most drop-down controls, this property is set to {@link ClickAction.Select}
         * by default. This setting allows users to select portions of the text with the mouse.
         *
         * For drop-down controls that display non-editable text (such as the {@link MultiSelect}),
         * this property is set to {@link ClickAction.Toggle} by default.
         */
        clickAction: ClickAction;
        /**
         * Gets or sets a value that indicates whether the drop down is currently
         * visible.
         *
         * The default value for this property is <b>false</b>.
         */
        isDroppedDown: boolean;
        /**
         * Gets the drop down element shown when the {@link isDroppedDown}
         * property is set to true.
         */
        readonly dropDown: HTMLElement;
        /**
         * Gets or sets a CSS class name to add to the control's drop-down element.
         *
         * This property is useful when styling the drop-down element, because it is
         * shown as a child of the document body rather than as a child of the control
         * itself, which prevents using CSS selectors based on the parent control.
         */
        dropDownCssClass: string;
        /**
         * Gets or sets a value that indicates whether the control should
         * display a drop-down button.
         *
         * The default value for this property is <b>true</b>.
         */
        showDropDownButton: boolean;
        /**
         * Gets or sets a value that indicates whether the control should
         * automatically expand the selection to whole words/numbers when
         * the control is clicked.
         *
         * The default value for this property is <b>true</b>.
         */
        autoExpandSelection: boolean;
        /**
         * Gets or sets a value that indicates whether the control should use a fade-in animation
         * when displaying the drop-down.
         *
         * The default value for this property is <b>false</b>.
         */
        isAnimated: boolean;
        /**
         * Sets the focus to the control and selects all its content.
         */
        selectAll(): void;
        /**
         * Occurs when the value of the {@link text} property changes.
         */
        readonly textChanged: Event<DropDown, EventArgs>;
        /**
         * Raises the {@link textChanged} event.
         */
        onTextChanged(e?: wijmo.EventArgs): void;
        /**
         * Occurs before the drop down is shown or hidden.
         */
        readonly isDroppedDownChanging: Event<DropDown, CancelEventArgs>;
        /**
         * Raises the {@link isDroppedDownChanging} event.
         */
        onIsDroppedDownChanging(e: wijmo.CancelEventArgs): boolean;
        /**
         * Occurs after the drop down is shown or hidden.
         */
        readonly isDroppedDownChanged: Event<DropDown, EventArgs>;
        /**
         * Raises the {@link isDroppedDownChanged} event.
         */
        onIsDroppedDownChanged(e?: wijmo.EventArgs): void;
        onGotFocus(e?: wijmo.EventArgs): void;
        onLostFocus(e?: wijmo.EventArgs): void;
        containsFocus(): boolean;
        dispose(): void;
        refresh(fullUpdate?: boolean): void;
        _handleResize(): void;
        protected _dropDownClick(e: MouseEvent): void;
        protected _expandSelection(): void;
        protected _getCharType(text: string, pos: number): 1 | 0 | -1;
        protected _keydown(e: KeyboardEvent): void;
        protected _btnclick(e: MouseEvent): void;
        protected _setText(text: string, fullMatch: boolean): void;
        protected _updateBtn(): void;
        protected _createDropDown(): void;
        protected _commitText(): void;
        protected _updateDropDown(): void;
    }
}
declare module wijmo.input {
    /**
     * Specifies actions that trigger showing and hiding {@link Popup} controls.
     *
     * The {@link PopupTrigger} actions are flags that may be combined using binary
     * operators. For example:
     *
     * ```typescript
     * let popup = new Popup('#popup', {
     *
     *     // set popup owner to 'show' button
     *     owner: '#btn-show'
     *
     *     // show the popup when clicking the button
     *     showTrigger: PopupTrigger.ClickOwner,
     *
     *     // hide the popup when clicking the button or when the mouse leaves the popup
     *     hideTrigger: PopupTrigger.ClickOwner | PopupTrigger.LeavePopup,
     * });
     * ```
     */
    enum PopupTrigger {
        /** No triggers; popups must be shown and hidden using code. */
        None = 0,
        /** When the user clicks the owner element. */
        ClickOwner = 1,
        /** When the user clicks the popup. */
        ClickPopup = 2,
        /** When the user clicks the owner element or the popup. */
        Click = 3,
        /** When the owner element loses focus. */
        BlurOwner = 4,
        /** When the popup loses focus. */
        BlurPopup = 8,
        /** When the owner element or the popup lose focus. */
        Blur = 12,
        /** When the owner element or the popup are clicked or lose focus. */
        ClickOrBlur = 15,
        /** When the mouse button is pressed over the owner element. */
        DownOwner = 16,
        /** When the mouse button is pressed over the popup. */
        DownPopup = 32,
        /** When the mouse button is pressed over the owner element or the popup. */
        Down = 48,
        /** When the mouse enters the owner element. */
        EnterOwner = 64,
        /** When the mouse enters the popup. */
        EnterPopup = 128,
        /** When the mouse enters the owner element or the popup. */
        Enter = 192,
        /** When the mouse leaves the owner element. */
        LeaveOwner = 256,
        /** When the mouse leaves the popup. */
        LeavePopup = 512,
        /** When the mouse leaves the owner element or the popup. */
        Leave = 768
    }
    enum _Edges {
        None = 0,
        Left = 1,
        Top = 2,
        Right = 4,
        Bottom = 8,
        LeftTop = 3,
        RightTop = 6,
        RightBottom = 12,
        LeftBottom = 9
    }
    /**
     * Class that shows an element as a popup.
     *
     * Popups may be have {@link owner} elements, in which case they behave
     * as rich tooltips that may be shown or hidden based on actions
     * specified by the {@link Popup.showTrigger} and {@link Popup.hideTrigger}
     * properties.
     *
     * Popups with no owner elements behave like dialogs. They are centered
     * on the screen and displayed using the {@link show} method.
     *
     * To close a {@link Popup}, call the {@link Popup.hide} method.
     *
     * Alternatively, any clickable elements within a {@link Popup} that have
     * the classes starting with the 'wj-hide' string will hide the {@link Popup}
     * when clicked and will set the {@link Popup.dialogResult} property to the
     * class name so the caller may take appropriate action.
     *
     * For example, the {@link Popup} below will be hidden when the user presses
     * the OK or Cancel buttons, and the {@link Popup.dialogResult} property will
     * be set to either 'wj-hide-cancel' or 'wj-hide-ok':
     *
     * ```html
     * <button id="btn-show-popup">
     *     Show Popup
     * </button>
     * <div id="thePopup" class="wj-dialog">
     *     <div class="wj-dialog-header">
     *         Welcome to the popup.
     *     </div>
     *     <div class="wj-dialog-body">
     *         Click one of the buttons below to close the popup.
     *     </div>
     *     <div class="wj-dialog-footer">
     *         <button class="wj-hide-ok">
     *             OK
     *         </button>
     *         <button class="wj-hide-cancel">
     *             Cancel
     *         </button>
     *     </div>
     * </div>
     * ```
     * ```typescript
     * new Popup('#thePopup', {
     *     owner: '#btn-show-popup',
     *     hidden: s => console.log('popup closed with result', s.dialogResult)
     * });
     * ```
     *
     * The example below shows how you can use the {@link Popup} control to implement
     * popups attached to owner elements and dialogs:
     *
     * {@sample Input/Popup/PopupsWithOwnerElements/purejs}
     */
    class Popup extends wijmo.Control {
        static _DRAG_THRESHOLD: number;
        static _SZ_EDGE: number;
        static _SZ_MIN: number;
        static _evtHover: MouseEvent;
        protected _owner: HTMLElement;
        protected _modal: boolean;
        protected _position: PopupPosition;
        protected _showTrigger: PopupTrigger;
        protected _hideTrigger: PopupTrigger;
        protected _hideAnim: any[];
        protected _fadeIn: boolean;
        protected _fadeOut: boolean;
        protected _removeOnHide: boolean;
        protected _draggable: boolean;
        protected _resizable: boolean;
        protected _dragged: boolean;
        protected _resized: boolean;
        protected _ignoreClick: boolean;
        protected _bkDrop: HTMLDivElement;
        protected _result: any;
        protected _resultEnter: any;
        protected _resultSubmit: string;
        protected _callback: Function;
        protected _refreshing: boolean;
        protected _visible: boolean;
        protected _wasVisible: boolean;
        protected _composing: boolean;
        protected _ownerClickBnd: any;
        protected _ownerDownBnd: any;
        protected _ownerBlurBnd: any;
        protected _ownerEnterBnd: any;
        protected _ownerLeaveBnd: any;
        protected _toShow: any;
        protected _toHide: any;
        protected _edges: _Edges;
        protected _mousedownEvt: MouseEvent;
        protected _rcBounds: ClientRect;
        protected _mousedownBnd: any;
        protected _mousemoveBnd: any;
        protected _mousedragBnd: any;
        protected _mouseupBnd: any;
        protected _hideBnd: any;
        protected _oldFocus: HTMLElement;
        protected _lastShow: number;
        /**
         * Initializes a new instance of the {@link Popup} class.
         *
         * @param element The DOM element that hosts the control, or a CSS selector for the host element (e.g. '#theCtrl').
         * @param options JavaScript object containing initialization data for the control.
         */
        constructor(element: any, options?: any);
        /**
         * Gets or sets the element that owns this {@link Popup}.
         *
         * If the {@link owner} is null, the {@link Popup} behaves like a dialog.
         * It is centered on the screen and must be shown using the
         * {@link show} method.
         */
        owner: HTMLElement;
        /**
         * Gets or sets the {@link PopupPosition} where the popup should be
         * displayed with respect to the owner element.
         *
         * The default value for this property is <b>PopupPosition.BelowLeft</b>.
         */
        position: wijmo.PopupPosition;
        /**
         * Gets or sets the HTML element contained in this {@link Popup}.
         */
        content: HTMLElement;
        /**
         * Gets or sets the actions that show the {@link Popup}.
         *
         * By default, the {@link showTrigger} property is set to {@link PopupTrigger.ClickOwner},
         * which causes the popup to appear when the user clicks the owner element.
         *
         * If you set the {@link showTrigger} property to {@link PopupTrigger.None},
         * the popup will be shown only when the {@link show} method is called.
         */
        showTrigger: PopupTrigger;
        /**
         * Gets or sets the actions that hide the {@link Popup}.
         *
         * By default, the {@link hideTrigger} property is set to {@link PopupTrigger.Blur},
         * which hides the popup when it loses focus.
         *
         * If you set the {@link hideTrigger} property to {@link PopupTrigger.Click}, the
         * popup will be hidden when the user clicks the popup or its owner element.
         *
         * If you set the {@link hideTrigger} property to {@link PopupTrigger.Leave}, the
         * popup will be hidden a short interval after the mouse leaves the popup or its
         * owner element, unless the user moves the mouse back into the popup before the
         * interval elapses.
         *
         * If you set the {@link hideTrigger} property to {@link PopupTrigger.None}, the
         * popup will be hidden only when the {@link hide} method is called
         * (or when the user presses the Escape key).
         */
        hideTrigger: PopupTrigger;
        /**
         * Gets or sets a value that determines whether the {@link Popup} should
         * use a fade-in animation when it is shown.
         *
         * The default value for this property is <b>true</b>.
         */
        fadeIn: boolean;
        /**
         * Gets or sets a value that determines whether the {@link Popup} should
         * use a fade-out animation when it is hidden.
         *
         * The default value for this property is <b>true</b>.
         */
        fadeOut: boolean;
        /**
         * Gets or sets a value that determines whether the {@link Popup} element
         * should be removed from the DOM when the {@link Popup} is hidden, as
         * opposed to being hidden.
         *
         * The default value for this property is <b>true</b>.
         */
        removeOnHide: boolean;
        /**
         * Gets or sets a value that determines whether the {@link Popup} should
         * be displayed as a modal dialog.
         *
         * Modal dialogs show a dark backdrop that makes the {@link Popup} stand
         * out from other content on the page.
         *
         * If you want to make a dialog truly modal, also set the {@link Popup.hideTrigger}
         * property to {@link PopupTrigger.None}, so users won't be able to click the
         * backdrop to dismiss the dialog. In this case, the dialog will close only
         * when the {@link hide} method is called (or when the user presses the Escape key).
         *
         * The default value for this property is <b>false</b>.
         */
        modal: boolean;
        /**
         * Gets or sets a value that determines whether the popup can be dragged
         * with the mouse by its header.
         *
         * The header is identified by the '.wj-dialog-header' or '.modal-header'
         * CSS selectors.
         * If the dialog does not contain any elements with the 'wj-dialog-header'
         * or 'modal-header' classes, users will not be able to drag the popup.
         *
         * The default value for this property is <b>false</b>.
         */
        isDraggable: boolean;
        /**
         * Gets or sets a value that determines whether the popup can be resized
         * by dragging its edges with the mouse.
         *
         * You can limit the size of the popup by setting the host element's
         * max-width, min-width, max-height, and min-height CSS properties.
         *
         * The default value for this property is <b>false</b>.
         */
        isResizable: boolean;
        /**
         * Gets or sets a value used as a return value for the {@link Popup} after
         * it is hidden.
         *
         * This property is set to null when the {@link Popup} is displayed. It can be
         * set in response to button click events or in the call to the {@link hide}
         * method to provide a result value to callers.
         */
        dialogResult: any;
        /**
         * Gets or sets a value to be used as a {@link dialogResult} when the user presses
         * the Enter key while the {@link Popup} is visible.
         *
         * If the user presses Enter and the {@link dialogResultEnter} property is not null,
         * the popup checks whether all its child elements are in a valid state.
         * If so, the popup is closed and the {@link dialogResult} property is set to
         * the value of the {@link dialogResultEnter} property.
         */
        dialogResultEnter: any;
        /**
         * Gets or sets a string to be used as a {@link dialogResult} when the dialog
         * is hosted by a form element and the user submits the form.
         *
         * If you set this property to a non-empty string, the control will handle
         * the form's submit event, validating the fields and closing the form with
         * a {@link dialogResult} set to the specified value. For example:
         *
         * ```typescript
         * let dlg = new Popup('#theForm', {
         *     dialogResultSubmit: 'ok'
         * });
         * dlg.show(true, () => {
         *     if (dlg.dialogResult == dlg.dialogResultSubmit) {
         *         // form is valid, handle results here
         *     }
         * });
         * ```
         *
         * See also the {@link dialogResultEnter} property, which can be used
         * when the {@link Popup} is hosted in elements that are not forms.
         */
        dialogResultSubmit: string;
        /**
         * Gets a value that determines whether the {@link Popup} is currently visible.
         */
        readonly isVisible: boolean;
        /**
         * Shows the {@link Popup}.
         *
         * @param modal Whether to show the popup as a modal dialog. If provided, this
         * sets the value of the {@link modal} property.
         * @param handleResult Callback invoked when the popup is hidden. If provided,
         * this should be a function that receives the popup as a parameter.
         *
         * The <b>handleResult</b> callback allows callers to handle the result of modal
         * dialogs without attaching handlers to the {@link hidden} event. For example,
         * the code below shows a dialog used to edit the current item in a
         * {@link CollectionView}. The edits are committed or canceled depending on the
         * {@link Popup.dialogResult} value. For example:
         *
         * ```typescript
         * function editCurrentItem(popupEditor: Popup, view: CollectionView) {
         *     view.editItem(view.currentItem);
         *     popupEditor.show(true, (e: Popup) => {
         *         if (e.dialogResult == 'wj-hide-ok') {
         *             view.commitEdit();
         *         } else {
         *             view.cancelEdit();
         *         }
         *     });
         * }
         * ```
         */
        show(modal?: boolean, handleResult?: Function): void;
        /**
         * Hides the {@link Popup}.
         *
         * @param dialogResult Optional value assigned to the {@link dialogResult} property
         * before closing the {@link Popup}.
         */
        hide(dialogResult?: any): void;
        /**
         * Occurs before the {@link Popup} is shown.
         */
        readonly showing: Event<Popup, CancelEventArgs>;
        /**
         * Raises the {@link showing} event.
         *
         * @param e {@link CancelEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onShowing(e: wijmo.CancelEventArgs): boolean;
        /**
         * Occurs after the {@link Popup} has been shown.
         */
        readonly shown: Event<Popup, EventArgs>;
        /**
         * Raises the {@link shown} event.
         */
        onShown(e?: wijmo.EventArgs): void;
        /**
         * Occurs before the {@link Popup} is hidden.
         */
        readonly hiding: Event<Popup, CancelEventArgs>;
        /**
         * Raises the {@link hiding} event.
         *
         * @param e {@link CancelEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onHiding(e: wijmo.CancelEventArgs): boolean;
        /**
         * Occurs after the {@link Popup} has been hidden.
         */
        readonly hidden: Event<Popup, EventArgs>;
        /**
         * Raises the {@link hidden} event.
         */
        onHidden(e?: wijmo.EventArgs): void;
        /**
         * Occurs when the {@link Popup} is about to be resized.
         *
         * See also the {@link isResizable} property.
         */
        readonly resizing: Event<Popup, CancelEventArgs>;
        /**
         * Raises the {@link resizing} event.
         *
         * @param e {@link CancelEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onResizing(e: wijmo.CancelEventArgs): boolean;
        /**
         * Occurs after the {@link Popup} has been resized.
         *
         * See also the {@link isResizable} property.
         */
        readonly resized: Event<Popup, EventArgs>;
        /**
         * Raises the {@link resized} event.
         */
        onResized(e?: wijmo.EventArgs): void;
        /**
         * Occurs when the {@link Popup} is about to be dragged.
         *
         * See also the {@link isDraggable} property.
         */
        readonly dragging: Event<Popup, CancelEventArgs>;
        /**
         * Raises the {@link dragging} event.
         *
         * @param e {@link CancelEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onDragging(e: wijmo.CancelEventArgs): boolean;
        /**
         * Occurs after the {@link Popup} has been dragged.
         *
         * See also the {@link isDraggable} property.
         */
        readonly dragged: Event<Popup, EventArgs>;
        /**
         * Raises the {@link dragged} event.
         */
        onDragged(e?: wijmo.EventArgs): void;
        /**
         * Occurs while the user resizes the {@link Popup}, between the
         * {@link resizing} and {@link resized} events.
         *
         * When the user drags the {@link Popup}, it raises the following events:
         * - {@link resizing} (once, cancelable)
         * - {@link sizeChanging} (several times while the user moves the mouse, cancelable)
         * - {@link sizeChanged} (several times while the user moves the mouse)
         * - {@link resized} (once, at the end of the resizing process)
         *
         * See also the {@link isResizable} property.
         */
        readonly sizeChanging: Event<Popup, PopupBoundsChangingEventArgs>;
        /**
         * Raises the {@link sizeChanging} event.
         *
         * @param e {@link PopupBoundsChangingEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onSizeChanging(e: PopupBoundsChangingEventArgs): boolean;
        /**
         * Occurs while the user resizes the {@link Popup}, between the
         * {@link resizing} and {@link resized} events.
         *
         * When the user resizes the {@link Popup}, it raises the following events:
         * - {@link resizing} (once, cancelable)
         * - {@link sizeChanging} (several times while the user moves the mouse, cancelable)
         * - {@link sizeChanged} (several times while the user moves the mouse)
         * - {@link resized} (once, at the end of the resizing process)
         *
         * See also the {@link isResizable} property.
         */
        readonly sizeChanged: Event<Popup, EventArgs>;
        /**
         *
         * @param e Raises the {@link sizeChanged} event.
         */
        onSizeChanged(e?: wijmo.EventArgs): void;
        /**
         * Occurs while the user moves the {@link Popup}, between the
         * {@link dragging} and {@link dragged} events.
         *
         * When the user drags the {@link Popup}, it raises the following events:
         * - {@link dragging} (once, cancelable)
         * - {@link positionChanging} (several times while the user moves the mouse, cancelable)
         * - {@link positionChanged} (several times while the user moves the mouse)
         * - {@link dragged} (once, at the end of the resizing process)
         *
         * See also the {@link isDraggable} property.
         *
         * You can use the {@link positionChanging} event to cancel or to modify
         * the {@link Popup} bounds as the user drags the control.
         *
         * For example, the code keeps the popup in full view, preventing users
         * from dragging parts of the {@link Popup} off the screen:
         *
         * ```typescript
         * new Popup('#thePopup', {
         *     isDraggable: true,
         *     isResizable: true,
         *     hideTrigger: 'None',
         *
         *     // keep popup fully within the browser window
         *     positionChanging: (s: Popup, e: PopupBoundsChangingEventArgs) => {
         *         let bnd = e.bounds;
         *         bnd.left = Math.max(Math.min(bnd.left, innerWidth + scrollX - bnd.width), scrollX);
         *         bnd.top = Math.max(Math.min(bnd.top, innerHeight + scrollY - bnd.height), scrollY);
         *     }
         * });
         * ```
         */
        readonly positionChanging: Event<Popup, PopupBoundsChangingEventArgs>;
        /**
         * Raises the {@link positionChanging} event.
         *
         * @param e {@link PopupBoundsChangingEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onPositionChanging(e: PopupBoundsChangingEventArgs): boolean;
        /**
         * Occurs while the user moves the {@link Popup}, between the
         * {@link dragging} and {@link dragged} events.
         *
         * When the user drags the {@link Popup}, it raises the following events:
         * - {@link dragging} (once, cancelable)
         * - {@link positionChanging} (several times while the user moves the mouse)
         * - {@link positionChanged} (several times while the user moves the mouse)
         * - {@link dragged} (once, at the end of the resizing process)
         *
         * See also the {@link isDraggable} property.
         */
        readonly positionChanged: Event<Popup, EventArgs>;
        /**
         * Raises the {@link positionChanged} event.
         */
        onPositionChanged(e?: wijmo.EventArgs): void;
        onLostFocus(e?: wijmo.EventArgs): void;
        dispose(): void;
        refresh(fullUpdate?: boolean): void;
        protected _handleDragResize(on: boolean): void;
        protected _mousemove(e: MouseEvent): void;
        protected _mousedown(e: any): void;
        protected _mouseup(): void;
        protected _mousedrag(e: any): void;
        protected _getEdges(host: HTMLElement, e: MouseEvent): _Edges;
        protected _ownerClick(e: MouseEvent): void;
        protected _ownerDown(e: MouseEvent): void;
        protected _ownerBlur(e: UIEvent): void;
        protected _ownerEnter(e: MouseEvent): void;
        protected _ownerLeave(e: MouseEvent): void;
        protected _toggle(e: UIEvent, trigger: PopupTrigger): void;
        private _getHeaderElement;
        private _getClosestHeader;
        private _showBackdrop;
        protected _validateAndHide(result: any): void;
    }
    /**
     * Provides arguments for the {@link Popup} control's {@link sizeChanging} and
     * {@link positionChanging} events.
     */
    class PopupBoundsChangingEventArgs extends wijmo.CancelEventArgs {
        _rc: wijmo.Rect;
        /**
         * Initializes a new instance of the {@link PopupBoundsChangingEventArgs} class.
         */
        constructor(bounds: wijmo.Rect);
        /**
         * Gets a {@link Rect} that represents the bounds of the {@link Popup} control.
         */
        readonly bounds: wijmo.Rect;
    }
}
declare module wijmo.input {
    /**
     * The {@link InputDate} control allows users to type in dates using any format
     * supported by the {@link Globalize} class, or to pick dates from a drop-down
     * that contains a {@link Calendar} control.
     *
     * Use the {@link min} and {@link max} properties to restrict the range of
     * values that the user can enter.
     *
     * For details about using the {@link min} and {@link max} properties, please see the
     * <a href="/wijmo/docs/Topics/Input/Using-Min-Max">Using the min and max properties</a> topic.
     *
     * Use the {@link value} property to get or set the currently selected date.
     *
     * Use the {@link autoExpandSelection} property to determine whether the control should
     * automatically expand the selection to entire words, numbers, or dates when the user
     * clicks the input element.
     *
     * The example below shows a **Date** value using an {@link InputDate} control.
     *
     * {@sample Input/InputDate/Overview/purejs Example}
     */
    class InputDate extends DropDown {
        private _lbx;
        private _cal;
        private _fmt;
        private _sep;
        private _msk;
        private _rngs;
        private _showCal;
        private _clsOnSel;
        private _clicked;
        /**
         * Initializes a new instance of the {@link InputDate} class.
         *
         * @param element The DOM element that hosts the control, or a CSS selector for the host element (e.g. '#theCtrl').
         * @param options The JavaScript object containing initialization data for the control.
         */
        constructor(element: any, options?: any);
        /**
         * Gets or sets the currently selected date.
         *
         * The default value for this property is the current date.
         */
        value: Date;
        rangeEnd: Date;
        rangeMin: number;
        rangeMax: number;
        /**
         * Gets or sets the text shown on the control.
         */
        text: string;
        /**
         * Gets or sets the format used to display the selected date.
         *
         * The format string is expressed as a .NET-style
         * <a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings" target="_blank">
         * Date format string</a>.
         *
         * The default value for this property is **'d'**, the culture-dependent
         * short date pattern (e.g. 6/15/2020 in the US, 15/6/2020 in France, or
         * 2020/6/15 in Japan).
         */
        format: string;
        separator: string;
        mask: string;
        closeOnSelection: boolean;
        predefinedRanges: any;
        alwaysShowCalendar: boolean;
        /**
         * Gets or sets the earliest date that the user can enter.
         *
         * The default value for this property is **null**, which
         * means no earliest date is defined.
         *
         * For details about using the {@link min} and {@link max}
         * properties, please see the
         * <a href="/wijmo/docs/Topics/Input/Using-Min-Max">Using the min and max properties</a> topic.
         */
        min: Date;
        /**
         * Gets or sets the latest date that the user can enter.
         *
         * The default value for this property is **null**, which means no latest
         * date is defined.
         *
         * For details about using the {@link min} and {@link max} properties, please see the
         * <a href="/wijmo/docs/Topics/Input/Using-Min-Max">Using the min and max properties</a> topic.
         */
        max: Date;
        /**
         * Gets or sets a value that determines whether the calendar buttons
         * should act as repeat buttons, firing repeatedly as the button
         * remains pressed.
         *
         * The default value for this property is **true**.
         */
        repeatButtons: boolean;
        /**
         * Gets or sets a value that determines whether the drop-down
         * calendar should display a list of years when the user clicks
         * the header element on the year calendar.
         *
         * The default value for this property is **true**.
         */
        showYearPicker: boolean;
        showMonthPicker: boolean;
        /**
         * Gets or sets the number of weeks to show on the calendar
         * before the current month.
         *
         * The default value for this property is **zero**.
         */
        weeksBefore: number;
        /**
         * Gets or sets the number of weeks to show on the calendar
         * after the current month.
         *
         * The default value for this property is **zero**.
         */
        weeksAfter: number;
        /**
         * Gets or sets a value that indicates whether users can select
         * days, ranges, months, or no values at all.
         *
         * This property affects the behavior of the drop-down calendar,
         * but not the format used to display dates.
         * If you set {@link selectionMode} to 'Month', you should normally
         * set the {@link format} property to 'MMM yyyy' or some format that
         * does not include the day. For example:
         *
         * ```typescript
         * import { InputDate } from '@grapecity/wijmo.input';
         * var inputDate = new InputDate('#el, {
         *   selectionMode: 'Month',
         *   format: 'MMM yyyy'
         * });
         * ```
         *
         * The default value for this property is **DateSelectionMode.Day**.
         */
        selectionMode: DateSelectionMode;
        displayMonths: number;
        /**
         * Gets a reference to the {@link Calendar} control shown in the drop-down box.
         */
        readonly calendar: Calendar;
        /**
         * Gets the HTML input element hosted by the control.
         *
         * Use this property in situations where you want to customize the
         * attributes of the input element.
         */
        readonly inputElement: HTMLInputElement;
        /**
         * Gets or sets the "type" attribute of the HTML input element hosted by the control.
         *
         * By default, this property is set to **"tel"**, a value that causes mobile  devices
         * to show a numeric keypad that includes a negative sign and a decimal separator.
         *
         * Use this property to change the default setting if the default does not work well
         * for the current culture, device, or application. In those cases, try changing
         * the value to "number" or "text."
         *
         * Note that input elements with type "number" prevent selection in Chrome and therefore
         * is not recommended. For more details, see this link:
         * https://stackoverflow.com/questions/21177489/selectionstart-selectionend-on-input-type-number-no-longer-allowed-in-chrome
         */
        inputType: string;
        /**
         * Gets or sets a validator function to determine whether dates are valid for selection.
         *
         * If specified, the validator function should take one parameter representing the
         * date to be tested, and should return false if the date is invalid and should not
         * be selectable.
         *
         * For example, the code below prevents users from selecting dates that fall on
         * weekends:
         *
         * ```typescript
         * inputDate.itemValidator = date => {
         *     const weekday = date.getDay();
         *     return weekday != 0 && weekday != 6;
         * }
         * ```
         */
        itemValidator: IDateValidator;
        /**
         * Gets or sets a formatter function to customize dates in the drop-down calendar.
         *
         * The formatter function can add any content to any date. It allows
         * complete customization of the appearance and behavior of the calendar.
         *
         * If specified, the function takes two parameters:
         * <ul>
         *     <li>the date being formatted </li>
         *     <li>the HTML element that represents the date</li>
         * </ul>
         *
         * For example, the code below shows weekends with a yellow background:
         *
         * ```typescript
         * inputDate.itemFormatter = (date, element) => {
         *     const day = date.getDay();
         *     element.style.backgroundColor = day == 0 || day == 6 ? 'yellow' : '';
         * }
         * ```
         */
        itemFormatter: IDateFormatter;
        /**
         * Occurs when the value of the {@link value} property changes.
         */
        readonly valueChanged: Event<InputDate, EventArgs>;
        /**
         * Raises the {@link valueChanged} event.
         */
        onValueChanged(e?: wijmo.EventArgs): void;
        readonly rangeEndChanged: Event<Calendar, EventArgs>;
        onRangeEndChanged(e?: wijmo.EventArgs): void;
        refresh(fullUpdate?: boolean): void;
        onIsDroppedDownChanging(e: wijmo.CancelEventArgs): boolean;
        onIsDroppedDownChanged(e?: wijmo.EventArgs): void;
        protected _updateDropDown(): void;
        protected _keydown(e: KeyboardEvent): void;
        protected _expandSelection(): void;
        _refreshText(): void;
        _selectAll(): void;
        _closeOnChange(): void;
        private _tryFocus;
        protected _clamp(value: Date): Date;
        protected _getText(): string;
        protected _commitText(): void;
        protected _fromDateTime(value: Date): Date;
        private _canChangeValue;
        protected _isValidDate(value: Date): boolean;
        private _getRanges;
        private _updateRangeSelection;
    }
}
declare module wijmo.input {
}
declare module wijmo.input {
    /**
     * The {@link InputColor} control allows users to select colors by typing in
     * HTML-supported color strings, or to pick colors from a drop-down
     * that shows a {@link ColorPicker} control.
     *
     * Use the {@link value} property to get or set the currently selected color.
     *
     * {@sample Input/InputColor/Overview/purejs Example}
     */
    class InputColor extends DropDown {
        private _ePreview;
        private _colorPicker;
        private _value;
        /**
         * Initializes a new instance of the {@link InputColor} class.
         *
         * @param element The DOM element that hosts the control, or a selector for the host element (e.g. '#theCtrl').
         * @param options The JavaScript object containing initialization data for the control.
         */
        constructor(element: any, options?: any);
        /**
         * Gets or sets the current color.
         */
        value: string;
        /**
         * Gets or sets the text shown on the control.
         */
        text: string;
        /**
         * Gets or sets a value indicating whether the {@link ColorPicker}
         * allows users to edit the color's alpha channel (transparency).
         *
         * The default value for this property is <b>true</b>.
         */
        showAlphaChannel: boolean;
        /**
         * Gets or sets a value indicating whether the {@link ColorPicker}
         * shows a string representation of the current color.
         *
         * The default value for this property is <b>false</b>.
         */
        showColorString: boolean;
        /**
         * Gets or sets an array that contains the colors in the palette.
         *
         * The palette contains ten colors, represented by an array with
         * ten strings. The first two colors are usually white and black.
         */
        palette: string[];
        /**
         * Gets a reference to the {@link ColorPicker} control shown in the drop-down.
         */
        readonly colorPicker: ColorPicker;
        /**
         * Occurs when the value of the {@link value} property changes, either
         * as a result of user actions or by assignment in code.
         */
        readonly valueChanged: Event<InputColor, EventArgs>;
        /**
         * Raises the {@link valueChanged} event.
         */
        onValueChanged(e?: wijmo.EventArgs): void;
        onIsDroppedDownChanged(e?: wijmo.EventArgs): void;
        protected _createDropDown(): void;
        protected _keydown(e: KeyboardEvent): void;
        protected _commitText(): void;
    }
}
declare module wijmo.input {
    /**
     * The {@link ComboBox} control allows users to pick strings from lists.
     *
     * The control automatically completes entries as the user types, and
     * allows users to show a drop-down list with the items available.
     *
     * Use the {@link ComboBox.itemsSource} property to populate the list of
     * options.
     * The items may be strings or objects. If the items are objects, use
     * the {@link ComboBox.displayMemberPath} to define which property of the
     * items will be displayed in the list and use the {@link ComboBox.selectedValuePath}
     * property to define which property of the items will be used to set the
     * combo's {@link ComboBox.selectedValue} property.
     *
     * Use the {@link ComboBox.selectedIndex} or the {@link ComboBox.text} properties
     * to determine which item is currently selected.
     *
     * The {@link ComboBox.isRequired} property determines whether the control
     * must have a non-null value or whether it can be set to null
     * (by deleting the content of the control). If the value is set to null,
     * the {@link ComboBox.selectedIndex} is set to -1.
     *
     * The {@link ComboBox.isEditable} property determines whether users can enter
     * values that are not present in the list.
     *
     * The example below creates a {@link ComboBox} control and populates it with
     * a list of countries. The {@link ComboBox} searches for the country as the
     * user types.
     * The {@link ComboBox.isEditable} property is set to false, so the user must
     * select one of the items in the list.
     *
     * {@sample Input/ComboBox/Overview/purejs Example}
     */
    class ComboBox extends DropDown {
        _lbx: ListBox;
        _editable: boolean;
        _trimText: boolean;
        _delKey: number;
        _composing: boolean;
        _settingText: boolean;
        _pathHdr: Binding;
        _bsCollapse: boolean;
        _fmtItemHandlers: number;
        /**
         * Initializes a new instance of the {@link ComboBox} class.
         *
         * @param element The DOM element that hosts the control, or a selector for the host element (e.g. '#theCtrl').
         * @param options The JavaScript object containing initialization data for the control.
         */
        constructor(element: any, options?: any);
        /**
         * Gets or sets the array or {@link ICollectionView} object that contains
         * the items to select from.
         *
         * Setting this property to an array causes the {@link ComboBox} to create
         * an internal {@link ICollectionView} object that is exposed by the
         * {@link ComboBox.collectionView} property.
         *
         * The {@link ComboBox} selection is determined by the current item in its
         * {@link ComboBox.collectionView}. By default, this is the first item in
         * the collection. You may change this behavior by setting the
         * {@link wijmo.CollectionView.currentItem} property of the
         * {@link ComboBox.collectionView} to null.
         */
        itemsSource: any;
        /**
         * Gets the {@link ICollectionView} object used as the item source.
         */
        readonly collectionView: wijmo.collections.ICollectionView;
        /**
         * Gets or sets a value that determines whether the drop-down {@link ListBox}
         * should include group header items to delimit data groups.
         *
         * Data groups are created by modifying the {@link ICollectionView.groupDescriptions}
         * property of the {@link ICollectionView} object used as an {@link itemsSource}.
         *
         * The default value for this property is <b>false</b>.
         */
        showGroups: boolean;
        /**
         * Gets or sets the name of the property to use as the visual
         * representation of the items.
         */
        displayMemberPath: string;
        /**
         * Gets or sets the name of a property to use for getting the value
         * displayed in the control's input element.
         *
         * The default value for this property is null, which causes the control
         * to display the same content in the input element as in the selected
         * item of the drop-down list.
         *
         * Use this property if you want to de-couple the value shown in the
         * input element from the values shown in the drop-down list. For example,
         * the input element could show an item's name and the drop-down list
         * could show additional detail.
         */
        headerPath: string;
        /**
         * Gets or sets the name of the property used to get the
         * {@link selectedValue} from the {@link selectedItem}.
         */
        selectedValuePath: string;
        /**
         * Gets or sets a value indicating whether the drop-down list displays
         * items as plain text or as HTML.
         *
         * The default value for this property is <b>false</b>.
         */
        isContentHtml: boolean;
        /**
         * Gets or sets a value that determines whether searches performed
         * while the user types should case-sensitive.
         *
         * The default value for this property is <b>false</b>.
         */
        caseSensitiveSearch: boolean;
        /**
         * Gets or sets a value that determines whether values in the
         * control's input element should be trimmed by removing leading
         * and trailing spaces.
         *
         * The default value for this property is <b>true</b>.
         *
         * To see leading and trailing spaces in the drop-down list items,
         * you may have to apply a CSS rule such as this one:
         *
         * ```css
         * .wj-listbox-item {
         *     white-space: pre;
         * }
         * ```
         * </pre>
         */
        trimText: boolean;
        /**
         * Gets or sets a function used to customize the values shown in
         * the drop-down list.
         * The function takes two arguments, the item index and the default
         * text or html, and returns the new text or html to display.
         *
         * If the formatting function needs a scope (i.e. a meaningful 'this'
         * value), then remember to set the filter using the 'bind' function
         * to specify the 'this' object. For example:
         *
         * ```typescript
         * comboBox.itemFormatter = customItemFormatter.bind(this);
         * function customItemFormatter(index, content) {
         *     if (this.makeItemBold(index)) {
         *         content = '&lt;b&gt;' + content + '&lt;/b&gt;';
         *     }
         *     return content;
         * }
         * ```
         */
        itemFormatter: IItemFormatter;
        /**
         * Event that fires when items in the drop-down list are created.
         *
         * You can use this event to modify the HTML in the list items.
         * For details, see the {@link ListBox.formatItem} event.
         */
        readonly formatItem: wijmo.Event<ListBox, FormatItemEventArgs>;
        /**
         * Gets or sets the index of the currently selected item in
         * the drop-down list.
         */
        selectedIndex: number;
        /**
         * Gets or sets the item that is currently selected in
         * the drop-down list.
         */
        selectedItem: any;
        /**
         * Gets or sets the value of the {@link selectedItem}, obtained
         * using the {@link selectedValuePath}.
         *
         * If the {@link selectedValuePath} property is not set, gets or
         * sets the value of the control's {@link selectedItem} property.
         *
         * If the {@link itemsSource} property is not set, gets or sets
         * the value of the control's {@link text} property.
         */
        selectedValue: any;
        /**
         * Gets or sets a value that determines whether the content of the
         * input element should be restricted to items in the {@link itemsSource}
         * collection.
         *
         * This property defaults to false on the {@link ComboBox} control, and
         * to true on the {@link AutoComplete} and {@link InputTime} controls.
         */
        isEditable: boolean;
        /**
         * Gets or sets the maximum height of the drop-down list, in pixels.
         */
        maxDropDownHeight: number;
        /**
         * Gets or sets the maximum width of the drop-down list.
         *
         * The width of the drop-down list is also limited by the width of
         * the control itself (that value represents the drop-down's
         * minimum width).
         */
        maxDropDownWidth: number;
        /**
         * Gets the string displayed in the input element for the item at a
         * given index (always plain text).
         *
         * @param index The index of the item to retrieve the text for.
         * @param trimText Optionally override the value of the {@link trimText} property.
         */
        getDisplayText(index?: number, trimText?: boolean): string;
        /**
         * Gets the index of the first item that matches a given string.
         *
         * @param search String to search for.
         * @param fullMatch Whether to look for a full match or just the start of the string.
         * @return The index of the item, or -1 if not found.
         */
        indexOf(search: string, fullMatch: boolean): number;
        /**
         * Gets the {@link ListBox} control shown in the drop-down.
         */
        readonly listBox: ListBox;
        /**
         * Occurs when the value of the {@link itemsSource} property changes.
         */
        readonly itemsSourceChanged: Event<ComboBox, EventArgs>;
        /**
         * Raises the {@link itemsSourceChanged} event.
         */
        onItemsSourceChanged(e?: wijmo.EventArgs): void;
        /**
         * Occurs when the value of the {@link selectedIndex} property changes.
         */
        readonly selectedIndexChanged: Event<ComboBox, EventArgs>;
        /**
         * Raises the {@link selectedIndexChanged} event.
         */
        onSelectedIndexChanged(e?: wijmo.EventArgs): void;
        refresh(fullUpdate?: boolean): void;
        onLostFocus(e?: wijmo.EventArgs): void;
        onIsDroppedDownChanging(e: wijmo.CancelEventArgs): boolean;
        onIsDroppedDownChanged(e?: wijmo.EventArgs): void;
        protected _updateBtn(): void;
        protected _hasItems(): boolean;
        private _updateAria;
        protected _createDropDown(): void;
        protected _wheel(e: WheelEvent): void;
        protected _dropDownClick(e: MouseEvent): void;
        protected _setText(text: string, fullMatch: boolean): void;
        protected _findNext(search: string, step: number): number;
        protected _keydown(e: KeyboardEvent): void;
        protected _updateInputSelection(start: number): void;
        private _getSelStart;
        private _getSelEnd;
        private _setSelRange;
    }
}
declare module wijmo.input {
    /**
     * Represents a method that returns a string used as a header for a
     * {@link MultiSelect} control.
     */
    interface IHeaderFormatter {
        /**
         * @param sender {@link MultiSelect} whose header is being formatted.
         * @returns The text to show in the control's header element.
         */
        (sender: MultiSelect): string;
    }
    /**
     * The {@link MultiSelect} control allows users to select multiple items from
     * drop-down lists that contain custom objects or simple strings.
     *
     * The {@link MultiSelect} control extends {@link ComboBox}, with all the usual
     * properties, including {@link MultiSelect.itemsSource} and
     * {@link MultiSelect.displayMemberPath}.
     *
     * Like the {@link ListBox} control, it has a {@link MultiSelect.checkedMemberPath}
     * property that defines the name of the property that determines whether an
     * item is checked or not.
     *
     * The items currently checked (selected) can be obtained using the
     * {@link MultiSelect.checkedItems} property.
     *
     * The control header is fully customizable. By default, it shows up to two items
     * selected and the item count after that. You can change the maximum number of
     * items to display ({@link MultiSelect.maxHeaderItems}), the message shown when no
     * items are selected ({@link MultiSelect.placeholder}), and the format string used to
     * show the item count ({@link MultiSelect.headerFormat}).
     *
     * Alternatively, you can provide a function to generate the header content based
     * on whatever criteria your application requires ({@link MultiSelect.headerFormatter}).
     *
     * The example below shows how you can use a {@link MultiSelect} control to select
     * multiple items from a drop-down list:
     *
     * {@sample Input/MultiSelect/Overview Example}
     */
    class MultiSelect extends ComboBox {
        private _maxHdrItems;
        private _readOnly;
        private _hdrFmt;
        private _hdrFormatter;
        private _msLbx;
        static _DEF_CHECKED_PATH: string;
        /**
         * Initializes a new instance of the {@link MultiSelect} class.
         *
         * @param element The DOM element that hosts the control, or a CSS selector for the host element (e.g. '#theCtrl').
         * @param options The JavaScript object containing initialization data for the control.
         */
        constructor(element: any, options?: any);
        /**
         * Gets or sets whether the control should display a "Select All" checkbox
         * above the items to select or de-select all items.
         *
         * The default value for this property is <b>false</b>.
         */
        showSelectAllCheckbox: boolean;
        /**
         * Gets or sets whether the control should display a "filter" input
         * above the items to filter the items displayed.
         *
         * The default value for this property is <b>false</b>.
         */
        showFilterInput: boolean;
        /**
         * Gets or sets the string used as a placeholder for the filter input
         * element on the {@link MultiSelectListBox} drop-down.
         *
         * The default value for this property is null, which causes the control
         * to show a localized version of the string "Filter".
         */
        filterInputPlaceholder: string;
        /**
         * Gets or sets a value that determines whether the {@link MultiSelectListBox}
         * in the drop-down should automatically select all the filtered items when the
         * filter text changes.
         *
         * The default value for this property is <b>true</b>.
         */
        checkOnFilter: boolean;
        /**
         * Gets or sets the string to be used as a label for the "Select All"
         * checkbox that is displayed when the {@link showSelectAllCheckbox}
         * property is set to true.
         *
         * This property is set to null by default, which causes the control
         * to show a localized version of the string "Select All".
         */
        selectAllLabel: string;
        /**
         * Gets or sets the name of the property used to control the checkboxes
         * placed next to each item.
         */
        checkedMemberPath: string;
        /**
         * Gets or sets the maximum number of items to display on the control header.
         *
         * If no items are selected, the header displays the text specified by the
         * {@link placeholder} property.
         *
         * If the number of selected items is smaller than or equal to the value of the
         * {@link maxHeaderItems} property, the selected items are shown in the header.
         *
         * If the number of selected items is greater than {@link maxHeaderItems}, the
         * header displays the selected item count instead.
         */
        maxHeaderItems: number;
        /**
         * Gets or sets the format string used to create the header content
         * when the control has more than {@link maxHeaderItems} items checked.
         *
         * The format string may contain the '{count}' replacement string
         * which gets replaced with the number of items currently checked.
         * The default value for this property in the English culture is
         * '{count:n0} items selected'.
         */
        headerFormat: string;
        /**
         * Gets or sets a function that gets the text displayed in the control
         * header.
         *
         * By default, the control header content is determined based on the
         * {@link placeholder}, {@link maxHeaderItems}, and on the current selection.
         *
         * You may customize the header content by specifying a function that
         * returns a custom string based on whatever criteria your application
         * requires.
         */
        headerFormatter: IHeaderFormatter;
        /**
         * Gets or sets an array containing the items that are currently checked.
         */
        checkedItems: any[];
        /**
         * Occurs when the value of the {@link checkedItems} property changes.
         */
        readonly checkedItemsChanged: Event<MultiSelect, EventArgs>;
        /**
         * Raises the {@link checkedItemsChanged} event.
         */
        onCheckedItemsChanged(e?: wijmo.EventArgs): void;
        dispose(): void;
        onIsDroppedDownChanged(e?: wijmo.EventArgs): void;
        protected _createDropDown(): void;
        isReadOnly: boolean;
        refresh(fullUpdate?: boolean): void;
        protected _setText(text: string, fullMatch: boolean): void;
        protected _keydown(e: KeyboardEvent): void;
        protected _hasItems(): boolean;
        private _updateHeader;
    }
}
declare module wijmo.input {
    /**
     * The {@link Menu} control shows a text element with a drop-down list of commands that
     * the user can invoke by click or touch.
     *
     * The {@link Menu} control inherits from {@link ComboBox}, so you populate and style it
     * in the same way that you do the {@link ComboBox} (see the {@link Menu.itemsSource}
     * property).
     *
     * The {@link Menu} control adds an {@link Menu.itemClicked} event that fires when the user
     * selects an item from the menu. The event handler can inspect the {@link Menu} control
     * to determine which item was clicked. For example:
     *
     * ```typescript
     * import { Menu } from '@grapecity/wijmo.input';
     * let menu = new Menu(hostElement, {
     *     header: 'Main Menu',
     *     itemsSource: ['option 1', 'option 2', 'option 3'],
     *     itemClicked: s => {
     *         alert('Thanks for selecting item ' + s.selectedIndex + ' from menu ' + s.header + '!');
     *     }
     * });
     * ```
     *
     * The example below shows how you can create menus that handle the
     * {@link itemClicked} event.
     *
     * {@sample Input/Menu/Overview Example}
     */
    class Menu extends ComboBox {
        _hdr: HTMLElement;
        _closing: boolean;
        _cmd: any;
        _cmdPath: string;
        _cmdParamPath: string;
        _subPath: string;
        _defaultItem: any;
        _owner: HTMLElement;
        _isButton: boolean;
        _openOnHover: boolean;
        _closeOnLeave: boolean;
        _toHover: any;
        _subMenu: Menu;
        _hoverEnterBnd: any;
        _hoverLeaveBnd: any;
        _hoverOverBnd: any;
        static _evtHover: MouseEvent;
        /**
         * Initializes a new instance of the {@link Menu} class.
         *
         * @param element The DOM element that hosts the control, or a CSS selector for the host element (e.g. '#theCtrl').
         * @param options The JavaScript object containing initialization data for the control.
         */
        constructor(element: any, options?: any);
        /**
         * Gets or sets the HTML text shown in the {@link Menu} element.
         */
        header: string;
        /**
         * Gets or sets the command to execute when an item is clicked.
         *
         * Commands are objects that implement two methods:
         * <ul>
         *  <li><b>executeCommand(parameter)</b> This method executes the command.</li>
         *  <li><b>canExecuteCommand(parameter)</b> This method returns a Boolean value
         *      that determines whether the controller can execute the command.
         *      If this method returns false, the menu option is disabled.</li>
         * </ul>
         *
         * The parameter passed to the command is defined by the value of the
         * {@link commandParameterPath} property of the current item. If the
         * {@link commandParameterPath} property is not specified, the parameter
         * passed is the item itself.
         *
         * You can also set commands on individual items using the {@link commandPath}
         * property.
         */
        command: any;
        /**
         * Gets or sets the name of the property that contains the command to
         * execute when the user clicks an item.
         *
         * Commands are objects that implement two methods:
         * <ul>
         *  <li><b>executeCommand(parameter)</b> This method executes the command.</li>
         *  <li><b>canExecuteCommand(parameter)</b> This method returns a Boolean value
         *      that determines whether the controller can execute the command.
         *      If this method returns false, the menu option is disabled.</li>
         * </ul>
         */
        commandPath: string;
        /**
         * Gets or sets the name of the property that contains a parameter to use with
         * the command specified by the {@link commandPath} property.
         */
        commandParameterPath: string;
        /**
         * Gets or sets the name of the property that contains an array with items
         * to be displayed in a sub-menu.
         */
        subItemsPath: string;
        /**
         * Gets or sets a value that determines whether the menu (and any sub-menus)
         * should open automatically when the mouse hovers over the items.
         *
         * See also the {@link closeOnLeave} property, which determines whether the
         * menu should close automatically when the mouse leaves the menu.
         *
         * The default value for this property is <b>false</b>.
         */
        openOnHover: boolean;
        /**
         * Gets or sets a value that determines whether the menu (and any sub-menus)
         * should close automatically when the mouse leaves the menu.
         *
         * This property is applicable only when the {@link openOnHover} is set to true.
         *
         * The default value for this property is <b>true</b>.
         */
        closeOnLeave: boolean;
        /**
         * Gets or sets a value that determines whether this {@link Menu} should act
         * as a split button instead of a regular menu.
         *
         * The default value for this property is <b>false</b>.
         *
         * The difference between regular menus and split buttons is what happens
         * when the user clicks the menu header.
         * In regular menus, clicking the header shows or hides the menu options.
         * In split buttons, clicking the header raises the {@link Menu.itemClicked}
         * event and/or invokes the command associated with the last option selected by
         * the user as if the user had picked the item from the drop-down list.
         *
         * If you want to differentiate between clicks on menu items and the button
         * part of a split button, check the value of the {@link Menu.isDroppedDown} property
         * of the event sender. If that is true, then a menu item was clicked; if it
         * is false, then the button was clicked.
         *
         * For example, the code below implements a split button that uses the drop-down
         * list only to change the default item/command, and triggers actions only when
         * the button is clicked:
         *
         * ```html
         * <wj-menu is-button="true" header="Run" value="browser" item-clicked="itemClicked(s, e)>
         *     <wj-menu-item value="'Internet Explorer'">Internet Explorer</wj-menu-item>
         *     <wj-menu-item value="'Chrome'">Chrome</wj-menu-item>
         *     <wj-menu-item value="'Firefox'">Firefox</wj-menu-item>
         *     <wj-menu-item value="'Safari'">Safari</wj-menu-item>
         *     <wj-menu-item value="'Opera'">Opera</wj-menu-item>
         * </wj-menu>
         * ```
         * ```typescript
         * // controller
         * $scope.browser = 'Internet Explorer';
         * $scope.itemClicked = (s, e) => {
         *     if (!s.isDroppedDown) { // if not dropped down, click was on the button
         *         alert('running ' + $scope.browser);
         *     }
         * }
         * ```
         */
        isButton: boolean;
        /**
         * Gets or sets the element that owns this {@link Menu}.
         *
         * This variable is set by the wj-context-menu directive in case a single
         * menu is used as a context menu for several different elements.
         */
        owner: HTMLElement;
        /**
         * Shows the menu at a given location.
         *
         * @param position An optional <b>MouseEvent</b> or reference element
         * that determines the position where the menu should be displayed.
         * If not provided, the menu is displayed at the center of the screen.
    
         * This method is useful if you want to use the menu as a context
         * menu attached to one or more elements on the page. For example:
         *
         * ```typescript
         * import { Menu } from '@grapecity/wijmo.input';
         * let theMenu = new Menu(document.createElement('div'), {
         *     itemsSource: 'New,Open,Save,Exit'.split(','),
         *     itemClicked: s => {
         *         alert('thanks for picking ' + s.selectedIndex);
         *     }
         * });
         *
         * // use it as a context menu for one or more elements
         * let element = document.getElementById('btn');
         * element.addEventListener('contextmenu', e => {
         *     e.preventDefault();
         *     theMenu.show(e);
         * });
         * ```
         * You can adjust the position of the menu by setting the margin of
         * the menu's dropdown. For example, the code below causes the menu
         * to be displayed 20 pixels away from the point that was clicked:
         *
         * ```typescript
         * // add 20-pixel offset to the menu
         * theMenu.dropDown.style.margin = '20px';
         *
         * // show menu as a context menu
         * let element = document.getElementById('btn');
         * element.addEventListener('contextmenu', e => {
         *     e.preventDefault();
         *     theMenu.show(e);
         * });
         * ```
         */
        show(position?: any): void;
        /**
         * Hides the menu.
         *
         * This method is useful if you want to hide a context menu displayed
         * with the {@link show} method.
         */
        hide(): void;
        /**
         * Occurs when the user picks an item from the menu.
         *
         * The handler can determine which item was picked by reading the event sender's
         * {@link selectedIndex} property.
         */
        readonly itemClicked: Event<Menu, EventArgs>;
        /**
         * Raises the {@link itemClicked} event.
         */
        onItemClicked(e?: wijmo.EventArgs): void;
        refresh(fullUpdate?: boolean): void;
        onIsDroppedDownChanged(e?: wijmo.EventArgs): void;
        _updateHoverEvents(): void;
        _getSubItems(item: any): any[];
        _formatMenuItem(s: ListBox, e: FormatItemEventArgs): void;
        protected _keydown(e: KeyboardEvent): void;
        protected _dropDownClick(e: MouseEvent): void;
        private _showSubMenu;
        private _raiseCommand;
        private _getCommand;
        private _getCommandParm;
        private _executeCommand;
        private _canExecuteCommand;
        private _enableDisableItems;
        private _clearHover;
        private _hoverEnter;
        private _hoverLeave;
        private _hoverOver;
    }
}
declare module wijmo.input {
    /**
     * The {@link InputTime} control allows users to enter times using any format
     * supported by the {@link Globalize} class, or to pick times from a drop-down
     * list.
     *
     * The {@link min}, {@link max}, and {@link step} properties determine the values shown
     * in the list.
     *
     * For details about using the {@link min} and {@link max} properties, please see the
     * <a href="/wijmo/docs/Topics/Input/Using-Min-Max">Using the min and max properties</a> topic.
     *
     * The {@link value} property gets or sets a {@link Date} object that represents the time
     * selected by the user.
     *
     * The example below shows a **Date** value (that includes date and time information)
     * using an {@link InputDate} and an {@link InputTime} control. Notice how both controls
     * are bound to the same controller variable, and each edits the appropriate information
     * (either date or time).
     *
     * {@sample Input/InputTime/Overview/purejs Example}
     */
    class InputTime extends ComboBox {
        _value: Date;
        _min: Date;
        _max: Date;
        _step: number;
        _format: string;
        _msk: wijmo._MaskProvider;
        _hasCustomItems: boolean;
        /**
         * Initializes a new instance of the {@link InputTime} class.
         *
         * @param element The DOM element that hosts the control, or a CSS selector for the host element (e.g. '#theCtrl').
         * @param options The JavaScript object containing initialization data for the control.
         */
        constructor(element: any, options?: any);
        /**
         * Gets the HTML input element hosted by the control.
         *
         * Use this property in situations where you want to customize the
         * attributes of the input element.
         */
        readonly inputElement: HTMLInputElement;
        /**
         * Gets or sets the "type" attribute of the HTML input element hosted by the control.
         *
         * By default, this property is set to "tel", a value that causes mobile devices to
         * show a numeric keypad that includes a negative sign and a decimal separator.
         *
         * Use this property to change the default setting if the default does not work well
         * for the current culture, device, or application. In those cases, try changing
         * the value to "number" or "text."
         *
         * Note that input elements with type "number" prevent selection in Chrome and therefore
         * is not recommended. For more details, see this link:
         * https://stackoverflow.com/questions/21177489/selectionstart-selectionend-on-input-type-number-no-longer-allowed-in-chrome
         */
        inputType: string;
        /**
         * Gets or sets the current input time.
         */
        value: Date;
        /**
         * Gets or sets the text shown in the control.
         */
        text: string;
        /**
         * Gets or sets the earliest time that the user can enter.
         *
         * For details about using the {@link min} and {@link max} properties, please see the
         * <a href="/wijmo/docs/Topics/Input/Using-Min-Max">Using the min and max properties</a> topic.
         */
        min: Date;
        /**
         * Gets or sets the latest time that the user can enter.
         *
         * For details about using the {@link min} and {@link max} properties, please see the
         * <a href="/wijmo/docs/Topics/Input/Using-Min-Max">Using the min and max properties</a> topic.
         */
        max: Date;
        /**
         * Gets or sets the number of minutes between entries in the drop-down list.
         *
         * The default value for this property is **15** minutes.
         * Setting it to null, zero, or any negative value disables the drop-down.
         */
        step: number;
        /**
         * Gets or sets the format used to display the selected time (see {@link Globalize}).
         *
         * The format string is expressed as a .NET-style
         * <a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings" target="_blank">
         * time format string</a>.
         *
         * The default value for this property is **'t'** (short time pattern).
         */
        format: string;
        /**
         * Gets or sets a mask to use while the user is editing.
         *
         * The mask format is the same used by the {@link wijmo.input.InputMask}
         * control.
         *
         * If specified, the mask must be compatible with the value of
         * the {@link format} property. For example, you can use the mask '99:99 >LL'
         * for entering short times (format 't').
         */
        mask: string;
        /**
         * Occurs when the value of the {@link value} property changes, either
         * as a result of user actions or by assignment in code.
         */
        readonly valueChanged: Event<InputTime, EventArgs>;
        /**
         * Raises the {@link valueChanged} event.
         */
        onValueChanged(e?: wijmo.EventArgs): void;
        onItemsSourceChanged(e?: wijmo.EventArgs): void;
        refresh(fullUpdate?: boolean): void;
        onSelectedIndexChanged(e?: wijmo.EventArgs): void;
        _clamp(value: Date): Date;
        protected _wheel(e: WheelEvent): void;
        protected _updateInputSelection(start: number): void;
        protected _updateItems(): void;
        private _getTime;
        protected _keydown(e: KeyboardEvent): void;
        protected _commitText(): void;
    }
}
declare module wijmo.input {
    /**
     * The {@link InputDateTime} control extends the {@link InputDate} control to allows users
     * to input dates and times, either by typing complete date/time values in any format
     * supported by the {@link Globalize} class, or by picking dates from a drop-down calendar
     * and times from a drop-down list.
     *
     * Use the {@link InputDateTime.min} and {@link InputDateTime.max} properties to restrict
     * the range of dates that the user can enter.
     *
     * Use the {@link InputDateTime.timeMin} and {@link InputDateTime.timeMax} properties to
     * restrict the range of times that the user can enter.
     *
     * Use the {@link InputDateTime.value} property to gets or set the currently selected
     * date/time.
     *
     * The example below shows how you can use an {@link InputDateTime} control to edit
     * dates and times using a single control:
     *
     * {@sample Input/InputDateTime/Overview Example}
     */
    class InputDateTime extends InputDate {
        private _btnTm;
        private _inputTime;
        private _ddDate;
        private _ddTime;
        /**
         * Gets or sets the template used to instantiate {@link InputDateTime} controls.
         */
        static controlTemplate: string;
        /**
         * Initializes a new instance of the {@link InputDateTime} class.
         *
         * @param element The DOM element that hosts the control, or a CSS selector for the host element (e.g. '#theCtrl').
         * @param options The JavaScript object containing initialization data for the control.
         */
        constructor(element: any, options?: any);
        /**
         * Gets or sets the earliest time that the user can enter.
         *
         * The default value for this property is **null**, which means there
         * is no earliest time limit.
         */
        timeMin: Date;
        /**
         * Gets or sets the latest time that the user can enter.
         *
         * The default value for this property is **null**, which means there
         * is no latest time limit.
         */
        timeMax: Date;
        /**
         * Gets or sets the format used to display times in the drop-down list.
         *
         * This property does not affect the value shown in the control's input element.
         * That value is formatted using the {@link format} property.
         *
         * The format string is expressed as a .NET-style
         * <a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings" target="_blank">
         * time format string</a>.
         *
         * The default value for this property is **'t'** (short time pattern).
         */
        timeFormat: string;
        /**
         * Gets or sets the number of minutes between entries in the drop-down list of times.
         *
         * The default value for this property is **15** minutes.
         */
        timeStep: number;
        /**
         * Gets a reference to the inner {@link InputTime} control so you can access its
         * full object model.
         */
        readonly inputTime: InputTime;
        protected _fromDateTime(value: Date): Date;
        protected _btnclick(e: MouseEvent): void;
        dispose(): void;
        refresh(fullUpdate?: boolean): void;
        protected _updateBtn(): void;
        protected _setDropdown(e: HTMLElement): boolean;
        protected _updateDropDown(): void;
    }
}
declare module wijmo.input {
    /**
     * Represents a method that returns data items asynchronously as the user types.
     */
    interface IGetItems {
        /**
         * @param query Query string typed by the user.
         * @param maxItems Maximum number of items to return.
         * @param callback Callback function to invoke when the results become available.
         */
        (query: string, maxItems: number, callback: IGetItemsCallback): void;
    }
    /**
     * Represents a method to invoke when the data items become available.
     */
    interface IGetItemsCallback {
        /**
         * items Array of data items retrieved asynchrounously.
         * */
        (items: any[]): void;
    }
    /**
     * The {@link AutoComplete} control is an input control that allows callers
     * to customize the item list as the user types.
     *
     * The control is similar to the {@link ComboBox}, except the item source is a
     * function ({@link itemsSourceFunction}) rather than a static list. For example,
     * you can look up items on remote databases as the user types.
     *
     * The example below creates an {@link AutoComplete} control and populates it using
     * a 'countries' array. The {@link AutoComplete} searches for the country as the user
     * types, and narrows down the list of countries that match the current input.
     *
     * {@sample Input/AutoComplete/Overview/purejs Example}
     */
    class AutoComplete extends ComboBox {
        private _cssMatch;
        private _itemsSourceFn;
        private _itemsSourceFnCallbackBnd;
        private _srchProp;
        private _minLength;
        private _maxItems;
        private _itemCount;
        private _beginsWith;
        private _delay;
        private _toSearch;
        private _query;
        private _rxSrch;
        private _rxHighlight;
        private _inCallback;
        private _srchProps;
        /**
         * Initializes a new instance of the {@link AutoComplete} class.
         *
         * @param element The DOM element that hosts the control, or a selector for the host element (e.g. '#theCtrl').
         * @param options The JavaScript object containing initialization data for the control.
         */
        constructor(element: any, options?: any);
        /**
         * Gets or sets the minimum input length to trigger auto-complete suggestions.
         *
         * The default value for this property is <b>2</b>.
         */
        minLength: number;
        /**
         * Gets or sets a value that determines whether to search for items
         * that begin with the given search term.
         *
         * The default value for this property is <b>false</b>, which causes
         * the control to search for items that contain the given search
         * terms.
         */
        beginsWithSearch: boolean;
        /**
         * Gets or sets the maximum number of items to display in the drop-down list.
         *
         * The default value for this property is <b>6</b>.
         */
        maxItems: number;
        /**
         * Gets or sets the delay, in milliseconds, between when a keystroke occurs
         * and when the search is performed.
         *
         * The default value for this property is <b>500</b> milliseconds.
         */
        delay: number;
        /**
         * Gets or sets a string containing a comma-separated list of properties to use
         * when searching for items.
         *
         * By default, the {@link AutoComplete} control searches for matches against the
         * property specified by the {@link displayMemberPath} property.
         * The {@link searchMemberPath} property allows you to search using additional
         * properties.
         *
         * For example, the code below would cause the control to display the company
         * name and search by company name, symbol, and country:
         *
         * ```typescript
         * import { AutoComplete } from '@grapecity/wijmo.input';
         * var ac = new AutoComplete('#autoComplete', {
         *   itemsSource: companies,
         *   displayMemberPath: 'name',
         *   searchMemberPath: 'symbol,country'
         * });
         * ```
         */
        searchMemberPath: string;
        /**
         * Gets or sets a function that provides list items dynamically as the user types.
         *
         * The function takes three parameters:
         * <ul>
         *     <li>the query string typed by the user</li>
         *     <li>the maximum number of items to return</li>
         *     <li>the callback function to call when the results become available</li>
         * </ul>
         *
         * For example:
         *
         * ```typescript
         * autoComplete.itemsSourceFunction: (query: string, max: number, callback: Function) => {
         *
         *     // query the server
         *     httpRequest('https://services.odata.org/Northwind/Northwind.svc/Products', {
         *         data: {
         *             $format: 'json',
         *             $select: 'ProductID,ProductName',
         *             $filter: 'indexof(ProductName, \'' + query + '\') gt -1'
         *         },
         *         success: (xhr: XMLHttpRequest) => {
         *
         *             // return results to AutoComplete control
         *             let response = JSON.parse(xhr.response);
         *             callback(response.d ? response.d.results : response.value);
         *         }
         *     });
         * }
         * ```
         */
        itemsSourceFunction: IGetItems;
        /**
         * Gets or sets the name of the CSS class used to highlight any parts
         * of the content that match the search terms.
         *
         * The default value for this property is <b>wj-state-match</b>.
         */
        cssMatch: string;
        _keydown(e: KeyboardEvent): void;
        _setText(text: string): void;
        _itemSourceFunctionCallback(result: any): void;
        onIsDroppedDownChanged(e?: wijmo.EventArgs): void;
        protected _updateItems(): void;
        protected _filter(item: any): boolean;
        protected _getItemText(item: any, header: boolean): string;
        protected _formatListItem(sender: any, e: FormatItemEventArgs): void;
        private _enclosed;
    }
}
declare module wijmo.input {
    /**
     * The {@link MultiAutoComplete} control allows users to pick items from lists
     * that contain custom objects or simple strings.
     *
     * The example below shows how you can use a {@link MultiAutoComplete} to
     * enter multiple items picked from a single list:
     *
     * {@sample Input/MultiAutoComplete/Overview Example}
     */
    class MultiAutoComplete extends AutoComplete {
        private _wjTpl;
        private _wjInput;
        private _helperInput;
        private _selItems;
        private _maxSelItems;
        private _lastInputValue;
        private _selPath;
        private _notAddItm;
        static _clsActive: string;
        /**
         * Initializes a new instance of the {@link MultiAutoComplete} class.
         *
         * @param element The DOM element that hosts the control, or a CSS selector for the host element (e.g. '#theCtrl').
         * @param options The JavaScript object containing initialization data for the control.
         */
        constructor(element: any, options?: any);
        /**
         * Overridden to prevent the control from showing the drop-down button.
         */
        showDropDownButton: boolean;
        /**
         * Gets or sets the maximum number of items that can be selected.
         *
         * Setting this property to null (the default value) allows users
         * to pick any number of items.
         */
        maxSelectedItems: number;
        /**
         * Gets or sets the name of the property used to control which
         * item will be selected.
         */
        selectedMemberPath: string;
        /**
         * Gets or sets an array containing the items that are currently
         * selected.
         */
        selectedItems: any[];
        /**
         * Occurs when the value of the {@link selectedItems} property changes.
         */
        readonly selectedItemsChanged: Event<MultiAutoComplete, EventArgs>;
        /**
         * Raises the {@link selectedItemsChanged} event.
         */
        onSelectedItemsChanged(e?: wijmo.EventArgs): void;
        onIsDroppedDownChanged(e?: wijmo.EventArgs): void;
        refresh(fullUpdate?: boolean): void;
        _keydown(e: KeyboardEvent): void;
        protected _updateState(): void;
        private _keyup;
        private _addHelperInput;
        private _refreshHeader;
        private _insertToken;
        private _updateMaxItems;
        private _updateFocus;
        private _addItem;
        private _delItem;
        private _updateSelItems;
        private _createItem;
        private _itemOn;
        private _itemOff;
        private _initSeltems;
        private _getSelItem;
        private _setSelItem;
        private _clearSelIndex;
        private _hasSelectedMemeberPath;
        private _disableInput;
        private _adjustInputWidth;
        private _getItemIndex;
    }
}
declare module wijmo.input {
}

declare module wijmo.chart {
    class _VolumeHelper {
        private _volumes;
        private _xVals;
        private _xDataMin;
        private _xDataMax;
        private _xDataType;
        private _hasXs;
        private _calcData;
        constructor(volumes: number[], xVals: number[], xDataMin: number, xDataMax: number, xDataType?: wijmo.DataType);
        convert(x: number, min: number, max: number): number;
        convertBack(x: number, min: number, max: number): number;
        private _init;
        private _getXVolume;
        static convertToRange(value: number, newMin: number, newMax: number, oldMin: number, oldMax: number): number;
        private _fillGaps;
    }
}
declare module wijmo.chart {
    /**
     * Calculates Spline curves.
     */
    class _Spline {
        private k;
        private _x;
        private _y;
        private _a;
        private _b;
        private _c;
        private _d;
        private _len;
        private m;
        constructor(x: number[], y: number[], num?: number);
        private calculatePoint;
        calculate(): {
            xs: any;
            ys: any;
        };
    }
}
declare module wijmo.chart {
    /**
     * These are predefined color palettes for chart {@link Series} objects.
     *
     * To create custom color palettes, supply an array of strings or rgba values.
     *
     * You can specify palettes for {@link FlexChart} and {@link FlexPie} controls.
     * For example:
     *
     * <pre>chart.palette = Palettes.light;</pre>
     *
     * The following palettes are pre-defined:
     * <ul>
     *   <li>standard (default)</li>
     *   <li>cocoa</li>
     *   <li>coral</li>
     *   <li>dark</li>
     *   <li>highcontrast</li>
     *   <li>light</li>
     *   <li>midnight</li>
     *   <li>modern</li>
     *   <li>organic</li>
     *   <li>slate</li>
     *   <li>zen</li>
     *   <li>cyborg</li>
     *   <li>superhero</li>
     *   <li>flatly</li>
     *   <li>darkly</li>
     *   <li>cerulan</li>
     * </ul>
     */
    class Palettes {
        static standard: string[];
        static cocoa: string[];
        static coral: string[];
        static dark: string[];
        static highcontrast: string[];
        static light: string[];
        static midnight: string[];
        static modern: string[];
        static organic: string[];
        static slate: string[];
        static zen: string[];
        static cyborg: string[];
        static superhero: string[];
        static flatly: string[];
        static darkly: string[];
        static cerulan: string[];
    }
}
declare module wijmo.chart {
    /**
     * Represents a rendering engine that performs the basic drawing routines.
     */
    interface IRenderEngine {
        /**
         * Clears the viewport and starts the rendering cycle.
         */
        beginRender(): any;
        /**
         * Finishes the rendering cycle.
         */
        endRender(): any;
        /**
         * Sets the size of the viewport.
         *
         * @param w Viewport width.
         * @param h Viewport height.
         */
        setViewportSize(w: number, h: number): any;
        /**
         * Gets the rendered element.
         */
        element: Element;
        /**
         * Gets or sets the color used to fill the element.
         */
        fill: string;
        /**
         * Gets or sets the color used to outline the element.
         */
        stroke: string;
        /**
         * Gets or sets the thickness of the outline.
         */
        strokeWidth: number;
        /**
         * Gets or sets the text color.
         */
        textFill: string;
        /**
         * Gets or sets the font size for the text output.
         */
        fontSize: string;
        /**
         * Gets or sets the font family for the text output.
         */
        fontFamily: string;
        /**
         * Gets or sets the value that indicates css priority.
         * By default, it's true and the specified css class has a priority
         * over current engine's properties like fill or stroke.
         */
        cssPriority: boolean;
        readOnly: boolean;
        /**
         * Draws an ellipse.
         *
         * @param cx X coordinate of the ellipse's center.
         * @param cy Y coordinate of the ellipse's center.
         * @param rx X radius (half of the ellipse's width).
         * @param ry Y radius (half of the ellipse's height).
         * @param className Class name to be applied to the element.
         * @param style Style object to be applied to the element.
         */
        drawEllipse(cx: number, cy: number, rx: number, ry: number, className?: string, style?: any): any;
        /**
         * Draws a rectangle.
         *
         * @param x Left of the rectangle.
         * @param y Bottom of the rectangle.
         * @param w Width of the rectangle.
         * @param h Height of the rectangle.
         * @param className Class name to be applied to the element.
         * @param style Style object to be applied to the element.
         * @param clipPath Id of the path to use as a clipping path.
         */
        drawRect(x: number, y: number, w: number, h: number, className?: string, style?: any, clipPath?: string): any;
        /**
         * Draws a line.
         *
         * @param x1 X coordinate of the first point.
         * @param y1 Y coordinate of the first point.
         * @param x2 X coordinate of the second point.
         * @param y2 Y coordinate of the second point.
         * @param className Class name to be applied to the element.
         * @param style Style object to be applied to the element.
         */
        drawLine(x1: number, y1: number, x2: number, y2: number, className?: string, style?: any): any;
        /**
         * Draws a series of lines.
         *
         * @param xs Array of X coordinates.
         * @param ys Array of Y coordinates.
         * @param className Class name to be applied to the element.
         * @param style Style object to be applied to the element.
         * @param clipPath Id of the path to use as a clipping path.
         */
        drawLines(xs: number[], ys: number[], className?: string, style?: any, clipPath?: string, num?: number): any;
        /**
         * Draws a series of splines (smooth path).
         *
         * @param xs Array of X coordinates.
         * @param ys Array of Y coordinates.
         * @param className Class name to be applied to the element.
         * @param style Style object to be applied to the element.
         * @param clipPath Id of the path to use as a clipping path.
         */
        drawSplines(xs: number[], ys: number[], className?: string, style?: any, clipPath?: string, num?: number): any;
        /**
         * Draws a polygon.
         *
         * @param xs Array of X coordinates.
         * @param ys Array of Y coordinates.
         * @param className Class name to be applied to the element.
         * @param style Style object to be applied to the element.
         * @param clipPath Id of the path to use as a clipping path.
         */
        drawPolygon(xs: number[], ys: number[], className?: string, style?: any, clipPath?: string): any;
        /**
         * Draws a pie segment.
         *
         * @param cx X coordinate of the segment center.
         * @param cy Y coordinate of the segment center.
         * @param radius Radius of the segment.
         * @param startAngle Start angle of the segment, in degrees.
         * @param sweepAngle Sweep angle of the segment, in degrees clockwise.
         * @param className Class name to be applied to the element.
         * @param style Style object to be applied to the element.
         * @param clipPath Id of the path to use as a clipping path.
         */
        drawPieSegment(cx: number, cy: number, radius: number, startAngle: number, sweepAngle: number, className?: string, style?: any, clipPath?: string): any;
        /**
         * Draws a doughnut segment.
         *
         * @param cx X coordinate of the segment center.
         * @param cy Y coordinate of the segment center.
         * @param radius Outer radius of the segment.
         * @param innerRadius Inner radius of the segment.
         * @param startAngle Start angle of the segment, in degrees.
         * @param sweepAngle Sweep angle of the segment, in degrees clockwise.
         * @param className Class name to be applied to the element.
         * @param style Style object to be applied to the element.
         * @param clipPath Id of the path to use as a clipping path.
         */
        drawDonutSegment(cx: number, cy: number, radius: number, innerRadius: number, startAngle: number, sweepAngle: number, className?: string, style?: any, clipPath?: string): any;
        /**
         * Draws a string.
         *
         * @param s String to be drawn.
         * @param pt Reference point for the string.
         * @param className Class name to be applied to the element.
         * @param style Style object to be applied to the element.
         */
        drawString(s: string, pt: wijmo.Point, className?: string, style?: any): any;
        /**
         * Draws a rotated string.
         *
         * @param s String to be drawn.
         * @param pt Reference point for rendering the string.
         * @param center Reference point for rotating the string.
         * @param angle Rotation angle, in degrees, clockwise.
         * @param className Class name to be applied to the element.
         * @param style Style object to be applied to the element.
         */
        drawStringRotated(s: string, pt: wijmo.Point, center: wijmo.Point, angle: number, className?: string, style?: any): any;
        /**
         * Draws an image.
         *
         * @param href Url of the image to draw.
         * @param x Left coordinate of the image's bounding rectangle.
         * @param y Bottom coordinate of the image's bounding rectangle.
         * @param w Image width.
         * @param h Image height.
         */
        drawImage(href: string, x: number, y: number, w: number, h: number): any;
        /**
         * Measures a string.
         *
         * @param s String to be measured.
         * @param className Class name to use when measuring the string.
         * @param groupName Name of the group to use when measuring the string.
         * @param style Style object to use when measuring the string.
         */
        measureString(s: string, className?: string, groupName?: string, style?: any): wijmo.Size;
        /**
         * Starts a group.
         *
         * @param className Class name to apply to the new group.
         * @param clipPath Id of the path to use as a clipping path.
         * @param createTransform Whether to create a new transform for the group.
         */
        startGroup(className?: string, clipPath?: string, createTransform?: boolean): any;
        /**
         * Ends a group.
         */
        endGroup(): any;
        /**
         * Adds a clipping rectangle to the context.
         *
         * @param clipRect The clipping rectangle.
         * @param id The ID of the clipping rectangle.
         */
        addClipRect(clipRect: wijmo.Rect, id: string): any;
    }
}
declare module wijmo.chart {
    /**
     * Represents a plot area on the chart.
     *
     * The chart can have multiple plot areas with multiple axes.
     * To assign axis to plot area use <b>Axis.plotArea</b> property. For example:
     * <pre>
     *  // create a plot area
     *  var pa = new PlotArea();
     *  pa.row = 1;
     *  chart.plotAreas.push(pa);
     *  // create auxiliary y-axis
     *  var ay2 = new Axis(Position.Left);
     *  ay2.plotArea = pa; // attach axis to the plot area
     *  chart.axes.push(ay2);
     *  // plot first series along y-axis
     *  chart.series[0].axisY = ay2;
     * </pre>
     */
    class PlotArea {
        private _row;
        private _col;
        private _width;
        private _height;
        private _name;
        private _style;
        private _rect;
        _chart: FlexChartCore;
        /**
         * Initializes a new instance of the {@link PlotArea} class.
         *
         * @param options Initialization options for the plot area.
         */
        constructor(options?: any);
        /**
         * Gets or sets the row index of plot area.
         * This determines the vertical position of the plot area
         * on the chart.
         */
        row: number;
        /**
         * Gets or sets the column index of plot area.
         * This determines the horizontal position of the plot
         * area on the chart.
         */
        column: number;
        /**
         * Gets or sets the plot area name.
         */
        name: string;
        /**
         * Gets or sets width of the plot area.
         *
         * The width can be specified as a number (in pixels) or
         * as a string in the format '{number}*' (star sizing).
         */
        width: any;
        /**
         * Gets or sets the height of the plot area.
         *
         * The height can be specified as a number (in pixels) or
         * as a string in the format '{number}*' (star sizing).
         */
        height: any;
        /**
         * Gets or sets the style of the plot area.
         *
         * Using <b>style</b> property, you can set appearance of the plot area.
         * For example:
         * <pre>
         *   pa.style = { fill: 'rgba(0,255,0,0.1)' };
         * </pre>
         */
        style: any;
        private _invalidate;
        _render(engine: IRenderEngine): void;
        _setPlotX(x: number, w: number): void;
        _setPlotY(y: number, h: number): void;
    }
    /**
     * Represents a collection of {@link PlotArea} objects in a {@link FlexChartCore} control.
     */
    class PlotAreaCollection extends wijmo.collections.ObservableArray {
        /**
         * Gets a plot area by name.
         *
         * @param name The name of the plot area to look for.
         * @return The axis object with the specified name, or null if not found.
         */
        getPlotArea(name: string): PlotArea;
        /**
         * Gets the index of a plot area by name.
         *
         * @param name The name of the plot area to look for.
         * @return The index of the plot area with the specified name, or -1 if not found.
         */
        indexOf(name: string): number;
        _getWidth(column: number): any;
        _getHeight(row: number): any;
        _calculateWidths(width: number, ncols: number): number[];
        _calculateHeights(height: number, nrows: number): number[];
        private _calculateLengths;
    }
}
declare module wijmo.chart {
    /**
     * Render to svg.
     */
    class _SvgRenderEngine implements IRenderEngine {
        private static svgNS;
        private static xlinkNS;
        private _element;
        private _svg;
        private _text;
        private _textGroup;
        private _defs;
        private _fill;
        private _stroke;
        private _textFill;
        private _strokeWidth;
        private _fontSize;
        private _fontFamily;
        private _group;
        private _groupCls;
        private _clipRect;
        private static _isff;
        private static _isSafari;
        private _savedGradient;
        private _bbCache;
        private _baseUrl;
        private _cssPriority;
        private _readOnly;
        constructor(element?: HTMLElement);
        attach(el: HTMLElement): void;
        detach(): void;
        beginRender(): void;
        endRender(): void;
        setViewportSize(w: number, h: number): void;
        readonly element: Element;
        fill: string;
        fontSize: string;
        fontFamily: string;
        stroke: string;
        strokeWidth: number;
        textFill: string;
        cssPriority: boolean;
        readOnly: boolean;
        addClipRect(clipRect: wijmo.Rect, id: string): void;
        drawEllipse(cx: number, cy: number, rx: number, ry: number, className?: string, style?: any): SVGElement;
        drawRect(x: number, y: number, w: number, h: number, className?: string, style?: any, clipPath?: string): SVGElement;
        drawLine(x1: number, y1: number, x2: number, y2: number, className?: string, style?: any): SVGElement;
        drawLines(xs: number[], ys: number[], className?: string, style?: any, clipPath?: string, num?: number): SVGElement;
        drawSplines(xs: number[], ys: number[], className?: string, style?: any, clipPath?: string, num?: number): SVGElement;
        drawPolygon(xs: number[], ys: number[], className?: string, style?: any, clipPath?: string): SVGElement;
        drawPieSegment(cx: number, cy: number, r: number, startAngle: number, sweepAngle: number, className?: string, style?: any, clipPath?: string): SVGElement;
        drawDonutSegment(cx: number, cy: number, radius: number, innerRadius: number, startAngle: number, sweepAngle: number, className?: string, style?: any, clipPath?: string): SVGElement;
        drawString(s: string, pt: wijmo.Point, className?: string, style?: any): SVGElement;
        drawStringRotated(s: string, pt: wijmo.Point, center: wijmo.Point, angle: number, className?: string, style?: any): SVGElement;
        measureString(s: string, className?: string, groupName?: string, style?: any): wijmo.Size;
        startGroup(className?: string, clipPath?: string, createTransform?: boolean): SVGElement;
        endGroup(): void;
        drawImage(imageHref: string, x: number, y: number, w: number, h: number): SVGElement;
        private _setClipPath;
        private _appendChild;
        private _create;
        private _setText;
        private _getKey;
        private _createText;
        private _applyStyle;
        private _deCase;
        private _getClass;
        private _getBBox;
        private _applyColor;
        private _addInlineStyle;
        private _setAttribute;
    }
    /**
     * SVG render engine for FlexChart.
     */
    class SvgRenderEngine extends _SvgRenderEngine {
    }
}
declare module wijmo.chart {
    /**
     * Represents the chart legend.
     */
    class Legend {
        _chart: FlexChartBase;
        _position: Position;
        private _title;
        private _titleAlign;
        private _titlePadding;
        private _areas;
        private _sz;
        private _colRowLens;
        private _orient;
        private _maxSz;
        /**
         * Initializes a new instance of the {@link Legend} class.
         *
         * @param chart {@link FlexChartBase} that owns this {@link Legend}.
         */
        constructor(chart: FlexChartBase);
        /**
         * Gets or sets a value that determines whether and where the legend
         * appears in relation to the plot area.
         */
        position: Position;
        /**
         * Gets or sets a value that determines the title of the legend.
         */
        title: string;
        /**
         * Gets or sets a value that determines the align value of the legend.
         * The value should be 'left', 'center' or 'right'.
         */
        titleAlign: string;
        /**
         * Gets or sets a value that determines the orientation of the legend.
         */
        orientation: Orientation;
        /**
         * Gets or sets the maximum legend size (width for left or right position and height for top or bottom position).
         * The size can be specified in pixels: maxSize = '100px' or percents: maxSize = '50%'.
         */
        maxSize: number | string;
        _getDesiredSize(engine: IRenderEngine, pos: Position, w: number, h: number): wijmo.Size;
        _getPosition(w: number, h: number): Position;
        _render(engine: IRenderEngine, pt: wijmo.Point, pos: Position, w: number, h: number): void;
        _hitTest(pt: wijmo.Point): number;
        private _invalidate;
        _getMaxSize(sz: number): number;
    }
}
declare module wijmo.chart {
    /**
     * Represents the chart palette.
     */
    interface _IPalette {
        _getColor(i: number): string;
        _getColorLight(i: number): string;
    }
    /**
     * Class that represents a data point (with x and y coordinates).
     *
     * X and Y coordinates can be specified as a number or a Date object(time-based data).
     */
    class DataPoint {
        /**
         * Gets or sets X coordinate value of this {@link DataPoint}.
         */
        x: any;
        /**
         * Gets or sets Y coordinate value of this {@link DataPoint}.
         */
        y: any;
        /**
         * Initializes a new instance of the {@link DataPoint} class.
         *
         * @param x X coordinate of the new DataPoint.
         * @param y Y coordinate of the new DataPoint.
         */
        constructor(x?: any, y?: any);
    }
    /**
     * Provides arguments for {@link Series} events.
     */
    class RenderEventArgs extends wijmo.CancelEventArgs {
        _engine: IRenderEngine;
        /**
         * Initializes a new instance of the {@link RenderEventArgs} class.
         *
         * @param engine ({@link IRenderEngine}) The rendering engine to use.
         */
        constructor(engine: IRenderEngine);
        /**
         * Gets the {@link IRenderEngine} object to use for rendering the chart elements.
         */
        readonly engine: IRenderEngine;
    }
    /**
     * Provides arguments for {@link Series} rendering event.
     */
    class SeriesRenderingEventArgs extends RenderEventArgs {
        _index: number;
        _count: number;
        /**
         * Initializes a new instance of the {@link SeriesRenderingEventArgs} class.
         *
         * @param engine ({@link IRenderEngine}) The rendering engine to use.
         * @param index The index of the series to render.
         * @param count Total number of the series to render.
         */
        constructor(engine: IRenderEngine, index: number, count: number);
        /**
         * Gets the index of the series to render.
         */
        readonly index: number;
        /**
         * Gets the total number of series to render.
         */
        readonly count: number;
    }
    /**
     * Specifies the format of the image with embed base64-encoded binary data.
     */
    enum ImageFormat {
        /** Gets the W3C Portable Network Graphics (PNG) image format. */
        Png = 0,
        /** Gets the Joint Photographic Experts Group (JPEG) image format. */
        Jpeg = 1,
        /** Gets the Scalable Vector Graphics(SVG) image format. */
        Svg = 2
    }
    /**
     * Specifies what is selected when the user clicks the chart.
     */
    enum SelectionMode {
        /** Select neither series nor data points when the user clicks the chart. */
        None = 0,
        /** Select the whole {@link Series} when the user clicks it on the chart. */
        Series = 1,
        /** Select the data point when the user clicks it on the chart. Since Line, Area, Spline,
         * and SplineArea charts do not render individual data points, nothing is selected with this
         * setting on those chart types. */
        Point = 2
    }
    /**
     * Specifies the position of an axis or legend on the chart.
     */
    enum Position {
        /** The item is not visible. */
        None = 0,
        /** The item appears to the left of the chart. */
        Left = 1,
        /** The item appears above the chart. */
        Top = 2,
        /** The item appears to the right of the chart. */
        Right = 3,
        /** The item appears below the chart. */
        Bottom = 4,
        /** The item is positioned automatically. */
        Auto = 5
    }
    /**
     * Specifies the element orientation.
     */
    enum Orientation {
        /** Orientation is selected automatically based on element position. */
        Auto = 0,
        /** Vertical orientation. */
        Vertical = 1,
        /** Horizontal orientation. */
        Horizontal = 2
    }
    /**
     * The {@link FlexChartBase} control from which the FlexChart and FlexPie derive.
     */
    class FlexChartBase extends wijmo.Control implements _IPalette {
        static _WIDTH: number;
        static _HEIGHT: number;
        static _SELECTION_THRESHOLD: number;
        static _CSS_LEGEND: string;
        static _CSS_HEADER: string;
        static _CSS_FOOTER: string;
        static _CSS_TITLE: string;
        static _CSS_LABEL: string;
        static _CSS_SELECTION: string;
        static _CSS_PLOT_AREA: string;
        static _FG: string;
        _items: any;
        _cv: wijmo.collections.ICollectionView;
        protected _palette: string[];
        private _selectionMode;
        private _itemFormatter;
        _selectionIndex: number;
        _options: any;
        private _plotMargin;
        _header: string;
        _headerStyle: any;
        _footer: string;
        _footerStyle: any;
        _legend: Legend;
        _defPalette: string[];
        _notifyCurrentChanged: boolean;
        _rectFooter: wijmo.Rect;
        _rectHeader: wijmo.Rect;
        _rectChart: wijmo.Rect;
        _rectLegend: wijmo.Rect;
        _currentRenderEngine: IRenderEngine;
        _legendHost: SVGGElement;
        private _needBind;
        private _toShow;
        private _toHide;
        _tooltip: ChartTooltip;
        _chartRectId: string;
        /**
         * Gets or sets the array or {@link ICollectionView} object that contains the data used to create the chart.
         */
        itemsSource: any;
        /**
         * Gets the {@link ICollectionView} object that contains the chart data.
         */
        readonly collectionView: wijmo.collections.ICollectionView;
        /**
         * Gets or sets an array of default colors to use for displaying each series.
         *
         * The array contains strings that represents CSS colors. For example:
         * <pre>
         * // use colors specified by name
         * chart.palette = ['red', 'green', 'blue'];
         * // or use colors specified as rgba-values
         * chart.palette = [
         *   'rgba(255,0,0,1)',
         *   'rgba(255,0,0,0.8)',
         *   'rgba(255,0,0,0.6)',
         *   'rgba(255,0,0,0.4)'];
         * </pre>
         *
         * There is a set of predefined palettes in the {@link Palettes} class that you can use, for example:
         * <pre>
         * chart.palette = Palettes.coral;
         * </pre>
         */
        palette: string[];
        /**
         * Gets or sets the plot margin in pixels.
         *
         * The plot margin represents the area between the edges of the control
         * and the plot area.
         *
         * By default, this value is calculated automatically based on the space
         * required by the axis labels, but you can override it if you want
         * to control the precise position of the plot area within the control
         * (for example, when aligning multiple chart controls on a page).
         *
         * You may set this property to a numeric value or to a CSS-style
         * margin specification. For example:
         *
         * <pre>
         * // set the plot margin to 20 pixels on all sides
         * chart.plotMargin = 20;
         * // set the plot margin for top, right, bottom, left sides
         * chart.plotMargin = '10 15 20 25';
         * // set the plot margin for top/bottom (10px) and left/right (20px)
         * chart.plotMargin = '10 20';
         * </pre>
         */
        plotMargin: any;
        /**
         * Gets or sets the chart legend.
         */
        legend: Legend;
        /**
         * Gets or sets the text displayed in the chart header.
         */
        header: string;
        /**
         * Gets or sets the text displayed in the chart footer.
         */
        footer: string;
        /**
         * Gets or sets the style of the chart header.
         */
        headerStyle: any;
        /**
         * Gets or sets the style of the chart footer.
         */
        footerStyle: any;
        /**
         * Gets or sets an enumerated value indicating whether or what is
         * selected when the user clicks the chart.
         *
         * The default value for this property is <b>SelectionMode.None</b>.
         */
        selectionMode: SelectionMode;
        /**
         * Gets or sets the item formatter function that allows you to customize
         * the appearance of the chart elements.
         *
         * If specified, the function should take three parameters: the chart's
         * {@link IRenderEngine} responsible for rendering elements on the chart,
         * a {@link HitTestInfo} parameter that describes the element being rendered,
         * and a function that provides the default rendering for the item.
         *
         * For example:
         * <pre>
         * itemFormatter: function (engine, hitTestInfo, defaultRenderer) {
         *   var ht = hitTestInfo,
         *       binding = 'downloads';
         *
         *   // check that this is the right series/element
         *   if (ht.series.binding == binding && ht.pointIndex &gt; 0 &&
         *       ht.chartElement == ChartElement.SeriesSymbol) {
         *
         *     // get current and previous values
         *     var chart = ht.series.chart,
         *         items = chart.collectionView.items,
         *         valNow = items[ht.pointIndex][binding],
         *         valPrev = items[ht.pointIndex - 1][binding];
         *
         *     // add line if value is increasing
         *     if (valNow &gt; valPrev) {
         *       var pt1 = chart.dataToPoint(ht.pointIndex, valNow),
         *           pt2 = chart.dataToPoint(ht.pointIndex - 1, valPrev);
         *       engine.drawLine(pt1.x, pt1.y, pt2.x, pt2.y, null, {
         *         stroke: 'gold',
         *         strokeWidth: 6
         *       });
         *     }
         *   }
         *
         *   // render element as usual
         *   defaultRenderer();
         * }
         * </pre>
         *
         * {@sample: Chart/LineArea/CustomLineSegments/purejs Example}
         */
        itemFormatter: Function;
        /**
         * Occurs before the chart starts rendering data.
         */
        readonly rendering: Event<FlexChartBase, RenderEventArgs>;
        /**
         * Raises the {@link rendering} event.
         *
         * @param e The {@link RenderEventArgs} object used to render the chart.
         */
        onRendering(e: RenderEventArgs): void;
        /**
         * Occurs after the chart finishes rendering.
         */
        readonly rendered: Event<FlexChartBase, RenderEventArgs>;
        /**
         * Raises the {@link rendered} event.
         *
         * @param e The {@link RenderEventArgs} object used to render the chart.
         */
        onRendered(e: RenderEventArgs): void;
        /**
         * Occurs before the chart is bound to a new items source.
         */
        readonly itemsSourceChanging: Event<FlexChartBase, CancelEventArgs>;
        /**
         * Raises the {@link itemsSourceChanging} event.
         *
         * @param e {@link CancelEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onItemsSourceChanging(e: wijmo.CancelEventArgs): boolean;
        /**
         * Occurs after the chart has been bound to a new items source.
         */
        readonly itemsSourceChanged: Event<FlexChartBase, EventArgs>;
        /**
         * Raises the {@link itemsSourceChanged} event.
         */
        onItemsSourceChanged(e: wijmo.EventArgs): void;
        /**
         * Saves the chart to an image file.
         *
         * NOTE: This method does not work in IE browsers. If you require IE support,
         * add the <code>flex-chart.render</code> module to the page.
         *
         * @param filename The filename for the exported image file including extension.
         * Supported types are PNG, JPEG and SVG.
         */
        saveImageToFile(filename: string): void;
        /**
         * Saves the chart to an image data url.
         *
         * NOTE: This method does not work in IE browsers. If you require IE support,
         * add the <code>flex-chart.render</code> module to the page.
         *
         * @param format The {@link ImageFormat} for the exported image.
         * @param done A function to be called after data url is generated. The function gets passed the data url as its argument.
         */
        saveImageToDataUrl(format: ImageFormat, done: Function): void;
        _exportToImage(extension: any, processDataURI: any): void;
        /**
         * Refreshes the chart.
         *
         * @param fullUpdate A value indicating whether to update the control layout as well as the content.
         */
        refresh(fullUpdate?: boolean): void;
        /**
         * Occurs after the selection changes, whether programmatically
         * or when the user clicks the chart. This is useful, for example,
         * when you want to update details in a textbox showing the current
         * selection.
         */
        readonly selectionChanged: Event<FlexChartBase, EventArgs>;
        /**
         * Raises the {@link selectionChanged} event.
         */
        onSelectionChanged(e?: wijmo.EventArgs): void;
        onLostFocus(e?: wijmo.EventArgs): void;
        private _cvCollectionChanged;
        private _cvCurrentChanged;
        _bgColor(el: Element): string;
        _isTransparent(c: string): boolean;
        /**
        * Gets a color from the palette by index.
        *
        * @param index The index of the color in the palette.
        */
        _getColor(index: number): string;
        /**
         * Gets a lighter color from the palette by index.
         *
         * @param index The index of the color in the palette.
         */
        _getColorLight(index: number): string;
        /**
         * Gets a lighter color from the palette by color string.
         *
         * @param color The color in the palette.
         */
        _getLightColor(color: string): string;
        _bindChart(): void;
        _clearCachedValues(): void;
        _renderEls(engine: IRenderEngine, sz: wijmo.Size, applyElement?: boolean, bg?: string, hidden?: boolean): void;
        _render(engine: IRenderEngine, applyElement?: boolean, bg?: string): void;
        _renderHidden(sz?: wijmo.Size, bg?: string): any;
        _renderHeader(engine: IRenderEngine, rect: wijmo.Rect): void;
        _renderFooter(engine: IRenderEngine, rect: wijmo.Rect): void;
        _renderLegends(engine: IRenderEngine, rect: wijmo.Rect): void;
        _prepareRender(): void;
        _renderChart(engine: IRenderEngine, rect: wijmo.Rect, applyElement: boolean): void;
        _performBind(): void;
        _getDesiredLegendSize(engine: IRenderEngine, isVertical: boolean, width: number, height: number): wijmo.Size;
        _renderLegend(engine: IRenderEngine, pt: wijmo.Point, areas: any[], isVertical: boolean, width: number, height: number): void;
        _getHitTestItem(index: number): any;
        _getHitTestValue(index: number, gi?: number): any;
        _getHitTestLabel(index: number): any;
        _refreshChart(): void;
        _drawTitle(engine: IRenderEngine, rect: wijmo.Rect, title: string, style: any, isFooter: boolean): wijmo.Rect;
        /**
         * Converts page coordinates to control coordinates.
         *
         * @param pt The point of page coordinates or x value
             of page coordinates.
            * @param y The y value of page coordinates. Its value
                should be a number, if pt is a number type. However,
                the y parameter is optional when pt is Point type.
            */
        pageToControl(pt: any, y?: number): wijmo.Point;
        _toControl(pt: any, y?: number): wijmo.Point;
        _highlightItems(items: any, cls: any, selected: boolean): void;
        _parseMargin(value: any): any;
        _showToolTip(content: any, rect: any): void;
        _hideToolTip(): void;
        private _clearTimeouts;
        _getHostOffset(): wijmo.Point;
        _getHostSize(): wijmo.Size;
        _parsePx(s: string): number;
        _getHostComputedStyle(): CSSStyleDeclaration;
        _find(elem: SVGElement, names: string[]): any[];
        _getLegendSize(sz: number, lsz: number): number;
        static _contains(rect: wijmo.Rect, pt: wijmo.Point): boolean;
        static _intersects(rect1: wijmo.Rect, rect2: wijmo.Rect): boolean;
        static _epoch: number;
        static _msPerDay: number;
        static _toOADate(date: Date): number;
        static _fromOADate(val: number): Date;
        static _renderText(engine: IRenderEngine, text: string, pos: wijmo.Point, halign: any, valign: any, className?: string, groupName?: string, style?: any, test?: any): wijmo.Rect;
        static _renderRotatedText(engine: IRenderEngine, text: string, pos: wijmo.Point, halign: any, valign: any, center: wijmo.Point, angle: number, className: string, groupClassName?: string, style?: any): any;
        static _endsWith(str: string, suffix: string): boolean;
    }
    interface _IHitArea {
        contains(pt: wijmo.Point): boolean;
        distance(pt: wijmo.Point): number;
        tag: any;
        ignoreLabel: boolean;
    }
    class _KeyWords {
        private _keys;
        constructor();
        replace(s: string, ht: HitTestInfo): string;
        getValue(key: string, ht: HitTestInfo, fmt?: string): string;
    }
    /**
     * Extends the {@link Tooltip} class to provide chart tooltips.
     */
    class ChartTooltip extends wijmo.Tooltip {
        private _content;
        private _threshold;
        /**
         * Initializes a new instance of the {@link ChartTooltip} class.
         */
        constructor();
        /**
         * Gets or sets the tooltip content.
         *
         * The tooltip content can be specified as a string or as a function that
         * takes a {@link HitTestInfo} object as a parameter.
         *
         * When the tooltip content is a string, it may contain any of the following
         * parameters:
         *
         * <ul>
         *  <li><b>propertyName</b>:    Any property of the data object represented by the point.</li>
         *  <li><b>seriesName</b>:      Name of the series that contains the data point (FlexChart only).</li>
         *  <li><b>pointIndex</b>:      Index of the data point.</li>
         *  <li><b>value</b>:           <b>Value</b> of the data point (y-value for {@link FlexChart}, item value for {@link FlexPie}).</li>
         *  <li><b>x</b>:               <b>x</b>-value of the data point (FlexChart only).</li>
         *  <li><b>y</b>:               <b>y</b>-value of the data point (FlexChart only).</li>
         *  <li><b>name</b>:            <b>Name</b> of the data point (x-value for {@link FlexChart} or legend entry for {@link FlexPie}).</li>
         * </ul>
         *
         * Parameters must be enclosed in single curly brackets. For example:
         *
         * <pre>
         *   // 'country' and 'sales' are properties of the data object.
         *   chart.tooltip.content = '{country}, sales:{sales}';
         * </pre>
         *
         * The next example shows how to set the tooltip content using a function.
         *
         *  <pre>
         *   // Set the tooltip content
         *   chart.tooltip.content = function (ht) {
         *     return ht.name + ":" + ht.value.toFixed();
         *   }
         * </pre>
         */
        content: any;
        /**
         * Gets or sets the maximum distance from the element to display the tooltip.
         */
        threshold: number;
        /**
         * Shows the tooltip with the specified content, next to the specified element.
         *
         * @param element Element, element ID, or control that the tooltip explains.
         * @param content Tooltip content or ID of the element that contains the tooltip content.
         * @param bounds Optional element that defines the bounds of the area that the tooltip
         * targets. If not provided, the bounds of the element are used (as reported by the
         * <b>getBoundingClientRect</b> method).
         */
        show(element: any, content: string, bounds?: wijmo.Rect): void;
    }
}
declare module wijmo.chart {
    /**
     * Specifies the position of data labels on the chart.
     */
    enum LabelPosition {
        /** No data labels appear. */
        None = 0,
        /** The labels appear to the left of the data points. */
        Left = 1,
        /** The labels appear above the data points. */
        Top = 2,
        /** The labels appear to the right of the data points. */
        Right = 3,
        /** The labels appear below the data points. */
        Bottom = 4,
        /** The labels appear centered on the data points. */
        Center = 5
    }
    /**
     * Specifies the position of data labels on the pie chart.
     */
    enum PieLabelPosition {
        /** No data labels. */
        None = 0,
        /** The label appears inside the pie slice. */
        Inside = 1,
        /** The item appears at the center of the pie slice. */
        Center = 2,
        /** The item appears outside the pie slice. */
        Outside = 3,
        /** The item appears inside the pie slice and depends of its angle. */
        Radial = 4,
        /** The item appears inside the pie slice and has circular direction. */
        Circular = 5
    }
    /**
     * Provides arguments for {@link DataLabel} rendering event.
     */
    class DataLabelRenderEventArgs extends RenderEventArgs {
        private _ht;
        private _pt;
        private _text;
        /**
         * Initializes a new instance of the {@link DataLabelRenderEventArgs} class.
         *
         * @param engine ({@link IRenderEngine}) The rendering engine to use.
         * @param ht The hit test information.
         * @param pt The reference point.
         * @param text The label text.
         */
        constructor(engine: IRenderEngine, ht: HitTestInfo, pt: wijmo.Point, text: string);
        /**
         * Gets or sets a value that indicates whether the event should be cancelled.
         */
        cancel: boolean;
        /**
         * Gets the point associated with the label in control coordinates.
         */
        readonly point: wijmo.Point;
        /**
         * Gets or sets the label text.
         */
        text: string;
        /**
         * Gets the hit test information.
         */
        readonly hitTestInfo: HitTestInfo;
    }
    /**
    * Represents the base abstract class for the {@link DataLabel} and the {@link PieDataLabel} classes.
    */
    class DataLabelBase {
        private _content;
        _chart: FlexChartBase;
        private _bdr;
        private _line;
        private _off;
        /**
         * Gets or sets the content of data labels.
         *
         * The content can be specified as a string or as a function that
         * takes {@link HitTestInfo} object as a parameter.
         *
         * When the label content is a string, it can contain any of the following
         * parameters:
         *
         * <ul>
         *  <li><b>seriesName</b>: Name of the series that contains the data point (FlexChart only).</li>
         *  <li><b>pointIndex</b>: Index of the data point.</li>
         *  <li><b>value</b>: <b>Value</b> of the data point.</li>
         *  <li><b>x</b>: <b>x</b>-value of the data point (FlexChart only).</li>
         *  <li><b>y</b>: <b>y</b>-value of the data point (FlexChart only).</li>
         *  <li><b>name</b>: <b>Name</b> of the data point.</li>
         *  <li><b>propertyName</b>: any property of data object.</li>
         * </ul>
         *
         * The parameter must be enclosed in curly brackets, for example 'x={x}, y={y}'.
         *
         * In the following example, we show the y value of the data point in the labels.
         *
         * <pre>
         *  // Create a chart and show y data in labels positioned above the data point.
         *  var chart = new FlexChart('#theChart');
         *  chart.initialize({
         *      itemsSource: data,
         *      bindingX: 'country',
         *      series: [
         *          { name: 'Sales', binding: 'sales' },
         *          { name: 'Expenses', binding: 'expenses' },
         *          { name: 'Downloads', binding: 'downloads' }],
         *  });
         *  chart.dataLabel.position = "Top";
         *  chart.dataLabel.content = "{country} {seriesName}:{y}";
         * </pre>
         *
         * The next example shows how to set data label content using a function.
         *
         * <pre>
         *  // Set the data label content
         *  chart.dataLabel.content = function (ht) {
         *    return ht.name + ":" + ht.value.toFixed();
         *  }
         * </pre>
         *
         */
        content: any;
        /**
         * Gets or sets a value indicating whether the data labels have borders.
         */
        border: boolean;
        /**
         * Gets or sets the offset from label to the data point.
         */
        offset: number;
        /**
         * Gets or sets a value indicating whether to draw lines that connect
         * labels to the data points.
         */
        connectingLine: boolean;
        /**
         * Occurs before the data label is rendered.
         */
        readonly rendering: Event<DataLabel, DataLabelRenderEventArgs>;
        /**
         * Raises the {@link rendering} event.
         *
         * @param e The {@link DataLabelRenderEventArgs} object used to render the label.
         * @return True if the event was not canceled.
         */
        onRendering(e: DataLabelRenderEventArgs): boolean;
        _invalidate(): void;
    }
    /**
     * The point data label for FlexChart.
     */
    class DataLabel extends DataLabelBase {
        private _pos;
        /**
         * Gets or sets the position of the data labels.
         */
        position: LabelPosition;
    }
    /**
     * The point data label for FlexPie.
     */
    class PieDataLabel extends DataLabelBase {
        private _pos;
        /**
         * Gets or sets the position of the data labels.
         */
        position: PieLabelPosition;
    }
}
declare module wijmo.chart {
    /**
     * Specifies the axis type.
     */
    enum AxisType {
        /** Category axis (normally horizontal). */
        X = 0,
        /** Value axis (normally vertical). */
        Y = 1
    }
    /**
     * Specifies how to handle overlapping labels.
     */
    enum OverlappingLabels {
        /**
         * Hide overlapping labels.
         */
        Auto = 0,
        /**
         * Show all labels, including overlapping ones.
         */
        Show = 1
    }
    /**
     * Axis interface.
     */
    interface _IAxis {
        actualMin: number;
        actualMax: number;
        convert(val: number): number;
    }
    /**
     * Specifies whether and where the axis tick marks appear.
     */
    enum TickMark {
        /** No tick marks appear. */
        None = 0,
        /** Tick marks appear outside the plot area. */
        Outside = 1,
        /** Tick marks appear inside the plot area. */
        Inside = 2,
        /** Tick marks cross the axis. */
        Cross = 3
    }
    /**
     * Represents an axis in the chart.
     */
    class Axis implements _IAxis {
        _GRIDLINE_WIDTH: number;
        _LINE_WIDTH: number;
        _TICK_WIDTH: number;
        _TICK_HEIGHT: number;
        _TICK_OVERLAP: number;
        _TICK_LABEL_DISTANCE: number;
        private static MAX_MAJOR;
        private static MAX_MINOR;
        _chart: FlexChartCore;
        private _type;
        private _min;
        private _max;
        private _position;
        private _majorUnit;
        private _minorUnit;
        private _majorGrid;
        private _minorGrid;
        private _title;
        private _labelStyle;
        private _reversed;
        private _format;
        private _actualMin;
        private _actualMax;
        _axisType: AxisType;
        private _majorTickMarks;
        private _minorTickMarks;
        private _logBase;
        private _labels;
        private _labelAngle;
        private _labelAlign;
        private _axisLine;
        _plotrect: wijmo.Rect;
        private _szTitle;
        _isTimeAxis: boolean;
        _lbls: string[];
        _values: number[];
        private _rects;
        private _name;
        private _origin;
        private _overlap;
        private _items;
        private _cv;
        private _binding;
        private _ifmt;
        private _tfmt;
        private static _id;
        private __uniqueId;
        private _parea;
        private _labelPadding;
        _axrect: wijmo.Rect;
        _desiredSize: wijmo.Size;
        _annoSize: wijmo.Size;
        _hasOrigin: boolean;
        _hostElement: SVGGElement;
        _vals: any;
        /**
         * Initializes a new instance of the {@link Axis} class.
         *
         * @param position The position of the axis on the chart.
         */
        constructor(position?: Position);
        /**
         * Gets the axis host element.
         */
        readonly hostElement: SVGGElement;
        /**
         * Gets the actual axis minimum.
         *
         * It returns a number or a Date object (for time-based data).
        */
        readonly actualMin: any;
        /**
        * Gets the actual axis maximum.
        *
        * It returns a number or a Date object (for time-based data).
        */
        readonly actualMax: any;
        /**
         * Gets or sets the minimum value shown on the axis.
         *
         * The value can be a number or a Date object (for time-based data).
         *
         * The default value for this property is <b>null</b>, which causes
         * the chart to calculate the minimum value based on the data.
         */
        min: any;
        /**
         * Gets or sets the maximum value shown on the axis.
         *
         * The value can be a number or a Date object (for time-based data).
         *
         * The default value for this property is <b>null</b>, which causes
         * the chart to calculate the maximum value based on the data.
         */
        max: any;
        /**
         * Gets or sets a value indicating whether the axis is
         * reversed (top to bottom or right to left).
         *
         * The default value for this property is <b>false</b>.
         */
        reversed: boolean;
        /**
         * Gets or sets the position of the axis with respect to the plot area.
         */
        position: Position;
        /**
         * Gets or sets the number of units between axis labels.
         *
         * If the axis contains date values, then the units are
         * expressed in days.
         */
        majorUnit: number;
        /**
             * Gets or sets the number of units between minor axis ticks.
             *
             * If the axis contains date values, then the units are
             * expressed in days.
             */
        minorUnit: number;
        /**
         * Gets or sets the axis name.
         */
        name: string;
        /**
         * Gets or sets the title text shown next to the axis.
         */
        title: string;
        /**
         * Gets or sets the format string used for the axis labels
         * (see {@link Globalize}).
         */
        format: string;
        /**
         * Gets or sets a value indicating whether the axis includes grid lines.
         */
        majorGrid: boolean;
        /**
         * Gets or sets the location of the axis tick marks.
         */
        majorTickMarks: TickMark;
        /**
         * Gets or sets a value indicating whether the axis includes minor grid lines.
         */
        minorGrid: boolean;
        /**
         * Gets or sets the location of the minor axis tick marks.
         */
        minorTickMarks: TickMark;
        /**
         * Gets or sets a value indicating whether the axis line is visible.
         *
         * The default value for this property is <b>true</b>.
         */
        axisLine: boolean;
        /**
         * Gets or sets a value indicating whether the axis labels are visible.
         *
         * The default value for this property is <b>true</b>.
         */
        labels: boolean;
        /**
         * Gets or sets the label alignment.
         *
         * By default the labels are centered. The supported values are
         * 'left' and 'right for the X-axis, 'top' and 'bottom' for the Y-axis.
         */
        labelAlign: string;
        /**
         * Gets or sets the rotation angle of the axis labels.
         *
         * The angle is measured in degrees with valid values
         * ranging from -90 to 90.
         */
        labelAngle: number;
        /**
         * Gets or sets the value at which an axis crosses the perpendicular axis.
         **/
        origin: number;
        /**
         * Gets or sets a value indicating how to handle overlapping axis labels.
         *
         * The default value for this property is <b>OverlappingLabels.Auto</b>.
         */
        overlappingLabels: OverlappingLabels;
        /**
         * Gets or sets the items source for the axis labels.
         *
         * Names of the properties are specified by the {@link Axis.binding} property.
         *
         * For example:
         *
         * <pre>
         *  // default value for Axis.binding is 'value,text'
         *  chart.axisX.itemsSource = [ { value:1, text:'one' }, { value:2, text:'two' } ];
         * </pre>
         */
        itemsSource: any;
        /**
         * Gets or sets the comma-separated property names for the
         * {@link Axis.itemsSource} property to use in axis labels.
         *
         * The first name specifies the value on the axis, the second represents the corresponding
         * axis label. The default value is 'value,text'.
         */
        binding: string;
        /**
         * Gets or sets the itemFormatter function for the axis labels.
         *
         * If specified, the function takes two parameters:
         * <ul>
         * <li><b>render engine</b>: The {@link IRenderEngine} object to be used
         * in formatting the labels.</li>
         * <li><b>current label</b>: An object with the following properties:
         *   <ul>
         *     <li><b>value</b>: The value of the axis label to format.</li>
         *     <li><b>text</b>: The text to use in the label.</li>
         *     <li><b>pos</b>: The position in control coordinates at which
         *     the label is to be rendered.</li>
         *     <li><b>cls</b>: The CSS class to be applied to the label.</li>
         *   </ul></li>
         * </ul>
         *
         * The function returns the label parameters of labels for which
         * properties are modified.
         *
         * For example:
         * <pre>
         * chart.axisY.itemFormatter = function(engine, label) {
         *     if (label.val &gt; 5){
         *         engine.textFill = 'red'; // red text
         *         label.cls = null; // no default CSS
         *      }
         *     return label;
         * }
         * </pre>
         */
        itemFormatter: Function;
        /**
         * Gets or sets the logarithmic base of the axis.
         *
         * If the base is not specified the axis uses a linear scale.
         *
         * Use the {@link logBase} property to spread data that is clustered
         * around the origin. This is common in several financial and economic
         * data sets.
         */
        logBase: number;
        _getLogBase(): number;
        _isLogAxis(): boolean;
        /**
         * Gets or sets the plot area for the axis.
         */
        plotArea: PlotArea;
        /**
         * Gets or sets the label padding, in pixels.
         *
         * The default value for this property is <b>5</b> pixels.
         */
        labelPadding: number;
        readonly _groupClass: string;
        /**
         * Occurs when the axis range changes.
         */
        readonly rangeChanged: Event<Axis, EventArgs>;
        /**
         * Raises the {@link rangeChanged} event.
         */
        onRangeChanged(e?: wijmo.EventArgs): void;
        _getPosition(): Position;
        _isOverlapped(engine: IRenderEngine, w: number, lblClass: string, axisType: AxisType): boolean;
        _actualAngle: number;
        /**
         * Calculates the axis height.
         *
         * @param engine Rendering engine.
         * @param maxw Max width.
         */
        _getHeight(engine: IRenderEngine, maxw: number): number;
        _updateAutoFormat(delta: number): number;
        _getActualRange(): number;
        _updateActualLimitsByChartType(labels: any, min: any, max: any): {
            min: any;
            max: any;
        };
        /**
         * Update the actual axis limits based on a specified data range.
         *
         * @param dataType Data type.
         * @param dataMin Data minimum.
         * @param dataMax Data maximum.
         * @param labels Category labels(category axis).
         * @param values Values(value axis).
         */
        _updateActualLimits(dataType: wijmo.DataType, dataMin: number, dataMax: number, labels?: string[], values?: number[]): void;
        /**
         * Set the axis position.
         *
         * @param axisRect Axis rectangle.
         * @param plotRect Plot area rectangle.
         */
        _layout(axisRect: wijmo.Rect, plotRect: wijmo.Rect): void;
        _hasVisibileSeries(): boolean;
        /**
         * Render the axis.
         *
         * @param engine Rendering engine.
         */
        _render(engine: IRenderEngine): void;
        _renderLineAndTitle(engine: any): void;
        _renderMinor(engine: any, vals: any, isCategory: any): void;
        _renderRotatedText(engine: IRenderEngine, val: any, text: string, pos: wijmo.Point, halign: any, valign: any, center: wijmo.Point, angle: number, className: string, groupClassName?: string, style?: any): void;
        _getFormattedItem(engine: IRenderEngine, val: any, text: string, pos: wijmo.Point, className: string, readOnly?: boolean): {
            val: any;
            text: string;
            pos: Point;
            cls: string;
        };
        _renderLabelsAndTicks(engine: any, index: any, val: any, sval: any, labelAngle: any, tickMarks: any, showLabel: any, t1: any, t2: any): boolean;
        _xCross(x: number): boolean;
        _createMinors(engine: IRenderEngine, vals: number[], isVert: boolean, isNear: boolean, isCategory: boolean): void;
        _renderMinors(engine: IRenderEngine, ticks: number[], isVert: boolean, isNear: boolean): void;
        _renderLabel(engine: IRenderEngine, val: number, text: string, pos: wijmo.Point, ha: any, va: any, className?: string): boolean;
        private _renderRotatedLabel;
        private _getLabelAlign;
        _customConvert: Function;
        _customConvertBack: Function;
        /**
         * Converts the specified value from data to pixel coordinates.
         *
         * @param val The data value to convert.
         * @param maxValue The max value of the data, it's optional.
         * @param minValue The min value of the data, it's optional.
         */
        convert(val: number, maxValue?: number, minValue?: number): number;
        /**
         * Converts the specified value from pixel to data coordinates.
         *
         * @param val The pixel coordinates to convert back.
         */
        convertBack(val: number): number;
        /**
         * Gets the axis type.
         */
        readonly axisType: AxisType;
        _getMinNum(): number;
        _getMaxNum(): number;
        private _invalidate;
        private _cvCollectionChanged;
        private _createLabels;
        private _createLogarithmicLabels;
        _createTimeLabels(start: number, len: number, vals: number[], lbls: string[]): void;
        _formatValue(val: number): string;
        private _calcMajorUnit;
        private _getAnnoNumber;
        private _nicePrecision;
        private _niceTickNumber;
        _niceNumber(x: number, exp: number, round: boolean): number;
        readonly _uniqueId: number;
    }
    /**
     * Represents a collection of {@link Axis} objects in a {@link FlexChart} control.
     */
    class AxisCollection extends wijmo.collections.ObservableArray {
        /**
         * Gets an axis by name.
         *
         * @param name The name of the axis to look for.
         * @return The axis object with the specified name, or null if not found.
         */
        getAxis(name: string): Axis;
        /**
         * Gets the index of an axis by name.
         *
         * @param name The name of the axis to look for.
         * @return The index of the axis with the specified name, or -1 if not found.
         */
        indexOf(name: string): number;
    }
}
declare module wijmo.chart {
    class _DataPoint {
        private _seriesIndex;
        private _pointIndex;
        private _dataX;
        private _dataY;
        constructor(seriesIndex: number, pointIndex: number, dataX: number, dataY: number);
        readonly seriesIndex: number;
        readonly pointIndex: number;
        dataX: number;
        dataY: number;
    }
    enum _MeasureOption {
        X = 0,
        Y = 1,
        XY = 2
    }
    class _RectArea implements _IHitArea {
        private _rect;
        constructor(rect: wijmo.Rect);
        readonly rect: wijmo.Rect;
        tag: any;
        ignoreLabel: boolean;
        contains(pt: wijmo.Point): boolean;
        pointDistance(pt1: wijmo.Point, pt2: wijmo.Point, option: _MeasureOption): number;
        distance(pt: wijmo.Point): number;
    }
    class _CircleArea implements _IHitArea {
        private _center;
        private _rad;
        private _rad2;
        tag: any;
        ignoreLabel: boolean;
        constructor(center: wijmo.Point, radius: number);
        setRadius(radius: number): void;
        readonly center: wijmo.Point;
        contains(pt: wijmo.Point): boolean;
        distance(pt: wijmo.Point): number;
    }
    class _LinesArea implements _IHitArea {
        private _x;
        private _y;
        tag: any;
        ignoreLabel: boolean;
        constructor(x: any, y: any);
        contains(pt: wijmo.Point): boolean;
        distance(pt: wijmo.Point): number;
    }
    class _HitResult {
        area: _IHitArea;
        distance: number;
    }
    class _HitTester {
        _chart: FlexChartCore;
        _map: {
            [key: number]: Array<_IHitArea>;
        };
        constructor(chart: FlexChartCore);
        add(area: _IHitArea, seriesIndex: number): void;
        clear(): void;
        hitTest(pt: wijmo.Point, testLines?: boolean): _HitResult;
        hitTestSeries(pt: wijmo.Point, seriesIndex: any): _HitResult;
    }
}
declare module wijmo.chart {
    /**
     * Specifies the type of chart element found by the hitTest method.
     */
    enum ChartElement {
        /** The area within the axes. */
        PlotArea = 0,
        /** X-axis. */
        AxisX = 1,
        /** Y-axis. */
        AxisY = 2,
        /** The area within the control but outside the axes. */
        ChartArea = 3,
        /** The chart legend. */
        Legend = 4,
        /** The chart header. */
        Header = 5,
        /** The chart footer. */
        Footer = 6,
        /** A chart series. */
        Series = 7,
        /** A chart series symbol. */
        SeriesSymbol = 8,
        /** A data label. */
        DataLabel = 9,
        /** No chart element. */
        None = 10
    }
    /**
     * Contains information about a part of a {@link FlexChart} control at
     * a specified page coordinate.
     */
    class HitTestInfo {
        private _chart;
        private _pt;
        private _series;
        private _pointIndex;
        _chartElement: ChartElement;
        _dist: number;
        private _item;
        private _x;
        private __xfmt;
        private _y;
        private __yfmt;
        private _name;
        private _groupIndex;
        /**
         * Initializes a new instance of the {@link HitTestInfo} class.
         *
         * @param chart The chart control.
         * @param point The original point in window coordinates.
         * @param element The chart element.
         */
        constructor(chart: FlexChartBase, point: wijmo.Point, element?: ChartElement);
        /**
         * Gets the {@link FlexChartBase} that owns this {@link HitTestInfo}.
         */
        readonly chart: FlexChartBase;
        /**
         * Gets the point, in control coordinates,
         * that this {@link HitTestInfo} refers to.
         */
        readonly point: wijmo.Point;
        /**
         * Gets the chart series at the specified coordinates.
         */
        readonly series: SeriesBase;
        /**
         * Gets the data point index at the specified coordinates.
         */
        readonly pointIndex: number;
        /**
         * Gets the chart element at the specified coordinates.
         */
        readonly chartElement: ChartElement;
        /**
         * Gets the distance to the closest data point.
         */
        readonly distance: number;
        /**
         * Gets the data object that corresponds to the closest data point.
         */
        readonly item: any;
        /**
         * Gets the x-value of the closest data point.
         */
        readonly x: any;
        /**
         * Gets the y-value of the closest data point.
         */
        readonly y: any;
        readonly value: any;
        readonly name: any;
        /**
         * Gets the group index for the closest data point.
         */
        readonly groupIndex: number;
        readonly _xfmt: any;
        readonly _yfmt: any;
        _setData(series: SeriesBase, pi?: number): void;
        _setDataGroup(gi: number, pi: number): void;
        _setDataPoint(dataPoint: _DataPoint): void;
        _getValueFmt(): any;
        private _getValue;
        private readonly ax;
        private readonly ay;
    }
}
declare module wijmo.chart {
    /**
     * Specifies whether and where the Series is visible.
     */
    enum SeriesVisibility {
        /** The series is visible on the plot and in the legend. */
        Visible = 0,
        /** The series is visible only on the plot. */
        Plot = 1,
        /** The series is visible only in the legend. */
        Legend = 2,
        /** The series is hidden. */
        Hidden = 3
    }
    /**
     * Specifies the type of marker to use for the {@link Series.symbolMarker}
     * property.
     *
     * Applies to Scatter, LineSymbols, and SplineSymbols chart types.
     */
    enum Marker {
        /**
         * Uses a circle to mark each data point.
         */
        Dot = 0,
        /**
         * Uses a square to mark each data point.
         */
        Box = 1
    }
    /**
     * Data series interface
     */
    interface _ISeries {
        style: any;
        symbolStyle: any;
        getValues: (dim: number) => number[];
        getDataType: (dim: number) => wijmo.DataType;
        drawLegendItem(engine: IRenderEngine, rect: wijmo.Rect, index: number): any;
        measureLegendItem(engine: IRenderEngine, index: number): wijmo.Size;
        _setPointIndex(pointIndex: number, elementIndex: number): any;
    }
    class DataArray {
        dataType: wijmo.DataType;
        values: Array<number>;
    }
    /**
     * Provides arguments for {@link Series} events.
     */
    class SeriesEventArgs extends wijmo.EventArgs {
        _series: SeriesBase;
        /**
         * Initializes a new instance of the {@link SeriesEventArgs} class.
         *
         * @param series Specifies the {@link Series} object affected by this event.
         */
        constructor(series: SeriesBase);
        /**
         * Gets the {@link Series} object affected by this event.
         */
        readonly series: SeriesBase;
    }
    /**
     * Represents a series of data points to display in the chart.
     */
    class SeriesBase implements _ISeries {
        static _LEGEND_ITEM_WIDTH: number;
        static _LEGEND_ITEM_HEIGHT: number;
        static _LEGEND_ITEM_MARGIN: number;
        private static _DEFAULT_SYM_SIZE;
        __chart: FlexChartCore;
        private _name;
        private _binding;
        private _showValues;
        private _symbolStyle;
        private _symbolSize;
        private _style;
        private _altStyle;
        _cv: wijmo.collections.ICollectionView;
        private _itemsSource;
        private _values;
        private _valueDataType;
        _chartType: ChartType;
        private _symbolMarker;
        private _bindingX;
        private _xvalues;
        private _xvalueDataType;
        private _cssClass;
        private _visibility;
        private _axisX;
        private _axisY;
        private __plotter;
        private _interpolateNulls;
        private _tooltipContent;
        private _itemFormatter;
        private _cache;
        _legendElement: SVGAElement;
        _hostElement: SVGGElement;
        _pointIndexes: number[];
        /**
         * Initializes a new instance of the {@link SeriesBase} class.
         *
         * @param options JavaScript object containing initialization data for the object.
         */
        constructor(options?: any);
        /**
         * Gets or sets a value that determines whether to interpolate
         * null values in the data.
         *
         * If true, the series interpolates the value of any missing data
         * based on neighboring points. If false, it leaves a break in
         * lines and areas at the points with null values.
         *
         * The default value for this property is <b>false</b>.
         */
        interpolateNulls: boolean;
        /**
         * Gets or sets the series style.
         */
        style: any;
        /**
         * Gets or sets the alternate style for the series.
         *
         * The alternate style is used for negative values in Bar, Column,
         * and Scatter charts; and for rising values in financial chart types
         * like Candlestick, LineBreak, EquiVolume etc.
         *
         * The default value for this property is <b>null</b>, which causes the
         * series to use the default style.
         */
        altStyle: any;
        /**
         * Gets or sets the series symbol style.
         *
         * Applies to Scatter, LineSymbols, and SplineSymbols chart types.
         */
        symbolStyle: any;
        /**
         * Gets or sets the size (in pixels) of the symbols used to render this {@link Series}.
         * Applies to Scatter, LineSymbols, and SplineSymbols chart types.
         *
         * The default value for this property is <b>10</b> pixels.
         */
        symbolSize: number;
        /**
         * Gets or sets the shape of marker to use for each data point in the series.
         * Applies to Scatter, LineSymbols, and SplineSymbols chart types.
         *
         * The default value for this property is <b>Marker.Dot</b>.
         */
        symbolMarker: Marker;
        /**
         * Gets or sets the name of the property that contains Y values for the series.
         */
        binding: string;
        /**
         * Gets or sets the name of the property that contains X values for the series.
         */
        bindingX: string;
        /**
         * Gets or sets the series name.
         *
         * The series name is displayed in the chart legend. Any series without a name
         * does not appear in the legend.
         */
        name: string;
        /**
         * Gets or sets the array or {@link ICollectionView} object that contains the series data.
         */
        itemsSource: any;
        /**
         * Gets the {@link ICollectionView} object that contains the data for this series.
         */
        readonly collectionView: wijmo.collections.ICollectionView;
        /**
         * Gets the {@link FlexChart} object that owns this series.
         */
        readonly chart: FlexChartCore;
        /**
         * Gets the series host element.
         */
        readonly hostElement: SVGGElement;
        /**
         * Gets the series element in the legend.
         */
        readonly legendElement: SVGGElement;
        /**
         * Gets or sets the series CSS class.
         */
        cssClass: string;
        /**
         * Gets or sets an enumerated value indicating whether and where the series appears.
         *
         * The default value for this property is <b>SeriesVisibility.Visible</b>.
         */
        visibility: SeriesVisibility;
        /**
         * Gets or sets the series specific tooltip content.
         *
         * The property overrides the content of chart tooltip content.
         */
        tooltipContent: any;
        /**
         * Gets or sets the item formatter function that allows you to customize
         * the appearance of the series.
         *
         * The property overrides the chart's itemFormatter {@link wijmo.chart.FlexChart.itemFormatter}.
         */
        itemFormatter: Function;
        /**
         * Gets a {@link HitTestInfo} object with information about the specified point.
         *
         * @param pt The point to investigate, in window coordinates.
         * @param y The Y coordinate of the point (if the first parameter is a number).
         */
        hitTest(pt: any, y?: number): HitTestInfo;
        /**
         * Gets the plot element that corresponds to the specified point index.
         *
         * @param pointIndex The index of the data point.
         */
        getPlotElement(pointIndex: number): any;
        /**
         * Gets or sets the X-axis for the series.
         */
        axisX: Axis;
        /**
         * Gets or sets the Y-axis for the series.
         */
        axisY: Axis;
        /**
         * Initializes the series by copying the properties from a given object.
         *
         * @param options JavaScript object containing initialization data for the series.
         */
        initialize(options: any): void;
        /**
         * Converts a {@link Point} from control coordinates to series data coordinates.
         *
         * @param pt The point to convert, in control coordinates.
         * @return The point in series data coordinates.
         */
        pointToData(pt: wijmo.Point): wijmo.Point;
        /**
         * Converts a {@link Point} from series data coordinates to control coordinates.
         *
         * @param pt {@link Point} in series data coordinates.
         * @return The {@link Point} in control coordinates.
         */
        dataToPoint(pt: wijmo.Point): wijmo.Point;
        /**
         * Occurs when series is rendering.
         */
        readonly rendering: Event<SeriesBase, SeriesRenderingEventArgs>;
        /**
         * Raises the {@link rendering} event.
         *
         * @param engine The {@link IRenderEngine} object used to render the series.
         * @param index The index of the series to render.
         * @param count Total number of the series to render.
         */
        onRendering(engine: IRenderEngine, index: number, count: number): boolean;
        /**
         * Occurs when series is rendered.
         */
        readonly rendered: Event<SeriesBase, RenderEventArgs>;
        /**
         * Raises the {@link rendered} event.
         *
         * @param engine The {@link IRenderEngine} object used to render the series.
         */
        onRendered(engine: IRenderEngine): void;
        _chart: FlexChartCore;
        _getSymbolSize(): number;
        _plotter: _IPlotter;
        getDataType(dim: number): wijmo.DataType;
        getValues(dim: number): number[];
        /**
         * Draw a legend item at the specified position.
         *
         * @param engine The rendering engine to use.
         * @param rect The position of the legend item.
         * @param index Index of legend item(for series with multiple legend items).
         */
        drawLegendItem(engine: IRenderEngine, rect: wijmo.Rect, index: number): void;
        private _getLegendStyle;
        /**
         * Measures height and width of the legend item.
         *
         * @param engine The rendering engine to use.
         * @param index Index of legend item(for series with multiple legend items).
         */
        measureLegendItem(engine: IRenderEngine, index: number): wijmo.Size;
        /**
         * Returns number of series items in the legend.
         */
        legendItemLength(): number;
        /**
         * Returns the series bounding rectangle in data coordinates.
         *
         * If getDataRect() returns null, the limits are calculated automatically based on the data values.
         *
         * @param currentRect The current rectangle of chart. This parameter is optional.
         * @param calculatedRect The calculated rectangle of chart. This parameter is optional.
         */
        getDataRect(currentRect?: wijmo.Rect, calculatedRect?: wijmo.Rect): wijmo.Rect;
        _getChartType(): ChartType;
        /**
         * Clears any cached data values.
         */
        _clearValues(): void;
        _getBinding(index: number): string;
        _getBindingValues(index: number): number[];
        _getItem(pointIndex: number): any;
        _getLength(): number;
        _setPointIndex(pointIndex: number, elementIndex: number): void;
        private _getDataRect;
        _isCustomAxisX(): boolean;
        _isCustomAxisY(): boolean;
        _getAxisX(): Axis;
        _getAxisY(): Axis;
        _measureLegendItem(engine: IRenderEngine, text: string): wijmo.Size;
        _drawFunnelLegendItem(engine: IRenderEngine, rect: wijmo.Rect, index: number, style: any, symbolStyle: any): void;
        private _getFunnelLegendName;
        _drawLegendItem(engine: IRenderEngine, rect: wijmo.Rect, chartType: ChartType, text: string, style: any, symbolStyle: any): void;
        private _cvCollectionChanged;
        private _cvCurrentChanged;
        _bindValues(items: Array<any>, binding: string, isX?: boolean): DataArray;
        _invalidate(): void;
        _indexToPoint(pointIndex: number): wijmo.Point;
        _getSymbolFill(seriesIndex?: number): string;
        _getSymbolStroke(seriesIndex?: number): string;
        _getAltSymbolStroke(seriesIndex?: number): string;
        _getAltSymbolFill(seriesIndex?: number): string;
        _renderLabels(engine: IRenderEngine, smap: _IHitArea[], chart: FlexChartCore, lblAreas: _RectArea[]): void;
    }
}
declare module wijmo.chart {
    /**
     * Represents a series of data points to display in the chart.
     *
     * The {@link Series} class supports all basic chart types. You may define
     * a different chart type on each {@link Series} object that you add to the
     * {@link FlexChart} series collection. This overrides the {@link chartType}
     * property set on the chart that is the default for all {@link Series} objects
     * in its collection.
     */
    class Series extends SeriesBase {
        /**
         * Gets or sets the chart type for a specific series, overriding the chart type
         * set on the overall chart.
         *
         * The default value for this property is <b>null</b>, which causes the
         * series to use chart type defined by the parent chart.
         */
        chartType: ChartType;
    }
}
declare module wijmo.chart {
    /**
     * The {@link FlexPie} control provides pie and doughnut charts with selectable
     * slices.
     *
     * To use the {@link FlexPie} control, set the {@link FlexPie.itemsSource} property
     * to an array containing the data and use the {@link FlexPie.binding} and
     * {@link FlexPie.bindingName} properties to set the properties that contain
     * the item values and names.
     */
    class FlexPie extends FlexChartBase {
        private static _MARGIN;
        private static _CSS_GROUP_TITLE;
        private _binding;
        private _bindingName;
        _areas: any[];
        private _keywords;
        private _startAngle;
        private _innerRadius;
        private _offset;
        private _reversed;
        private _isAnimated;
        private _selectedItemPosition;
        private _selectedItemOffset;
        private _pieGroups;
        _rotationAngles: number[];
        private _centers;
        _radius: number;
        private _selectedOffset;
        private _selectedIndex;
        private _angles;
        private _selectionAnimationID;
        private _colRowLens;
        private _lbl;
        private _titles;
        private _innerText;
        private _innerTextStyle;
        _values: number[][];
        _labels: string[];
        _pels: any[];
        _sum: number;
        _sums: number[];
        _bindingSeparator: string;
        /**
         * Initializes a new instance of the {@link FlexPie} class.
         *
         * @param element The DOM element that hosts the control, or a selector for the host element (e.g. '#theCtrl').
         * @param options A Javascript object containing initialization data for the control.
         */
        constructor(element: any, options?: any);
        /**
         * Gets or sets the name of the property that contains the chart values.
         */
        binding: string;
        /**
         * Gets or sets the name of the property that contains the name of the data items.
         */
        bindingName: string;
        /**
         * Gets or sets the starting angle for the pie slices, in degrees.
         *
         * Angles are measured clockwise, starting at the 9 o'clock position.
         *
         * The default value for this property is <b>0</b>.
         */
        startAngle: number;
        /**
         * Gets or sets the offset of the slices from the pie center.
         *
         * The offset is measured as a fraction of the pie radius.
         *
         * The default value for this property is <b>0</b>.
         */
        offset: number;
        /**
         * Gets or sets the size of the pie's inner radius.
         *
         * The inner radius is measured as a fraction of the pie radius.
         *
         * The default value for this property is zero, which creates
         * a pie. Setting this property to values greater than zero
         * creates pies with a hole in the middle, also known as
         * doughnut charts.
         *
         * The default value for this property is <b>0</b>.
         */
        innerRadius: number;
        /**
         * Gets or sets the style of text inside the pie.
         */
        innerTextStyle: any;
        /**
         * Gets or sets the text inside the pie (at the pie center).
         */
        innerText: any;
        /**
         * Gets or sets a value that determines whether angles are reversed
         * (counter-clockwise).
         *
         * The default value is false, which causes angles to be measured in
         * the clockwise direction.
         *
         * The default value for this property is <b>false</b>.
         */
        reversed: boolean;
        /**
         * Gets or sets the position of the selected slice.
         *
         * Setting this property to a value other than 'None' causes
         * the pie to rotate when an item is selected.
         *
         * Note that in order to select slices by clicking the chart,
         * you must set the {@link selectionMode} property to 'Point'.
         *
         * The default value for this property is <b>Position.None</b>.
         */
        selectedItemPosition: Position;
        /**
         * Gets or sets the offset of the selected slice from the pie center.
         *
         * Offsets are measured as a fraction of the pie radius.
         *
         * The default value for this property is <b>0</b>.
         */
        selectedItemOffset: number;
        /**
         * Gets or sets a value indicating whether to use animation when items are selected.
         *
         * See also the {@link selectedItemPosition} and {@link selectionMode}
         * properties.
         *
         * The default value for this property is <b>false</b>.
         */
        isAnimated: boolean;
        /**
         * Gets the chart's {@link Tooltip}.
         */
        readonly tooltip: ChartTooltip;
        /**
         * Gets or sets the point data label.
         */
        dataLabel: PieDataLabel;
        /**
         * Gets or sets the index of the selected slice.
         */
        selectedIndex: number;
        /**
         * Gets or sets the pie titles.
         *
         * The titles are shown above each pie chart when multiple properties are specified in {@link binding}.
         * If the property is not set (undefined) the property names are used as pie titles.
         */
        titles: string[];
        _getLabelsForLegend(): string[];
        /**
         * Gets a {@link HitTestInfo} object with information about the specified point.
         *
         * @param pt The point to investigate, in window coordinates.
         * @param y The Y coordinate of the point (if the first parameter is a number).
         * @return A {@link HitTestInfo} object containing information about the point.
         */
        hitTest(pt: any, y?: number): HitTestInfo;
        _performBind(): void;
        _getBindings(): string[];
        _initData(): void;
        _getBindData(item: any, values: number[], labels: any, binding: string, bindingName: string): number;
        _render(engine: IRenderEngine, applyElement?: boolean, bg?: string): void;
        _prepareRender(): void;
        _renderChart(engine: IRenderEngine, rect: wijmo.Rect, applyElement: boolean): void;
        _layout(eng: IRenderEngine, r: wijmo.Rect, titles: string[], n: number): wijmo.Rect[];
        _getDesiredLegendSize(engine: IRenderEngine, isVertical: boolean, width: number, height: number): wijmo.Size;
        _renderLegend(engine: IRenderEngine, pos: wijmo.Point, areas: any[], isVertical: boolean, width: number, height: number): void;
        _renderData(engine: IRenderEngine, rect: wijmo.Rect, i: number, g: any): void;
        _renderPie(engine: IRenderEngine, gi: number, radius: number, innerRadius: number, startAngle: number, offset: number): void;
        _getCenter(): Point;
        _renderSlices(engine: any, values: any, sum: any, gi: number, radius: any, innerRadius: any, startAngle: any, totalSweep: any, offset: any): void;
        _renderSlice(engine: IRenderEngine, cx: number, cy: number, currentAngle: number, gi: number, idx: number, radius: number, innerRadius: number, startAngle: number, sweep: number, totalSweep: number): void;
        _getSelectedItemOffset(index: any, angle: any): {
            x: number;
            y: number;
        };
        _renderInnerText(engine: IRenderEngine): void;
        _renderLabels(engine: IRenderEngine): void;
        _drawSlice(engine: IRenderEngine, gi: number, i: number, reversed: boolean, cx: number, cy: number, r: number, irad: number, angle: number, sweep: number): void;
        _measureLegendItem(engine: IRenderEngine, name: string): wijmo.Size;
        _drawLegendItem(engine: IRenderEngine, rect: wijmo.Rect, i: number, name: string): void;
        private _getLabelContent;
        private _select;
        _highlightCurrent(): void;
        _highlight(selected: boolean, pointIndex: number, animate?: boolean): void;
        _animateSelectionAngle(targetAngles: number[], duration: number): void;
        _getHitTestItem(index: number): any;
        _getHitTestValue(index: number, gi: number): number;
        _getHitTestLabel(index: number): string;
    }
    interface _ISegment {
        center: wijmo.Point;
        radius: number;
        langle: number;
        angle: number;
        sweep: number;
        gi: number;
    }
    class _PieSegment implements _IHitArea, _ISegment {
        private _center;
        private _angle;
        private _sweep;
        private _radius;
        private _radius2;
        private _isFull;
        private _originAngle;
        private _originSweep;
        private _startAngle;
        constructor(center: wijmo.Point, radius: number, angle: number, sweep: number, startAngle?: number);
        contains(pt: wijmo.Point): boolean;
        distance(pt: wijmo.Point): number;
        readonly center: wijmo.Point;
        readonly radius: number;
        readonly langle: number;
        readonly angle: number;
        readonly sweep: number;
        tag: any;
        ignoreLabel: boolean;
        gi: number;
    }
    class _DonutSegment implements _IHitArea, _ISegment {
        private _center;
        private _angle;
        private _sweep;
        private _originAngle;
        private _originSweep;
        private _radius;
        private _radius2;
        private _iradius;
        private _iradius2;
        private _isFull;
        private _startAngle;
        constructor(center: wijmo.Point, radius: number, innerRadius: number, angle: number, sweep: number, startAngle?: number);
        contains(pt: wijmo.Point): boolean;
        distance(pt: wijmo.Point): number;
        readonly center: wijmo.Point;
        readonly radius: number;
        readonly langle: number;
        readonly angle: number;
        readonly sweep: number;
        readonly innerRadius: number;
        tag: any;
        ignoreLabel: boolean;
        gi: number;
    }
}
declare module wijmo.chart {
    /**
     * Plots data series.
     */
    interface _IPlotter {
        chart: FlexChartCore;
        dataInfo: _DataInfo;
        hitTester: _HitTester;
        seriesIndex: number;
        seriesCount: number;
        clipping: boolean;
        stacking: Stacking;
        rotated: boolean;
        adjustLimits(dataInfo: _DataInfo, plotRect: wijmo.Rect): wijmo.Rect;
        plotSeries(engine: IRenderEngine, ax: _IAxis, ay: _IAxis, series: _ISeries, palette: _IPalette, iser: number, nser: number, customRender?: Function): any;
        _renderLabels(engine: IRenderEngine, series: SeriesBase, smap: _IHitArea[], chart: FlexChartCore, lblAreas: _RectArea[]): any;
        _renderLabel(engine: IRenderEngine, map: _IHitArea, dp: _DataPoint, chart: FlexChartCore, lbl: DataLabel, series: SeriesBase, offset: number, lblAreas: _RectArea[]): any;
        load(): any;
        unload(): any;
    }
    /**
     * Base class for chart plotters of all types (bar, line, area).
     */
    class _BasePlotter {
        _DEFAULT_WIDTH: number;
        _DEFAULT_SYM_SIZE: number;
        clipping: boolean;
        chart: FlexChartCore;
        hitTester: _HitTester;
        dataInfo: _DataInfo;
        seriesIndex: number;
        seriesCount: number;
        clear(): void;
        _renderLabels(engine: IRenderEngine, series: SeriesBase, smap: _IHitArea[], chart: FlexChartCore, lblAreas: _RectArea[]): void;
        _renderLabel(engine: IRenderEngine, map: _IHitArea, dp: _DataPoint, chart: FlexChartCore, lbl: DataLabel, series: SeriesBase, offset: number, lblAreas: _RectArea[]): void;
        _getPointAndPosition(pt: wijmo.Point, pos: LabelPosition, map: _IHitArea, chart: FlexChartCore): void;
        _getLabelPoint(series: SeriesBase, dataPoint: _DataPoint): wijmo.Point;
        _renderLabelAndBorder(engine: IRenderEngine, s: string, pos: LabelPosition, offset: number, pt: wijmo.Point, line: boolean, marg: any, border: boolean): wijmo.Rect;
        getOption(name: string, parent?: string): any;
        getNumOption(name: string, parent?: string): number;
        getItemFormatter(series: _ISeries): Function;
        static cloneStyle(style: any, ignore: string[]): any;
        isValid(datax: number, datay: number, ax: _IAxis, ay: _IAxis): boolean;
        load(): void;
        unload(): void;
        _createSteps(x: number[], y: number[], num?: number): {
            x: number[];
            y: number[];
        };
    }
}
declare module wijmo.chart {
    /**
     * Specifies the chart type.
     */
    enum ChartType {
        /** Shows vertical bars and allows you to compare values of items across categories. */
        Column = 0,
        /** Shows horizontal bars. */
        Bar = 1,
        /** Shows patterns within the data using X and Y coordinates. */
        Scatter = 2,
        /** Shows trends over a period of time or across categories. */
        Line = 3,
        /** Shows a line chart with a symbol on each data point. */
        LineSymbols = 4,
        /** Shows a line chart with the area below the line filled with color. */
        Area = 5,
        /** Shows a Scatter chart with a third data value that determines the
         * size of the symbol. The data for this chart type can be defined using the
         *  {@link FlexChart} or {@link Series} <b>binding</b> property as a comma separated value in the
         * following format: "yProperty, bubbleSizeProperty".*/
        Bubble = 6,
        /** Presents items with high, low, open, and close values.
         * The size of the wick line is determined by the High and Low values,
         * while the size of the bar is determined by the Open and Close values.
         * The bar is displayed using different colors, depending on
         * whether the close value is higher or lower than the open value.
         * The data for this chart type can be defined using the
         *  {@link FlexChart} or {@link Series} <b>binding</b> property as a comma separated value in the
         * following format: "highProperty, lowProperty, openProperty, closeProperty". */
        Candlestick = 7,
        /** Displays the same information as a candlestick chart, except that opening
         * values are displayed using lines to the left, while lines to the right
         * indicate closing values.  The data for this chart type can be defined using the
         *  {@link FlexChart} or {@link Series} <b>binding</b> property as a comma separated value in the
         * following format: "highProperty, lowProperty, openProperty, closeProperty". */
        HighLowOpenClose = 8,
        /** Displays a line chart that plots curves rather than angled lines through the
        * data points. */
        Spline = 9,
        /** Displays a spline chart with symbols on each data point. */
        SplineSymbols = 10,
        /** Displays a spline chart with the area below the line filled with color. */
        SplineArea = 11,
        /** Displays a funnel chart, usually representing stages in a process such as a sales pipeline. */
        Funnel = 12,
        /** Displays a step chart */
        Step = 13,
        /** Displays a step chart with symbols on each data point. */
        StepSymbols = 14,
        /** Displays a step area chart */
        StepArea = 15
    }
    /**
     * Specifies whether and how to stack the chart's data values.
     */
    enum Stacking {
        /** No stacking. Each series object is plotted independently. */
        None = 0,
        /** Stacked charts show how each value contributes to the total. */
        Stacked = 1,
        /** 100% stacked charts show how each value contributes to the total with the relative size of
         * each series representing its contribution to the total. */
        Stacked100pc = 2
    }
    /**
     * The core charting control for {@link FlexChart}.
     */
    class FlexChartCore extends FlexChartBase {
        static _CSS_AXIS_X: string;
        static _CSS_AXIS_Y: string;
        static _CSS_LINE: string;
        static _CSS_GRIDLINE: string;
        static _CSS_TICK: string;
        static _CSS_GRIDLINE_MINOR: string;
        static _CSS_TICK_MINOR: string;
        static _CSS_DATA_LABELS: string;
        private _series;
        private _axes;
        private _pareas;
        private _axisX;
        private _axisY;
        private _selection;
        private _interpolateNulls;
        private _legendToggle;
        private _symbolSize;
        private _dataInfo;
        _plotRect: wijmo.Rect;
        private __barPlotter;
        private __linePlotter;
        private __areaPlotter;
        private __bubblePlotter;
        private __financePlotter;
        private __funnelPlotter;
        private _plotters;
        private _binding;
        private _bindingX;
        _rotated: boolean;
        _stacking: Stacking;
        private _lbl;
        _xlabels: string[];
        _xvals: number[];
        _xDataType: wijmo.DataType;
        private _hitTester;
        private _lblAreas;
        private _keywords;
        private _curPlotter;
        private _colRowLens;
        private _selectedEls;
        _markers: LineMarker[];
        _bindingSeparator: string;
        /**
         * Initializes a new instance of the {@link FlexChart} class.
         *
         * @param element The DOM element that hosts the control, or a CSS selector for the host element (e.g. '#theCtrl').
         * @param options A JavaScript object containing initialization data for the control.
         */
        constructor(element: any, options?: any);
        initialize(options: any): void;
        _initAxes(): void;
        /**
         * Gets the collection of {@link Series} objects.
         */
        readonly series: wijmo.collections.ObservableArray;
        /**
         * Gets the collection of {@link Axis} objects.
         */
        readonly axes: wijmo.collections.ObservableArray;
        /**
         * Gets or sets the main X axis.
         */
        axisX: Axis;
        /**
         * Gets or sets the main Y axis.
         */
        axisY: Axis;
        /**
         * Gets the collection of {@link PlotArea} objects.
         */
        readonly plotAreas: PlotAreaCollection;
        /**
         * Gets or sets the name of the property that contains the Y values.
         */
        binding: string;
        /**
         * Gets or sets the name of the property that contains the X data values.
         */
        bindingX: string;
        /**
         * Gets or sets the size of the symbols used for all Series objects
         * in this {@link FlexChart}.
         *
         * This property may be overridden by the symbolSize property on
         * each {@link Series} object.
         *
         * The default value for this property is <b>10</b> pixels.
         */
        symbolSize: number;
        /**
         * Gets or sets a value that determines whether to interpolate
         * null values in the data.
         *
         * If true, the chart interpolates the value of any missing data
         * based on neighboring points. If false, it leaves a break in
         * lines and areas at the points with null values.
         *
         * The default value for this property is <b>false</b>.
         */
        interpolateNulls: boolean;
        /**
         * Gets or sets a value indicating whether clicking legend items toggles the
         * series visibility in the chart.
         *
         * The default value for this property is <b>false</b>.
         */
        legendToggle: boolean;
        /**
         * Gets the chart {@link Tooltip} object.
         *
         * The tooltip content is generated using a template that may contain any of the following
         * parameters:
         *
         * <ul>
         *  <li><b>propertyName</b>:    Any property of the data object represented by the point.</li>
         *  <li><b>seriesName</b>:      Name of the series that contains the data point (FlexChart only).</li>
         *  <li><b>pointIndex</b>:      Index of the data point.</li>
         *  <li><b>value</b>:           <b>Value</b> of the data point (y-value for {@link FlexChart}, item value for {@link FlexPie}).</li>
         *  <li><b>x</b>:               <b>x</b>-value of the data point (FlexChart only).</li>
         *  <li><b>y</b>:               <b>y</b>-value of the data point (FlexChart only).</li>
         *  <li><b>name</b>:            <b>Name</b> of the data point (x-value for {@link FlexChart} or legend entry for {@link FlexPie}).</li>
         * </ul>
         *
         * To modify the template, assign a new value to the tooltip's content property.
         * For example:
         *
         * <pre>
         * chart.tooltip.content = '&lt;b&gt;{seriesName}&lt;/b&gt; ' +
         *    '&lt;img src="resources/{x}.png"/&gt;&lt;br/&gt;{y}';
         * </pre>
         *
         * You can disable chart tooltips by setting the template to an empty string.
         *
         * You can also use the {@link tooltip} property to customize tooltip parameters
         * such as {@link Tooltip.showDelay} and {@link Tooltip.hideDelay}:
         *
         * <pre>
         * chart.tooltip.showDelay = 1000;
         * </pre>
         *
         * See {@link ChartTooltip} properties for more details and options.
         */
        readonly tooltip: ChartTooltip;
        /**
         * Gets or sets the point data label.
         */
        dataLabel: DataLabel;
        /**
         * Gets or sets the selected chart series.
         */
        selection: SeriesBase;
        /**
         * Gets or sets the chart render engine.
         */
        renderEngine: IRenderEngine;
        /**
         * Occurs when the series visibility changes, for example when the legendToggle
         * property is set to true and the user clicks the legend.
        */
        readonly seriesVisibilityChanged: Event<FlexChartCore, SeriesEventArgs>;
        /**
         * Raises the {@link seriesVisibilityChanged} event.
         *
         * @param e The {@link SeriesEventArgs} object that contains the event data.
         */
        onSeriesVisibilityChanged(e: SeriesEventArgs): void;
        /**
         * Gets a {@link HitTestInfo} object with information about the specified point.
         *
         * @param pt The point to investigate, in window coordinates.
         * @param y The Y coordinate of the point (if the first parameter is a number).
         * @return A {@link HitTestInfo} object with information about the point.
         */
        hitTest(pt: any, y?: number): HitTestInfo;
        /**
         * Converts a {@link Point} from control coordinates to chart data coordinates.
         *
         * @param pt The point to convert, in control coordinates.
         * @param y The Y coordinate of the point (if the first parameter is a number).
         * @return The point in chart data coordinates.
         */
        pointToData(pt: any, y?: number): wijmo.Point;
        /**
         * Converts a {@link Point} from data coordinates to control coordinates.
         *
         * @param pt {@link Point} in data coordinates, or X coordinate of a point in data coordinates.
         * @param y Y coordinate of the point (if the first parameter is a number).
         * @return The {@link Point} in control coordinates.
         */
        dataToPoint(pt: any, y?: number): wijmo.Point;
        /**
         * Disposes of the control by removing its association with the host element.
         */
        dispose(): void;
        _copy(key: string, value: any): boolean;
        _createSeries(): SeriesBase;
        _clearCachedValues(): void;
        _performBind(): void;
        _hitTestSeries(pt: wijmo.Point, seriesIndex: number): HitTestInfo;
        _hitTestData(pt: any): HitTestInfo;
        _hitTestLabels(pt: wijmo.Point): _IHitArea;
        private static _dist2;
        static _dist(p0: wijmo.Point, p1: wijmo.Point, p2: wijmo.Point): number;
        static _distToSegmentSquared(p: wijmo.Point, v: wijmo.Point, w: wijmo.Point): number;
        _isRotated(): boolean;
        _plotrectId: string;
        _getChartType(): ChartType;
        _prepareRender(): void;
        _renderChart(engine: IRenderEngine, rect: wijmo.Rect, applyElement: boolean): void;
        _getDesiredLegendSize(engine: IRenderEngine, isVertical: boolean, width: number, height: number): wijmo.Size;
        _renderLegend(engine: IRenderEngine, pos: wijmo.Point, areas: any[], isVertical: boolean, width: number, height: number): void;
        private _renderLegendElements;
        private _renderLabels;
        private _getAxes;
        private _clearPlotters;
        _initPlotter(plotter: _IPlotter): void;
        private readonly _barPlotter;
        private readonly _linePlotter;
        private readonly _areaPlotter;
        private readonly _bubblePlotter;
        private readonly _financePlotter;
        private readonly _funnelPlotter;
        _getPlotter(series: SeriesBase): _IPlotter;
        _layout(rect: wijmo.Rect, size: wijmo.Size, engine: IRenderEngine): void;
        private _layoutSingle;
        private _layoutMultiple;
        private _convertX;
        private _convertY;
        _getLabelContent(ht: HitTestInfo, content: any): string;
        private _select;
        private _highlightCurrent;
        private _highlight;
        private _updateTooltip;
        _updateAuxAxes(axes: Axis[], isRotated: boolean): void;
    }
    /**
     * Analyzes chart data.
     */
    class _DataInfo {
        private minY;
        private maxY;
        private minX;
        private maxX;
        private minXp;
        private minYp;
        private dataTypeX;
        private dataTypeY;
        private stackAbs;
        private _xvals;
        private dx;
        constructor();
        analyse(seriesList: any, isRotated: boolean, stacking: Stacking, xvals: Array<number>, logx: boolean, logy: boolean): void;
        _parseYVal(val: any, xval: any, custom: any, stackAbs: any, stackPos: any, stackNeg: any): void;
        getMinY(): number;
        getMaxY(): number;
        getMinX(): number;
        getMaxX(): number;
        getMinXp(): number;
        getMinYp(): number;
        getDeltaX(): number;
        getDataTypeX(): wijmo.DataType;
        getDataTypeY(): wijmo.DataType;
        getStackedAbsSum(key: number): number;
        getXVals(): Array<number>;
        static isValid(...vals: number[]): boolean;
    }
}
declare module wijmo.chart {
    /**
     * The {@link FlexChart} control provides a powerful and flexible way to visualize
     * data.
     *
     * You can use the {@link FlexChart} control to create charts that display data in
     * several formats, including bar, line, symbol, bubble, and others.
     *
     * To use the {@link FlexChart} control, set the {@link FlexChart.itemsSource} property
     * to an array containing the data objects, then add one or more {@link Series} objects
     * to the {@link FlexChart.series} property.
     *
     * Use the {@link FlexChart.chartType} property to define the {@link ChartType} used as
     * a default for all series. You may override the chart type for each series by
     * setting the {@link Series.chartType} property on the members of the
     * {@link FlexChart.series} array.
     *
     * {@sample Chart/Overview/purejs Example}
     */
    class FlexChart extends FlexChartCore {
        private _chartType;
        /**
         * Initializes a new instance of the {@link FlexChart} class.
         *
         * @param element The DOM element that hosts the control, or a CSS selector for the host element (e.g. '#theCtrl').
         * @param options A JavaScript object containing initialization data
         * for the control.
         */
        constructor(element: any, options?: any);
        _getChartType(): ChartType;
        /**
         * Gets or sets the type of chart to create.
         *
         * The default value for this property is <b>ChartType.Column</b>.
         */
        chartType: ChartType;
        /**
         * Gets or sets a value indicating whether to flip the axes so that
         * X becomes vertical and Y becomes horizontal.
         *
         * The default value for this property is <b>false</b>.
         */
        rotated: boolean;
        /**
         * Gets or sets a value that determines whether and how the series objects are stacked.
         *
         * The default value for this property is <b>Stacking.None</b>.
         */
        stacking: Stacking;
        /**
         * Gets or sets various chart options.
         *
         * The following options are supported:
         *
         * <b>bubble.maxSize</b>: Specifies the maximum size
         * of symbols in the Bubble chart. The default value is 30 pixels.
         *
         * <b>bubble.minSize</b>: Specifies the minimum size
         * of symbols in the Bubble chart. The default value is 5 pixels.
         *
         * <pre>chart.options = {
         *   bubble: { minSize: 5, maxSize: 30 }
         * }</pre>
         *
         *
         * <b>funnel.neckWidth</b>: Specifies the neck width as a percentage for the Funnel chart.
         * The default value is 0.2.
         *
         * <b>funnel.neckHeight</b>: Specifies the neck height as a percentage for the Funnel chart.
         * The default value is 0.
         *
         * <b>funnel.type</b>: Specifies the type of Funnel chart. It should be 'rectangle' or 'default'.
         * neckWidth and neckHeight don't work if type is set to rectangle.
         *
         * <pre>chart.options = {
         *   funnel: { neckWidth: 0.3, neckHeight: 0.3, type: 'rectangle' }
         * }</pre>
    
            * <b>groupWidth</b>: Specifies the group width for the Column charts,
            * or the group height for the Bar charts. The group width can be specified
            * in pixels or as percentage of the available space. The default value is '70%'.
            *
            * <pre>chart.options = {
            *   groupWidth : 50; // 50 pixels
            * }
            * chart.options = {
            *   groupWidth : '100%'; // 100% pixels
            * }</pre>
            */
        options: any;
    }
}
declare module wijmo.chart {
    /**
     * Area chart plotter.
     */
    class _AreaPlotter extends _BasePlotter implements _IPlotter {
        stacking: Stacking;
        isSpline: boolean;
        isStep: boolean;
        rotated: boolean;
        private stackPos;
        private stackNeg;
        constructor();
        adjustLimits(dataInfo: _DataInfo, plotRect: wijmo.Rect): wijmo.Rect;
        clear(): void;
        plotSeries(engine: IRenderEngine, ax: _IAxis, ay: _IAxis, series: _ISeries, palette: _IPalette, iser: number, nser: number, customRender?: Function): void;
        private _isRange;
        private _modifyPoints;
        plotSeriesRanged(engine: IRenderEngine, ax: _IAxis, ay: _IAxis, series: _ISeries, palette: _IPalette, iser: number, nser: number, customRender?: Function): void;
        _drawRangedArea(engine: IRenderEngine, xvals1: number[], yvals1: number[], xvals2: number[], yvals2: number[], fill: string, stroke: string, swidth: number, pstyle: any, lstyle: any): void;
        _convertToSpline(x: number[], y: number[]): {
            xs: any;
            ys: any;
        };
        _drawSymbols(engine: IRenderEngine, series: _ISeries, seriesIndex: number): void;
    }
}
declare module wijmo.chart {
    /**
     * Bar/column chart plotter.
     */
    class _BarPlotter extends _BasePlotter implements _IPlotter {
        origin: number;
        width: number;
        isVolume: boolean;
        private _volHelper;
        private _itemsSource;
        stackPosMap: {};
        stackNegMap: {};
        stacking: Stacking;
        rotated: boolean;
        _getSymbolOrigin: Function;
        _getSymbolStyles: Function;
        clear(): void;
        load(): void;
        unload(): void;
        adjustLimits(dataInfo: _DataInfo, plotRect: wijmo.Rect): wijmo.Rect;
        private _isRange;
        plotSeries(engine: IRenderEngine, ax: _IAxis, ay: _IAxis, series: _ISeries, palette: _IPalette, iser: number, nser: number, customRender?: Function): void;
        private drawSymbol;
        private drawDefaultSymbol;
    }
}
declare module wijmo.chart {
    /**
     * Funnel chart plotter.
     */
    class _FunnelPlotter extends _BasePlotter implements _IPlotter {
        _getSymbolOrigin: Function;
        _getSymbolStyles: Function;
        stacking: Stacking;
        rotated: boolean;
        adjustLimits(dataInfo: _DataInfo, plotRect: wijmo.Rect): wijmo.Rect;
        plotSeries(engine: IRenderEngine, ax: _IAxis, ay: _IAxis, series: _ISeries, palette: _IPalette, iser: number, nser: number, customRender?: Function): void;
        private _getTrapezoidArea;
        private _getTrapezoidOffsetY;
        private drawDefaultSymbol;
        _getPointAndPosition(pt: wijmo.Point, pos: LabelPosition, map: _IHitArea, chart: FlexChartCore): void;
    }
    class _FunnelSegment implements _IHitArea {
        private _center;
        private _startPoint;
        private _width;
        private _height;
        private _neckWidth;
        private _neckHeight;
        private _offsetX;
        private _offsetY;
        private _rotated;
        constructor(startPoint: wijmo.Point, width: number, height: number, neckWidth: number, neckHeight: number, rotated?: boolean);
        contains(pt: wijmo.Point): boolean;
        distance(pt: wijmo.Point): number;
        readonly center: wijmo.Point;
        tag: any;
        ignoreLabel: boolean;
    }
}
declare module wijmo.chart {
    class _FinancePlotter extends _BasePlotter {
        isCandle: boolean;
        isArms: boolean;
        isEqui: boolean;
        isVolume: boolean;
        symbolWidth: any;
        private _volHelper;
        private _itemsSource;
        private _symWidth;
        private _isPixel;
        clear(): void;
        load(): void;
        unload(): void;
        parseSymbolWidth(val: any): void;
        adjustLimits(dataInfo: _DataInfo, plotRect: wijmo.Rect): wijmo.Rect;
        plotSeries(engine: IRenderEngine, ax: _IAxis, ay: _IAxis, series: _ISeries, palette: _IPalette, iser: number, nser: number, customRender?: Function): void;
        _drawSymbol(engine: IRenderEngine, ax: _IAxis, ay: _IAxis, si: number, pi: number, fill: any, w: number, x: number, hi: number, lo: number, open: number, close: number): void;
    }
}
declare module wijmo.chart {
    /**
     * Specifies the direction of the lines shown by the {@link LineMarker}.
     */
    enum LineMarkerLines {
        /** No lines. */
        None = 0,
        /** Vertical line. */
        Vertical = 1,
        /** Horizontal line. */
        Horizontal = 2,
        /** Vertical and horizontal lines. */
        Both = 3
    }
    /**
     * Specifies how the {@link LineMarker} interacts with the user.
     */
    enum LineMarkerInteraction {
        /** No interaction, the user specifies the position by clicking. */
        None = 0,
        /** The {@link LineMarker} moves with the pointer. */
        Move = 1,
        /** The {@link LineMarker} moves when the user drags the lines. */
        Drag = 2
    }
    /**
     * Specifies the alignment of the {@link LineMarker}.
     */
    enum LineMarkerAlignment {
        /**
         * The LineMarker alignment adjusts automatically so that it stays
         * within the boundaries of the plot area. */
        Auto = 2,
        /** The LineMarker aligns to the right of the pointer. */
        Right = 0,
        /** The LineMarker aligns to the left of the pointer. */
        Left = 1,
        /** The LineMarker aligns to the bottom of the pointer. */
        Bottom = 4,
        /** The LineMarker aligns to the top of the pointer. */
        Top = 6
    }
    /**
     * Represents an extension of the LineMarker for the FlexChart.
     *
     * The {@link LineMarker} consists of a text area with content reflecting
     * data point values, and optional vertical or horizontal lines
     * (or both for a cross-hair effect) positioned over the plot area.
     *
     * It can be static (interaction = None), follow the mouse or touch
     * position (interaction = Move), or move when the user drags the
     * line (interaction = Drag).
     *
     * For example:
     * <pre>
     *   // create an interactive marker with a horizontal line and y-value
     *   var lm = new LineMarker($scope.ctx.chart, {
     *       lines: LineMarkerLines.Horizontal,
     *       interaction: LineMarkerInteraction.Move,
     *       alignment : LineMarkerAlignment.Top
     *   });
     *   lm.content = function (ht) {
     *       // show y-value
     *       return lm.y.toFixed(2);
     *   }
     * </pre>
     */
    class LineMarker {
        static _CSS_MARKER: string;
        static _CSS_MARKER_HLINE: string;
        static _CSS_MARKER_VLINE: string;
        static _CSS_MARKER_CONTENT: string;
        static _CSS_MARKER_CONTAINER: string;
        static _CSS_LINE_DRAGGABLE: string;
        static _CSS_TOUCH_DISABLED: string;
        private _chart;
        private _plot;
        private _marker;
        private _markerContainer;
        private _markerContent;
        private _dragEle;
        private _hLine;
        private _vLine;
        private _plotRect;
        private _targetPoint;
        private _wrapperMoveMarker;
        private _capturedEle;
        private _wrapperMousedown;
        private _wrapperMouseup;
        private _contentDragStartPoint;
        private _mouseDownCrossPoint;
        private _isVisible;
        private _horizontalPosition;
        private _verticalPosition;
        private _alignment;
        private _content;
        private _seriesIndex;
        private _lines;
        private _interaction;
        private _dragThreshold;
        private _dragContent;
        private _dragLines;
        /**
         * Initializes a new instance of the {@link LineMarker} class.
         *
         * @param chart The chart on which the LineMarker appears.
         * @param options A JavaScript object containing initialization data for the control.
         */
        constructor(chart: FlexChartCore, options?: any);
        /**
         * Gets the {@link FlexChart} object that owns the LineMarker.
         */
        readonly chart: FlexChartCore;
        /**
         * Gets or sets the visibility of the LineMarker.
         */
        isVisible: boolean;
        /**
         * Gets or sets the index of the series in the chart in which the LineMarker appears.
         * This takes effect when the {@link interaction} property is set to
         * LineMarkerInteraction.Move or LineMarkerInteraction.Drag.
         */
        seriesIndex: number;
        /**
         * Gets or sets the horizontal position of the LineMarker relative to the plot area.
         *
         * Its value range is (0, 1).
         * If the value is null or undefined and {@link interaction} is set to
         * LineMarkerInteraction.Move or LineMarkerInteraction.Drag,
         * the horizontal position of the marker is calculated automatically based on the
         * pointer's position.
         */
        horizontalPosition: number;
        /**
         * Gets the current x-value as chart data coordinates.
         */
        readonly x: number;
        /**
         * Gets the current y-value as chart data coordinates.
         */
        readonly y: number;
        /**
         * Gets or sets the content function that allows you to customize the text content of the LineMarker.
         */
        content: Function;
        /**
         * Gets or sets the vertical position of the LineMarker relative to the plot area.
         *
         * Its value range is (0, 1).
         * If the value is null or undefined and {@link interaction} is set to LineMarkerInteraction.Move
         * or LineMarkerInteraction.Drag, the vertical position of the LineMarker is calculated automatically based on the pointer's position.
         */
        verticalPosition: number;
        /**
         * Gets or sets the alignment of the LineMarker content.
         *
         * By default, the LineMarker shows to the right, at the bottom of the target point.
         * Use '|' to combine alignment values.
         *
         * <pre>
         * // set the alignment to the left.
         * marker.alignment = LineMarkerAlignment.Left;
         * // set the alignment to the left top.
         * marker.alignment = LineMarkerAlignment.Left | LineMarkerAlignment.Top;
         * </pre>
         */
        alignment: LineMarkerAlignment;
        /**
         * Gets or sets the visibility of the LineMarker lines.
         */
        lines: LineMarkerLines;
        /**
         * Gets or sets the interaction mode of the LineMarker.
         */
        interaction: LineMarkerInteraction;
        /**
         * Gets or sets the maximum distance from the horizontal or vertical
         * line that the marker can be dragged.
         */
        dragThreshold: number;
        /**
         * Gets or sets a value indicating whether the content of the marker
         * is draggable when the interaction mode is "Drag."
         */
        dragContent: boolean;
        /**
         * Gets or sets a value indicating whether the lines are linked
         * when the horizontal or vertical line is dragged when the
         * interaction mode is "Drag."
         */
        dragLines: boolean;
        /**
         * Occurs after the {@link LineMarker}'s position changes.
         */
        readonly positionChanged: Event<LineMarker, Point>;
        /**
         * Raises the {@link positionChanged} event.
         *
         * @param point The target point at which to show the LineMarker.
         */
        onPositionChanged(point: wijmo.Point): void;
        /**
         * Removes the LineMarker from the chart.
         */
        remove(): void;
        private _attach;
        private _attachDrag;
        private _detach;
        private _detachDrag;
        private _toggleDragEventAttach;
        private _onMousedown;
        private _onMouseup;
        _moveMarker(e: any): void;
        private _getElementPaddingValuee;
        private _show;
        private _hide;
        private _toggleVisibility;
        private _resetDefaultValue;
        private _initialize;
        private _createMarker;
        private _removeMarker;
        private _getContainer;
        private _createContainer;
        private _createChildren;
        private _toggleElesDraggableClass;
        private _updateMarkerSize;
        private _updateLinesSize;
        private _resetLinesVisibility;
        private _updateMarkerPosition;
        private _updateContent;
        private _raisePositionChanged;
        private _updatePositionByAlignment;
        private _getEventPoint;
        private _pointInRect;
    }
}
declare module wijmo.chart {
    /**
     * Line/scatter chart plotter.
     */
    class _LinePlotter extends _BasePlotter implements _IPlotter {
        hasSymbols: boolean;
        hasLines: boolean;
        isSpline: boolean;
        isStep: boolean;
        rotated: boolean;
        stacking: Stacking;
        stackPos: {
            [key: number]: number;
        };
        stackNeg: {
            [key: number]: number;
        };
        constructor();
        clear(): void;
        adjustLimits(dataInfo: _DataInfo, plotRect: wijmo.Rect): wijmo.Rect;
        plotSeries(engine: IRenderEngine, ax: _IAxis, ay: _IAxis, series: _ISeries, palette: _IPalette, iser: number, nser: number, customRender?: Function): void;
        _drawLines(engine: IRenderEngine, xs: number[], ys: number[], className?: string, style?: any, clipPath?: string, num?: number): void;
        _drawSymbol(engine: IRenderEngine, x: number, y: number, sz: number, series: SeriesBase, pointIndex: number, ifmt: Function): void;
        _drawDefaultSymbol(engine: IRenderEngine, x: number, y: number, sz: number, marker: Marker, style?: any): void;
    }
}
declare module wijmo.chart {
    class _BubblePlotter extends _LinePlotter {
        private _MIN_SIZE;
        private _MAX_SIZE;
        private _minSize;
        private _maxSize;
        private _minValue;
        private _maxValue;
        constructor();
        adjustLimits(dataInfo: _DataInfo, pr: wijmo.Rect): wijmo.Rect;
        _drawSymbol(engine: IRenderEngine, x: number, y: number, sz: number, series: Series, pointIndex: number, ifmt: Function): void;
    }
}
declare module wijmo.chart {
}

declare module wijmo.chart.analytics {
    /**
     * Represents a Waterfall series of {@link FlexChart}.
     *
     * The {@link Waterfall} series is normally used to demonstrate how
     * the starting position either increases or decreases through a
     * series of changes.
     */
    class Waterfall extends wijmo.chart.SeriesBase {
        static CSS_CONNECTOR_LINE_GROUP: string;
        static CSS_CONNECTOR_LINE: string;
        static CSS_ENDLABEL: string;
        _barPlotter: wijmo.chart._BarPlotter;
        private _start;
        private _startLabel;
        private _relativeData;
        private _connectorLines;
        private _showTotal;
        private _totalLabel;
        private _styles;
        private _wfstyle;
        private _xValues;
        private _getXValues;
        private _yValues;
        private _showIntermediateTotal;
        private _intermediateTotalPositions;
        private _intermediateTotalLabels;
        private _intermediateTotalPos;
        /**
         * Initializes a new instance of the {@link Waterfall} class.
         *
         * @param options JavaScript object containing initialization data for the object.
         */
        constructor(options?: any);
        /**
         * Gets or sets a value that determines whether the given data
         * represents absolute or relative values (differences).
         */
        relativeData: boolean;
        /**
         * Gets or sets a value that determines the value of the start bar.
         * If start is null, the start bar will not be shown.
         */
        start: number;
        /**
         * Gets or sets the label of the start bar.
         */
        startLabel: string;
        /**
         * Gets or sets a value that determines whether to show
         * the total bar at the end of the chart.
         */
        showTotal: boolean;
        /**
         * Gets or sets the label of the total bar.
         */
        totalLabel: string;
        /**
         * Gets or sets a value that determines whether to show intermediate
         * total bars.
         *
         * This property works with {@link intermediateTotalPositions} and
         * {@link intermediateTotalLabels} properties.
         */
        showIntermediateTotal: boolean;
        /**
         * Gets or sets a value of the property that contains the index
         * for positions of the intermediate total bars.
         *
         * This property works with the {@link showIntermediateTotal} and
         * {@link intermediateTotalLabels} properties.
         */
        intermediateTotalPositions: number[];
        /**
         * Gets or sets the name of the property that contains labels for
         * the intermediate total bars. This should be an array or a string.
         *
         * This property works with the {@link showIntermediateTotal} and
         * {@link intermediateTotalPositions} properties.
         */
        intermediateTotalLabels: any;
        /**
         * Gets or sets a value that determines whether to show
         * connector lines.
         */
        connectorLines: boolean;
        /**
         * Gets or sets the Waterfall styles.
         *
         * The following styles are supported:
         *
         * <ol>
         *   <li><b>start</b>: Specifies the style of the start column.</li>
         *   <li><b>total</b>: Specifies the style of the total column.</li>
         *   <li><b>intermediateTotal</b>: Specifies the style of the intermediate total column.</li>
         *   <li><b>falling</b>: Specifies the style of the falling columns.</li>
         *   <li><b>rising</b>: Specifies the style of the rising columns.</li>
         *   <li><b>connectorLines</b>: Specifies the style of the connectorLines.</li>
         * </ol>
         *
         * <pre>waterfall.styles = {
         *   start: { fill: 'blue', stroke: 'blue' },
         *   total: { fill: 'yellow', stroke: 'yellow' },
         *   falling: { fill: 'red', stroke: 'red' },
         *   rising: { fill: 'green', stroke: 'green' },
         *   connectorLines: { stroke: 'blue', 'stroke-dasharray': '10, 10' }
         * }</pre>
         */
        styles: any;
        getValues(dim: number): number[];
        legendItemLength(): number;
        measureLegendItem(engine: wijmo.chart.IRenderEngine, index: number): wijmo.Size;
        drawLegendItem(engine: wijmo.chart.IRenderEngine, rect: wijmo.Rect, index: number): void;
        _clearValues(): void;
        _invalidate(): void;
        _getXOffset(): number;
        _getYOffset(pointIndex: number): number;
        _getValue(pointIndex: number): number;
        _getItem(pi: number): any;
        private _rendering;
        private _getStyles;
        private _getStyleByKey;
        private _drawConnectorLine;
        private _getLegendStyles;
        private _getName;
    }
}
declare module wijmo.chart.analytics {
    /**
     * Represents base class for various trend lines.
     */
    class TrendLineBase extends wijmo.chart.SeriesBase {
        private _sampleCount;
        private _bind;
        private _bindX;
        _xValues: any[];
        _yValues: any[];
        _originXValues: any[];
        _originYValues: any[];
        /**
         * Initializes a new instance of the {@link TrendLineBase} class.
         *
         * @param options JavaScript object containing initialization data for the object.
         */
        constructor(options?: any);
        /**
         * Gets or sets the sample count for function calculation.
         * The property doesn't apply for MovingAverage.
         */
        sampleCount: number;
        /**
         * Gets the approximate y value from the given x value.
         *
         * @param x The x value to be used for calculating the Y value.
         */
        approximate(x: number): number;
        getValues(dim: number): number[];
        _calculateValues(): void;
        _invalidate(): void;
        _clearValues(): void;
        _clearCalculatedValues(): void;
    }
}
declare module wijmo.chart.analytics {
    /**
     * Specifies the type of MovingAverage Series.
     */
    enum MovingAverageType {
        /**
         * An average of the last n values.
         */
        Simple = 0,
        /**
         * Weighted average of the last n values,
         * where the weight decreases by 1 with each previous value.
         */
        Weighted = 1,
        /**
         * Weighted average of the last n values,
         * where the weight decreases exponentially with each previous value.
         */
        Exponential = 2,
        /**
         * Weighted average of the last n values,
         * whose result is equivalent to a double smoothed simple moving average.
         */
        Triangular = 3
    }
    /**
     * Represents a moving average trend line for {@link FlexChart} and {@link FinancialChart}.
     *
     * It is a calculation to analyze data points by creating a series of averages of
     * different subsets of the full data set. You may define a different type on each
     * {@link MovingAverage} object by setting the {@link type} property on the
     * {@link MovingAverage} itself.
     *
     * The {@link MovingAverage} class has a {@link period} property that allows you to set
     * the number of periods for computing the average value.
     */
    class MovingAverage extends TrendLineBase {
        private _period;
        private _type;
        /**
         * Initializes a new instance of the {@link MovingAverage} class.
         *
         * @param options JavaScript object containing initialization data for the object.
         */
        constructor(options?: any);
        /**
         * Gets or sets the type of the moving average series.
         */
        type: MovingAverageType;
        /**
         * Gets or sets the period of the moving average series.
         * It should be set to integer value greater than 1.
         */
        period: number;
        _checkPeriod(): void;
        _calculateValues(): void;
        private _calculateSimple;
        private _calculateWeighted;
        private _calculateExponential;
        private _calculateTriangular;
    }
}
declare module wijmo.chart.analytics {
    /**
     * Specifies the fit type for a {@link TrendLine} series.
     */
    enum TrendLineFitType {
        /**
         * A straight line that most closely approximates the data.  Y(x) = a * x + b.
         */
        Linear = 0,
        /**
         * Regression fit to the equation Y(x) = a * exp(b*x).
         */
        Exponential = 1,
        /**
         * Regression fit to the equation Y(x) = a * ln(x) + b.
         */
        Logarithmic = 2,
        /**
         * Regression fit to the equation Y(x) = a * pow(x, b).
         */
        Power = 3,
        /**
         * Regression fit to the equation Y(x) = a + b * cos(x) + c * sin(x) + d * cos(2*x) + e * sin(2*x) + ...
         */
        Fourier = 4,
        /**
         * Regression fit to the equation Y(x) = a * x^n + b * x^n-1 + c * x^n-2 + ... + z.
         */
        Polynomial = 5,
        /**
         * The minimum X-value.
         */
        MinX = 6,
        /**
         * The minimum Y-value.
         */
        MinY = 7,
        /**
         * The maximum X-value.
         */
        MaxX = 8,
        /**
         * The maximum Y-value.
         */
        MaxY = 9,
        /**
         * The average X-value.
         */
        AverageX = 10,
        /**
         * The average Y-value.
         */
        AverageY = 11
    }
    /**
     * Represents a trend line series in a {@link FlexChart} or {@link FinancialChart}.
     *
     * A trend line is a line superimposed on a chart revealing the overall
     * direction of data.
     *
     * You may define a different fit type for each {@link TrendLine} series
     * on the {@link FlexChart} by setting its {@link fitType} property.
     */
    class TrendLine extends TrendLineBase {
        private _fitType;
        private _order;
        private _helper;
        /**
         * Initializes a new instance of the {@link TrendLine} class.
         *
         * @param options JavaScript object containing initialization data for the object.
         */
        constructor(options?: any);
        /**
         * Gets or sets the fit type of the {@link TrendLine}.
         */
        fitType: TrendLineFitType;
        /**
         * Gets or sets the number of terms in a polynomial or Fourier equation.
         *
         * Set this value to an integer greater than 1.
         * It gets applied when the fitType is set to
         * TrendLineFitType.Polynomial or
         * TrendLineFitType.Fourier.
         */
        order: number;
        /**
         * Gets the coefficients of the equation.
         */
        readonly coefficients: number[];
        /**
         * Gets the approximate y value from the given x value.
         *
         * @param x The x value to be used for calculating the Y value.
         */
        approximate(x: number): number;
        /**
         * Gets the formatted equation string for the coefficients.
         *
         * @param fmt The formatting function used to convert the coefficients
         * into strings. This parameter is optional.
         */
        getEquation(fmt?: Function): string;
        _calculateValues(): void;
    }
}
declare module wijmo.chart.analytics {
    /**
     * Represents a base class of function series for {@link FlexChart}.
     */
    class FunctionSeries extends TrendLineBase {
        private _min;
        private _max;
        /**
         * Initializes a new instance of the {@link FunctionSeries} class.
         *
         * @param options JavaScript object containing initialization data for the object.
         */
        constructor(options?: any);
        /**
         * Gets or sets the minimum value of the parameter for calculating a function.
         */
        min: number;
        /**
         * Gets or sets the maximum value of the parameter for calculating a function.
         */
        max: number;
        getValues(dim: number): number[];
        _calculateValues(): void;
        _validateValue(value: number): number;
        _calculateValue(func: Function, parameter: number): number;
        _calculateX(value: number): number;
        _calculateY(value: number): number;
    }
    /**
     * Represents a Y function series of {@link FlexChart}.
     *
     * The {@link YFunctionSeries} plots a function defined by formulas
     * of type y=f(x), specified using the {@link func} property.
     */
    class YFunctionSeries extends FunctionSeries {
        private _func;
        /**
         * Initializes a new instance of the {@link YFunctionSeries} class.
         *
         * @param options JavaScript object containing initialization data for the object.
         */
        constructor(options?: any);
        /**
         * Gets or sets the function used to calculate Y value.
         */
        func: Function;
        _calculateX(value: number): number;
        _calculateY(value: number): number;
        /**
         * Gets the approximate y value from the given x value.
         *
         * @param x The x value to be used for calculating the Y value.
         */
        approximate(x: number): number;
    }
    /**
     * Represents a parametric function series for {@link FlexChart}.
     *
     * The {@link ParametricFunctionSeries} plots a function defined by formulas
     * x=f(t) and y=f(t).
     *
     * The x and y values are calculated by the functions assigned to the
     * {@link xFunc} and {@link yFunc} properties.
     */
    class ParametricFunctionSeries extends FunctionSeries {
        private _xFunc;
        private _yFunc;
        /**
         * Initializes a new instance of the {@link ParametricFunctionSeries} class.
         *
         * @param options JavaScript object containing initialization data for the object.
         */
        constructor(options?: any);
        /**
         * Gets or sets the function used to calculate the x value.
         */
        xFunc: Function;
        /**
         * Gets or sets the function used to calculate the y value.
         */
        yFunc: Function;
        _calculateX(value: number): number;
        _calculateY(value: number): number;
        /**
         * Gets the approximate x and y from the given value.
         *
         * @param value The value to calculate.
         */
        approximate(value: number): any;
    }
}
declare module wijmo.chart.analytics {
    /**
     * Specifies the meaning of the {@link ErrorBar}'s {@link ErrorBar.value} property.
     */
    enum ErrorAmount {
        /** The value property represents the error as an absolute value. */
        FixedValue = 0,
        /** The value property represents the error as a percentage. */
        Percentage = 1,
        /** The value property represents the error as a number of standard deviations. */
        StandardDeviation = 2,
        /** The error is the standard error of the mean (value property is not used). */
        StandardError = 3,
        /** Error values are bound through the {@link ErrorBar.binding} property or set to an object with 'plus' and 'minus' values. */
        Custom = 4
    }
    /**
     * Specifies the end style of the error bars.
     */
    enum ErrorBarEndStyle {
        /** Error bars end with a cap. */
        Cap = 0,
        /** Error bars are simple lines. */
        NoCap = 1
    }
    /**
     * Specifies the direction of the error bar.
     */
    enum ErrorBarDirection {
        /** Show errors in both directions. */
        Both = 0,
        /** Show errors only in the minus direction. */
        Minus = 1,
        /** Show errors only in the plus direction. */
        Plus = 2
    }
    /**
     * Represents an {@link ErrorBar} series on a {@link FlexChart}.
     *
     * The {@link ErrorBar} series shows error margins and standard deviations
     * at a glance. They can be shown as a standard error amounts, percentages,
     * or standard deviation.
     *
     * You can also set the error values explicitly to display the exact
     * amounts you want.
     */
    class ErrorBar extends wijmo.chart.Series {
        private __errorValue;
        private _mean;
        private _errorAmount;
        private _endStyle;
        private _direction;
        private _value;
        private _errorBarStyle;
        private _paddings;
        private _plusBindingValues;
        private _minusBindingValues;
        private _errorBarEles;
        /**
         * Initializes a new instance of the {@link ErrorBar} class.
         *
         * @param options JavaScript object containing initialization data for the object.
         */
        constructor(options?: any);
        /**
         * Gets or sets a value that specifies the error value of the series.
         *
         * This property works with the {@link errorAmount} property.
         */
        value: any;
        /**
         * Gets or sets a value that specifies the meaning of the
         * {@link value} property.
         */
        errorAmount: ErrorAmount;
        /**
         * Gets or sets the style used to render the error bars.
         */
        errorBarStyle: any;
        /**
         * Gets or sets a value that specifies the end style of the error bars.
         */
        endStyle: ErrorBarEndStyle;
        /**
         * Gets or sets a value that specifies the direction of the error bars.
         */
        direction: ErrorBarDirection;
        getDataRect(currentRect?: wijmo.Rect, calculatedRect?: wijmo.Rect): wijmo.Rect;
        private _getCustomValue;
        _calculateErrorValue(): void;
        _clearValues(): void;
        getValues(dim: number): number[];
        _chart: wijmo.chart.FlexChartCore;
        _errorValue: number;
        readonly _showPlus: boolean;
        readonly _showMinus: boolean;
        private _rendering;
        /**
         * Gets the plot element that corresponds to the specified point index.
         *
         * @param pointIndex The index of the data point.
         */
        getPlotElement(pointIndex: number): any;
    }
}
declare module wijmo.chart.analytics {
    /** Defines styles for the {@link BreakEven} series. */
    interface IBreakEvenStyles {
        /** Specifies the style of the fixed cost line. */
        fixedCost?: any;
        /** Specifies the style of the variable cost line. */
        variableCost?: any;
        /** Specifies the style of the total cost line. */
        totalCost?: any;
        /** Specifies the style of the sales revenue line. */
        salesRevenue?: any;
        /** Specifies the style of the safety margin area. */
        safetyMargin?: any;
        /** Specifies the style of the marginal profit line. */
        marginalProfit?: any;
        /** Specifies the style of the break even markers. */
        breakEven?: any;
    }
    /**
     * Represents a Break Even chart series.
     *
     * A break even chart is a chart that shows the sales volume level at which total costs equal sales.
     * Use the styles property to customize appearance of different parts of Break Even chart.
     * The name property contains comma-separated names that are shown as legend entries.
     */
    class BreakEven extends wijmo.chart.SeriesBase {
        private _fixedCost;
        private _variableCost;
        private _salesPrice;
        private _styles;
        /**
         * Initializes a new instance of the {@link BreakEven} class.
         *
         * @param options JavaScript object containing initialization data for the object.
         */
        constructor(options?: any);
        /**
         * Gets or sets a value of fixed cost.
         */
        fixedCost: number;
        /**
         * Gets or sets a value of variable cost.
         */
        variableCost: number;
        /**
         * Gets or sets a value of sales price.
         */
        salesPrice: number;
        /**
         * Gets or sets the styles of Break Even chart.
         *
         * The following styles are supported:
         *
         * <ol>
         *   <li><b>fixedCost</b>: Specifies the style of the fixed cost.</li>
         *   <li><b>variableCost</b>: Specifies the style of the variable cost.</li>
         *   <li><b>totalCost</b>: Specifies the style of the total cost.</li>
         *   <li><b>salesRevenue</b>: Specifies the style of the sales revenue.</li>
         *   <li><b>safetyMargin</b>: Specifies the style of the safety margin.</li>
         *   <li><b>marginalProfit</b>: Specifies the style of the marginal profit.</li>
         *   <li><b>breakEven</b>: Specifies the style of the break even.</li>
         * </ol>
         *
         * The style of profit and loss areas is specified by the style and altStyle properties.
         */
        styles: IBreakEvenStyles;
        getValues(dim: number): number[];
        private _rendering;
        _setStyle(eng: wijmo.chart.IRenderEngine, style: any): void;
        _getName(dim: number): string;
        legendItemLength(): number;
        _getStyle(index: number): any;
        measureLegendItem(engine: wijmo.chart.IRenderEngine, index: number): wijmo.Size;
        drawLegendItem(engine: wijmo.chart.IRenderEngine, rect: wijmo.Rect, index: number): void;
    }
}
declare module wijmo.chart.analytics {
    /**
     * Specifies the quartile calculation method of {@link BoxWhisker} series.
     */
    enum QuartileCalculation {
        /** Include median value when calculating quartile. */
        InclusiveMedian = 0,
        /** Exclude median value when calculating quartile. */
        ExclusiveMedian = 1
    }
    /**
     * Represents a Box&Whisker chart series.
     *
     * The {@link BoxWhisker} series is normally used to compare distributions
     * between different sets of numerical data.
     */
    class BoxWhisker extends wijmo.chart.SeriesBase {
        private _groupWidth;
        private _gapWidth;
        private _showMeanLine;
        private _meanLineStyle;
        private _showMeanMarker;
        private _meanMarkerStyle;
        private _showInnerPoints;
        private _showOutliers;
        private _quartileCalculation;
        hitTester: wijmo.chart._HitTester;
        /**
         * Initializes a new instance of the {@link BoxWhisker} class.
         *
         * @param options JavaScript object containing initialization data for the object.
         */
        constructor(options?: any);
        private _initProperties;
        _clearValues(): void;
        /**
         * Gets or sets a value that specifies the quartile calculation method.
         */
        quartileCalculation: QuartileCalculation;
        /**
         * Gets or sets a value that determines the group width as a percentage.
         *
         * The default value for this property is 0.8. The min value is 0 and max value is 1.
         */
        groupWidth: number;
        /**
         * Gets or sets a value that determines the width of the gab between groups
         * as a percentage.
         *
         * The default value for this property is 0.1. The min value is 0 and max value is 1.
         */
        gapWidth: number;
        /**
         * Gets or sets a value that determines whether to show the mean line.
         */
        showMeanLine: boolean;
        /**
         * Gets or sets a value that specifies the style for the mean line.
         */
        meanLineStyle: any;
        /**
         * Gets or sets a value that determines whether to show the mean marker.
         */
        showMeanMarker: boolean;
        /**
         * Gets or sets a value that specifies the style for the mean marker.
         */
        meanMarkerStyle: any;
        /**
         * Gets or sets a value that determines whether to show the inner data points
         * for each point in the series.
         */
        showInnerPoints: boolean;
        /**
         * Gets or sets a value that determines whether to show outliers.
         *
         * Outliers are inner points outside the range between the first
         * and third quartiles.
         */
        showOutliers: boolean;
        private _rendering;
        _convertPoints(points: number[], axis: wijmo.chart._IAxis): number[];
        _drawBoxWhisker(engine: wijmo.chart.IRenderEngine, xs: any, ys: any, prevXS: any, prevYS: any, series: wijmo.chart._ISeries): void;
        _renderLabels(engine: wijmo.chart.IRenderEngine, smap: wijmo.chart._IHitArea[], chart: wijmo.chart.FlexChartCore, lblAreas: wijmo.chart._RectArea[]): void;
    }
    class _BoxPlot {
        private _data;
        private _min;
        private _max;
        private _mean;
        private _firstQuartile;
        private _thirdQuartile;
        private _median;
        private _quartileCalculation;
        private _iqr;
        private _outlierPoints;
        private _innerPoints;
        private _showOutliers;
        constructor(data: number[], quartileCalculation: QuartileCalculation, showOutliers: boolean);
        readonly showOutliers: boolean;
        readonly min: number;
        readonly max: number;
        readonly mean: number;
        readonly firstQuartile: number;
        readonly thirdQuartile: number;
        readonly median: number;
        readonly outlierPoints: number[];
        readonly innerPoints: number[];
        _parse(): void;
        _quartileInc(data: number[], percent: number): any;
        _quartileExc(data: number[], percent: number): any;
    }
}
declare module wijmo.chart.analytics {
}

declare module wijmo.chart.annotation {
    /**
     * Specifies the attachment of the annotation.
     */
    enum AnnotationAttachment {
        /**
        * Coordinates of the annotation point are defined by the data series index and
        * the data point index. */
        DataIndex = 0,
        /** Annotation point is specified in data coordinates. */
        DataCoordinate = 1,
        /** Annotation point is specified as a relative position inside the control where
        * (0,0) is the top left corner and (1,1) is the bottom right corner.*/
        Relative = 2,
        /** The annotation point is specified in control's pixel coordinates.  */
        Absolute = 3
    }
    /**
     * Specifies the position of the annotation.
     */
    enum AnnotationPosition {
        /** The annotation appears at the Center of the target point. */
        Center = 0,
        /** The annotation appears at the Top of the target point. */
        Top = 1,
        /** The annotation appears at the Bottom of the target point. */
        Bottom = 2,
        /** The annotation appears at the Left of the target point. */
        Left = 4,
        /** The annotation appears at the Right of the target point. */
        Right = 8
    }
    /**
     * Represents the base class of annotations for the {@link AnnotationLayer}.
     */
    class AnnotationBase {
        static _DATA_KEY: string;
        static _CSS_ANNOTATION: string;
        static _CSS_ANNO_TEXT: string;
        static _CSS_ANNO_SHAPE: string;
        private _attachment;
        private _point;
        private _seriesIndex;
        private _pointIndex;
        private _position;
        private _offset;
        private _style;
        private _isVisible;
        private _tooltip;
        private _name;
        _element: SVGElement;
        _layer: AnnotationLayer;
        /**
         * Initializes a new instance of the {@link AnnotationBase} class.
         *
         * @param options JavaScript object containing initialization data for the object.
         */
        constructor(options?: any);
        /**
         * Gets or sets the attachment of the annotation.
         */
        attachment: AnnotationAttachment;
        /**
         * Gets or sets the point of the annotation.
         * The coordinates of points depends on the {@link attachment} property.
         * See {@link AnnotationAttachment} for further description.
         */
        point: wijmo.chart.DataPoint;
        /**
         * Gets or sets the data series index of the annotation.
         * Applies only when the <b>attachment</b> property is set to DataIndex.
         */
        seriesIndex: number;
        /**
         * Gets or sets the data point index of the annotation.
         * Applies only when the <b>attachment</b> property is set to DataIndex.
         */
        pointIndex: number;
        /**
         * Gets or sets the position of the annotation.
         * The position is relative to the {@link point}.
         */
        position: AnnotationPosition;
        /**
         * Gets or sets the offset of the annotation from the {@link point}.
         */
        offset: wijmo.Point;
        /**
         * Gets or sets the style of the annotation.
         */
        style: any;
        /**
         * Gets or sets the visibility of the annotation.
         */
        isVisible: boolean;
        /**
         * Gets or sets the tooltip of the annotation.
         */
        tooltip: string;
        /**
         * Gets or sets the name of the annotation.
         */
        name: string;
        /**
         * Render this annotation.
         *
         * @param engine The engine to render annotation.
         */
        render(engine: wijmo.chart.IRenderEngine): void;
        /**
         * Destroy this annotation
         */
        destroy(): void;
        _copy(dst: any, src: any): void;
        _processOptions(key: any, dst: any, src: any): void;
        _resetDefaultValue(): void;
        _toggleVisibility(visible: boolean): void;
        _getCSSClass(): string;
        _render(engine: wijmo.chart.IRenderEngine): void;
        _repaint(): void;
        _convertPoint(pt?: wijmo.chart.DataPoint): wijmo.Point;
        _convertDataToLen(total: number, axis: wijmo.chart.Axis, val: any, converted?: boolean): number;
        _renderCenteredText(content: string, engine: wijmo.chart.IRenderEngine, point: wijmo.Point, className?: string, angle?: number, style?: any): void;
        _adjustOffset(pt: wijmo.Point, offset: wijmo.Point): void;
        _getOffset(engine?: wijmo.chart.IRenderEngine): wijmo.Point;
        _getPositionOffset(engine?: wijmo.chart.IRenderEngine): wijmo.Point;
        _getSize(engine?: wijmo.chart.IRenderEngine): wijmo.Size;
        _isValidPoint(pt: wijmo.Point): boolean;
        _measureString(engine: wijmo.chart.IRenderEngine, text: string, className: string): wijmo.Size;
    }
    /**
     * Represents a text annotation for the {@link AnnotationLayer}.
     */
    class Text extends AnnotationBase {
        static _CSS_TEXT: string;
        private _text;
        /**
         * Initializes a new instance of the {@link Text} annotation class.
         *
         * @param options JavaScript object containing initialization data for the object.
         */
        constructor(options?: any);
        _resetDefaultValue(): void;
        _getCSSClass(): string;
        /**
         * Gets or sets the text of the annotation.
         */
        text: string;
        _render(engine: wijmo.chart.IRenderEngine): void;
        _getSize(engine?: wijmo.chart.IRenderEngine): wijmo.Size;
    }
    /**
     * Represents a base class of shape annotations for the {@link AnnotationLayer}.
     */
    class Shape extends AnnotationBase {
        static _CSS_SHAPE: string;
        private _content;
        _shapeContainer: SVGGElement;
        /**
         * Initializes a new instance of the {@link Shape} annotation class.
         *
         * @param options JavaScript object containing initialization data for the object.
         */
        constructor(options?: any);
        _resetDefaultValue(): void;
        _getCSSClass(): string;
        /**
         * Gets or sets the text of the annotation.
         */
        content: string;
        _render(engine: wijmo.chart.IRenderEngine): void;
        _getContentCenter(): wijmo.chart.DataPoint;
        _renderShape(engine: wijmo.chart.IRenderEngine): void;
        _renderText(engine: wijmo.chart.IRenderEngine): void;
    }
    /**
     * Represents an ellipse annotation for {@link AnnotationLayer}.
     */
    class Ellipse extends Shape {
        static _CSS_ELLIPSE: string;
        private _width;
        private _height;
        /**
         * Initializes a new instance of the {@link Ellipse} annotation class.
         *
         * @param options JavaScript object containing initialization data for the object.
         */
        constructor(options?: any);
        /**
         * Gets or sets the width of the {@link Ellipse} annotation.
         */
        width: number;
        /**
         * Gets or sets the height of the {@link Ellipse} annotation.
         */
        height: number;
        _resetDefaultValue(): void;
        _getCSSClass(): string;
        _renderShape(engine: wijmo.chart.IRenderEngine): void;
        _getSize(): wijmo.Size;
    }
    /**
     * Represents a rectangle annotation for {@link AnnotationLayer}.
     */
    class Rectangle extends Shape {
        static _CSS_RECTANGLE: string;
        private _width;
        private _height;
        /**
         * Initializes a new instance of the {@link Rectangle} annotation class.
         *
         * @param options JavaScript object containing initialization data for the object.
         */
        constructor(options?: any);
        /**
         * Gets or sets the width of the {@link Rectangle} annotation.
         */
        width: number;
        /**
         * Gets or sets the height of the {@link Rectangle} annotation.
         */
        height: number;
        _resetDefaultValue(): void;
        _getCSSClass(): string;
        _renderShape(engine: wijmo.chart.IRenderEngine): void;
        _getSize(): wijmo.Size;
    }
    /**
     * Represents a line annotation for {@link AnnotationLayer}.
     */
    class Line extends Shape {
        static _CSS_LINE: string;
        private _start;
        private _end;
        private _cS;
        private _cE;
        /**
         * Initializes a new instance of the {@link Line} annotation class.
         *
         * @param options JavaScript object containing initialization data for the object.
         */
        constructor(options?: any);
        /**
         * Gets or sets the start point of the {@link Line} annotation.
         */
        start: wijmo.chart.DataPoint;
        /**
         * Gets or sets the end point of the Line annotation.
         */
        end: wijmo.chart.DataPoint;
        _resetDefaultValue(): void;
        _getCSSClass(): string;
        _getContentCenter(): wijmo.chart.DataPoint;
        _renderShape(engine: wijmo.chart.IRenderEngine): void;
        _getSize(): wijmo.Size;
        _renderText(engine: wijmo.chart.IRenderEngine): void;
        _renderCenteredText(content: string, engine: wijmo.chart.IRenderEngine, point: wijmo.Point, className?: string, angle?: number, style?: any): void;
    }
    /**
     * Represents a polygon annotation for {@link AnnotationLayer}.
     */
    class Polygon extends Shape {
        static _CSS_POLYGON: string;
        private _points;
        /**
         * Initializes a new instance of the {@link Polygon} annotation class.
         *
         * @param options JavaScript object containing initialization data for the object.
         */
        constructor(options?: any);
        _processOptions(key: any, dst: any, src: any): void;
        /**
         * Gets the collection of points of the {@link Polygon} annotation.
         */
        readonly points: wijmo.collections.ObservableArray;
        _resetDefaultValue(): void;
        _getCSSClass(): string;
        _getContentCenter(): wijmo.chart.DataPoint;
        _renderShape(engine: wijmo.chart.IRenderEngine): void;
        _getSize(): wijmo.Size;
    }
    /**
     * Represents a circle annotation for {@link AnnotationLayer}.
     */
    class Circle extends Shape {
        static _CSS_CIRCLE: string;
        private _radius;
        /**
         * Initializes a new instance of the {@link Circle} annotation class.
         *
         * @param options JavaScript object containing initialization data for the object.
         */
        constructor(options?: any);
        /**
         * Gets or sets the radius of the {@link Circle} annotation.
         */
        radius: number;
        _resetDefaultValue(): void;
        _getCSSClass(): string;
        _renderShape(engine: wijmo.chart.IRenderEngine): void;
        _getSize(): wijmo.Size;
    }
    /**
     * Represents a square annotation for the {@link AnnotationLayer}.
     */
    class Square extends Shape {
        static _CSS_SQUARE: string;
        private _length;
        /**
         * Initializes a new instance of the {@link Square} annotation class.
         *
         * @param options JavaScript object containing initialization data for the object.
         */
        constructor(options?: any);
        /**
            * Gets or sets the length of the {@link Square} annotation.
            */
        length: number;
        _resetDefaultValue(): void;
        _getCSSClass(): string;
        _renderShape(engine: wijmo.chart.IRenderEngine): void;
        _getSize(): wijmo.Size;
    }
    /**
        * Represents an image annotation for {@link AnnotationLayer}.
        */
    class Image extends Shape {
        static _CSS_IMAGE: string;
        private _width;
        private _height;
        private _href;
        /**
            * Initializes a new instance of the {@link Image} annotation class.
            *
            * @param options JavaScript object containing initialization data for the object.
            */
        constructor(options?: any);
        /**
            * Gets or sets the width of the {@link Image} annotation.
            */
        width: number;
        /**
            * Gets or sets the height of the {@link Image} annotation.
            */
        height: number;
        /**
            * Gets or sets the href of the {@link Image} annotation.
            */
        href: string;
        _resetDefaultValue(): void;
        _getCSSClass(): string;
        _renderShape(engine: wijmo.chart.IRenderEngine): void;
        _getSize(): wijmo.Size;
        private _applyStyle;
        private _deCase;
    }
}
declare module wijmo.chart.annotation {
    /**
     * Represents an annotation layer for {@link FlexChart} and {@link FinancialChart}.
     *
     * The AnnotationLayer contains a collection of various annotation elements: texts,
     * lines, images, rectangles etc.
     * To use the {@link AnnotationLayer}, create annotations and push them to the layer's
     * items property.
     */
    class AnnotationLayer {
        static _CSS_Layer: string;
        private _items;
        private _engine;
        _layerEle: SVGGElement;
        private _plotrectId;
        private _tooltip;
        private _forceTTShowing;
        private _annoTTShowing;
        _chart: wijmo.chart.FlexChartCore;
        /**
         * Initializes a new instance of the {@link AnnotationLayer} class.
         *
         * @param chart A chart to which the {@link AnnotationLayer} is attached.
         * @param options A JavaScript object containing initialization data for
         * {@link AnnotationLayer}.
         */
        constructor(chart: wijmo.chart.FlexChartCore, options?: any);
        _init(chart: wijmo.chart.FlexChartCore): void;
        private _lostFocus;
        /**
         * Gets the collection of annotation elements in the {@link AnnotationLayer}.
         */
        readonly items: wijmo.collections.ObservableArray;
        /**
         * Gets an annotation element by name in the {@link AnnotationLayer}.
         * @param name The annotation's name.
         */
        getItem(name: string): AnnotationBase;
        /**
         * Gets the annotation elements by name in the {@link AnnotationLayer}.
         * @param name The annotations' name.
         */
        getItems(name: string): Array<AnnotationBase>;
        private _bindTooltip;
        _showTooltip(): boolean;
        private _toggleTooltip;
        _getAnnotation(ele: any, parentNode: any): AnnotationBase;
        private _getAnnotationElement;
        private _itemsChanged;
        private _renderAnnotations;
        _renderGroup(): void;
        _renderAnnotation(item: AnnotationBase): void;
        private _destroyAnnotations;
        private _destroyAnnotation;
    }
}
declare module wijmo.chart.annotation {
}

declare module wijmo.chart.interaction {
    /**
         * Specifies the mouse action of the chart gestures.
         */
    enum MouseAction {
        /** Zoom chart by mouse. */
        Zoom = 0,
        /** Pan chart by mouse. */
        Pan = 1
    }
    /**
         * Specifies the interactive axes of the chart gestures.
         */
    enum InteractiveAxes {
        /** Interactive Axis X. */
        X = 0,
        /** Interactive Axis Y. */
        Y = 1,
        /** Interactive Both Axis X and Axis Y. */
        XY = 2
    }
    /**
     * The {@link ChartGestures} control allows the user to zoom or pan on
     * the specified {@link FlexChart}.
     *
     * To use the {@link ChartGestures} control, specify the {@link FlexChart}
     * control on which to zoom or pan.
     *
     * <pre>
     *  var chartGestures = new ChartGestures(chart);
     * </pre>
     */
    class ChartGestures {
        static _CSS_ZOOM: string;
        static _CSS_ZOOM_OVERLAY: string;
        static _CSS_PANABLE: string;
        static _CSS_TOUCH_DISABLED: string;
        static _CSS_BLOCK_INTERACTION: string;
        private _chart;
        private _zoomEle;
        private _overlayEle;
        private _zoomEleOffset;
        private _wrapperMousedown;
        private _wrapperMouseMove;
        private _wrapperMouseup;
        private _wrapperPointerdown;
        private _wrapperPointerMove;
        private _wrapperPointerup;
        private _wrapperTouchStart;
        private _wrapperTouchMove;
        private _wrapperTouchEnd;
        private _wrapperMouseWheel;
        private _plotBox;
        private _startFirstPt;
        private _minX;
        private _maxX;
        private _minY;
        private _maxY;
        private _seriesGroup;
        private _threadHold;
        private _scaling;
        private _panning;
        private _startDistance;
        private _clip;
        private _selection;
        private _startPointers;
        private _mvPointers;
        private _plotOffset;
        private _endPoint;
        private _pinchStartEvents;
        private _minXRange;
        private _minYRange;
        private _innerUpdating;
        private _lastMinX;
        private _lastMaxX;
        private _lastMinY;
        private _lastMaxY;
        private _mouseAction;
        private _interactiveAxes;
        private _enable;
        private _scaleX;
        private _scaleY;
        private _posX;
        private _posY;
        /**
         * Initializes a new instance of the {@link ChartGestures} class.
         *
         * @param chart The {@link FlexChart} that allows the user to zoom or pan.
         * @param options A JavaScript object containing initialization data for the control.
         */
        constructor(chart: wijmo.chart.FlexChartCore, options?: any);
        /**
             * Gets or sets the mouse action of the ChartGestures.
             */
        mouseAction: MouseAction;
        /**
             * Gets or sets the interactive axes of the ChartGestures.
             */
        interactiveAxes: InteractiveAxes;
        /**
             * Gets or sets the enable of the ChartGestures.
             */
        enable: boolean;
        /**
             * Gets or sets the initial scale of axis X.
             * The scale should be more than 0 and less than or equal to 1.
             * The scale specifies which part of the range between Min and Max
             * is shown. When scale is 1 (default value), the whole axis range
             * is visible.
             */
        scaleX: number;
        /**
             * Gets or sets the initial scale of axis Y.
             * The scale should be more than 0 and less than or equal to 1.
             * The scale specifies which part of the range between Min and Max
             * is shown. When scale is 1 (default value), the whole axis range
             * is visible.
             */
        scaleY: number;
        /**
             * Gets or sets the initial position of the axis X.
             * The value represents initial position on the axis when the Scale
             * is less than 1. Otherwise, the Value has no effect. The Value should
             * lie between 0 to 1.
         */
        posX: number;
        /**
             * Gets or sets the initial position of the axis Y.
             * The value represents initial position on the axis when the Scale
             * is less than 1. Otherwise, the Value has no effect. The Value should
             * lie between 0 to 1.
         */
        posY: number;
        /**
         * Removes the {@link ChartGestures} control from the chart.
         */
        remove(): void;
        /**
         * Reset the axis of the chart.
         */
        reset(): void;
        /**
         * Refreshes the {@link FlexChart} with the gestures settings.
         */
        _refreshChart(): void;
        private _initialize;
        private _switchEvent;
        private _refresh;
        /** mouse event*/
        private _onMousedown;
        private _onMouseMove;
        private _onMouseup;
        private _onMouseWheel;
        private _mouseDown;
        private _mouseMove;
        private _mouseup;
        /** ms pointer event*/
        private _onPointerdown;
        private _onPointerMove;
        private _onPointerup;
        private _pointerDown;
        private _pointerMove;
        private _pointerUp;
        /** touch event*/
        private _onTouchStart;
        private _onTouchMove;
        private _onTouchEnd;
        /** help method of zooming chart by mouse */
        private _initOverlay;
        private _updateOverLay;
        _updatePoint(mvPt: wijmo.Point): void;
        _pointInPlotArea(mvPt: wijmo.Point): boolean;
        private _zoomedChart;
        private _zoomedAxis;
        private _panningChart;
        private _pannedChart;
        private _scalingChart;
        private _scaledChart;
        private _updateAxisByDistance;
        private _updateAxisByChg;
        private _initAxisRangeWithPosAndScale;
        private _updateAxisRange;
        private _reset;
        private _getAxisMin;
        private _getAxisMax;
        private _getTransFormGroups;
        private _disabledOthersInteraction;
        private _getPoint;
        private _getTouchPair;
        private _touchDistance;
    }
}
declare module wijmo.chart.interaction {
    /**
     * Range Slider.
     */
    class _RangeSlider {
        private static _HRANGESLIDER;
        private static _VRANGESLIDER;
        private static _RANGESLIDER_DECBTN;
        private static _RANGESLIDER_INCBTN;
        private static _RANGESLIDER_RANGEHANDLE;
        private static _RANGESLIDER_MINHANDLE;
        private static _RANGESLIDER_MAXHANDLE;
        private static _RANGESLIDER_HANDLE_ACTIVE;
        private _isVisible;
        private _buttonsVisible;
        private _minScale;
        private _maxScale;
        private _seamless;
        private _rsContainer;
        private _rsEle;
        private _decBtn;
        private _incBtn;
        private _rsContent;
        private _minHandler;
        private _rangeHandler;
        private _maxHandler;
        private _wrapperSliderMousedown;
        private _wrapperDocMouseMove;
        private _wrapperDocMouseup;
        private _wrapperBtnMousedown;
        private _wrapperRangeSpaceMousedown;
        private _wrapperRangeMouseleave;
        private _isTouch;
        private _slidingInterval;
        private _rangeSliderRect;
        private _isHorizontal;
        private _isBtnMousedown;
        private _needSpaceClick;
        private _hasButtons;
        private _movingEle;
        private _movingOffset;
        private _range;
        private _plotBox;
        private _startPt;
        _minPos: number;
        _maxPos: number;
        constructor(container: HTMLElement, needSpaceClick: boolean, hasButtons?: boolean, options?: any);
        /**
         * Gets or sets whether the increase/decrease buttons are displayed or not.
         */
        buttonsVisible: boolean;
        /**
         * Gets or sets the orientation of the range slider.
         */
        isHorizontal: boolean;
        /**
         * Gets or sets the visibility of the range slider.
         */
        isVisible: boolean;
        /**
         * Gets or sets the minimum range scale of the range slider.
         */
        minScale: number;
        /**
         * Gets or sets the maximum range scale of the range slider.
         */
        maxScale: number;
        /**
         * Gets or sets a value that determines whether the min/max elements
         * may be reversed by dragging one over the other.
         */
        seamless: boolean;
        /**
        * Occurs after the range changes.
        */
        readonly rangeChanged: Event<_RangeSlider, EventArgs>;
        /**
         * Raises the {@link rangeChanged} event.
         */
        onRangeChanged(e?: wijmo.EventArgs): void;
        /**
        * Occurs while the range is changing.
        */
        readonly rangeChanging: Event<_RangeSlider, EventArgs>;
        /**
         * Raises the {@link rangeChanging} event.
         */
        onRangeChanging(e?: wijmo.EventArgs): void;
        readonly _isSliding: boolean;
        readonly _handleWidth: number;
        private _createSlider;
        private _switchEvent;
        private _onSliderMousedown;
        private _onDocMouseMove;
        private _onMove;
        private _onDocMouseup;
        private _onRangeSpaceMousedown;
        private _onRangeMouseleave;
        private _onBtnMousedown;
        _refresh(rsRect?: any): void;
        private _updateElesPosition;
        private _refreshSlider;
        private _invalidate;
        private _changeRange;
        private _doSliding;
        private _setSlidingInterval;
        private _clearInterval;
        private _getRsRect;
    }
}
declare module wijmo.chart.interaction {
    /**
    * Specifies the orientation of the range selector.
    */
    enum Orientation {
        /** Horizontal, x-data range. */
        X = 0,
        /** Vertical, y-data range. */
        Y = 1
    }
    /**
     * The {@link RangeSelector} control displays a range selector that allows the user to
     * choose the range of data to display on the specified {@link FlexChart}.
     *
     * To use the {@link RangeSelector} control, specify the {@link FlexChart}
     * control to display the selected range of data.
     *
     * The {@link rangeChanged} event is fired when there is a change in min or max value.
     * For example:
     * <pre>
     *  var rangeSelector = new RangeSelector(chart);
     *  rangeSelector.rangeChanged.addHandler(function () {
     *     // perform related updates
     *     // e.g. modify displayed range of another chart
     *     update(rangeSelector.min, rangeSelector.max);
     *   });
     * </pre>
     */
    class RangeSelector {
        private _isVisible;
        private _min;
        private _max;
        private _orientation;
        private _seamless;
        private _minScale;
        private _maxScale;
        private _chart;
        private _rangeSelectorEle;
        private _rangeSlider;
        /**
         * Initializes a new instance of the {@link RangeSelector} class.
         *
         * @param chart The {@link FlexChart} that displays the selected range.
         * @param options A JavaScript object containing initialization data for the control.
         */
        constructor(chart: wijmo.chart.FlexChartCore, options?: any);
        /**
         * Gets or sets the visibility of the range selector.
         */
        isVisible: boolean;
        /**
         * Gets or sets the minimum value of the range.
         * If not set, the minimum is calculated automatically.
         */
        min: number;
        /**
         * Gets or sets the maximum value of the range.
         * If not set, the maximum is calculated automatically.
         */
        max: number;
        /**
         * Gets or sets the orientation of the range selector.
         */
        orientation: Orientation;
        /**
         * Gets or sets a value that determines whether the min/max elements
         * may be reversed by dragging one over the other.
         */
        seamless: boolean;
        /**
         * Gets or sets the minimum amount of data that can be selected,
         * as a percentage of the overall chart range.
         * This property must be set to a value between zero and one.
         */
        minScale: number;
        /**
         * Gets or sets the maximum amount of data that can be selected,
         * as a percentage of the total range.
         * This property must be set to a value between zero and one.
         */
        maxScale: number;
        /**
         * Removes the {@link RangeSelector} control from the chart.
         */
        remove(): void;
        /**
         * Occurs after the range changes.
         */
        rangeChanged: Event<RangeSelector, EventArgs>;
        /**
         * Raises the {@link rangeChanged} event.
         */
        onRangeChanged(e?: wijmo.EventArgs): void;
        private _createRangeSelector;
        private _switchEvent;
        private _refresh;
        private _adjustMinAndMax;
        private _updateMinAndMaxWithScale;
        private _changeRange;
        private _updateRange;
        private _getMinAndMax;
    }
}
declare module wijmo.chart.interaction {
}

declare module wijmo.chart.animation {
    function softFinancial(): typeof wijmo.chart.finance;
    function softRadar(): typeof wijmo.chart.radar;
}
declare module wijmo.chart.animation {
    /**
     * Specifies the rate of change of a parameter over time.
     */
    enum Easing {
        /** Simple linear tweening, no easing and no acceleration. */
        Linear = 0,
        /** Easing equation for a swing easing */
        Swing = 1,
        /** Easing equation for a quadratic easing in, accelerating from zero velocity. */
        EaseInQuad = 2,
        /** Easing equation for a quadratic easing out, decelerating to zero velocity. */
        EaseOutQuad = 3,
        /** Easing equation for a quadratic easing in and out, acceleration until halfway, then deceleration. */
        EaseInOutQuad = 4,
        /** Easing equation for a cubic easing in - accelerating from zero velocity. */
        EaseInCubic = 5,
        /** Easing equation for a cubic easing out - decelerating to zero velocity. */
        EaseOutCubic = 6,
        /** Easing equation for a cubic easing in and out - acceleration until halfway, then deceleration. */
        EaseInOutCubic = 7,
        /** Easing equation for a quartic easing in - accelerating from zero velocity. */
        EaseInQuart = 8,
        /** Easing equation for a quartic easing out - decelerating to zero velocity. */
        EaseOutQuart = 9,
        /** Easing equation for a quartic easing in and out - acceleration until halfway, then deceleration. */
        EaseInOutQuart = 10,
        /** Easing equation for a quintic easing in - accelerating from zero velocity. */
        EaseInQuint = 11,
        /** Easing equation for a quintic easing out - decelerating to zero velocity. */
        EaseOutQuint = 12,
        /** Easing equation for a quintic easing in and out - acceleration until halfway, then deceleration. */
        EaseInOutQuint = 13,
        /** Easing equation for a sinusoidal easing in - accelerating from zero velocity. */
        EaseInSine = 14,
        /** Easing equation for a sinusoidal easing out - decelerating to zero velocity.  */
        EaseOutSine = 15,
        /** Easing equation for a sinusoidal easing in and out - acceleration until halfway, then deceleration. */
        EaseInOutSine = 16,
        /** Easing equation for an exponential easing in - accelerating from zero velocity. */
        EaseInExpo = 17,
        /** Easing equation for an exponential easing out - decelerating to zero velocity. */
        EaseOutExpo = 18,
        /** Easing equation for an exponential easing in and out - acceleration until halfway, then deceleration. */
        EaseInOutExpo = 19,
        /** Easing equation for a circular easing in - accelerating from zero velocity. */
        EaseInCirc = 20,
        /** Easing equation for a circular easing out - decelerating to zero velocity. */
        EaseOutCirc = 21,
        /** Easing equation for a circular easing in and out - acceleration until halfway, then deceleration. */
        EaseInOutCirc = 22,
        /** Easing equation for a back easing in - accelerating from zero velocity. */
        EaseInBack = 23,
        /** Easing equation for a back easing out - decelerating to zero velocity. */
        EaseOutBack = 24,
        /** Easing equation for a back easing in and out - acceleration until halfway, then deceleration. */
        EaseInOutBack = 25,
        /** Easing equation for a bounce easing in - accelerating from zero velocity. */
        EaseInBounce = 26,
        /** Easing equation for a bounce easing out - decelerating to zero velocity. */
        EaseOutBounce = 27,
        /** Easing equation for a bounce easing in and out - acceleration until halfway, then deceleration. */
        EaseInOutBounce = 28,
        /** Easing equation for an elastic easing in - accelerating from zero velocity. */
        EaseInElastic = 29,
        /** Easing equation for an elastic easing out - decelerating to zero velocity. */
        EaseOutElastic = 30,
        /** Easing equation for an elastic easing in and out - acceleration until halfway, then deceleration. */
        EaseInOutElastic = 31
    }
    /**
     * Specifies the animation mode whether chart should animate one point at a time,
     * series by series, or all at once.
     */
    enum AnimationMode {
        /** All points and series are animated at once. */
        All = 0,
        /**
         * Animation is performed point by point. Multiple series are animated
         * simultaneously at the same time.
        */
        Point = 1,
        /**
         * Animation is performed series by series.
         * Entire series is animated at once, following the same animation as the "All"
         * option, but just one series at a time.
         */
        Series = 2
    }
    /**
     * Represents the animation for {@link FlexChart}, {@link FinancialChart} and {@link FlexPie}.
     *
     * The {@link ChartAnimation} provides built-in animation while loading and updating
     * the chart.
     * The animation can be configured by the user through several properties that
     * include duration, easing function, animation mode.
     */
    class ChartAnimation {
        private _chart;
        private _animation;
        private _cv;
        private _updateEventArgs;
        private _chartType;
        private _play;
        /**
         * Initializes a new instance of the {@link ChartAnimation} class.
         *
         * @param chart A chart to which the {@link ChartAnimation} is attached.
         * @param options A JavaScript object containing initialization data for
         * {@link ChartAnimation}.
         */
        constructor(chart: wijmo.chart.FlexChartBase, options?: any);
        private _initOptions;
        private _setCV;
        /**
         * Occurs after the animation ends.
         */
        readonly ended: Event<ChartAnimation, EventArgs>;
        /**
         * Gets or sets whether the plot points animate one at a time, series by series,
         * or all at once.
         * The whole animation is still completed within the duration.
         */
        animationMode: AnimationMode;
        /**
         * Gets or sets the easing function applied to the animation.
         */
        easing: Easing;
        /**
         * Gets or sets the length of entire animation in milliseconds.
         */
        duration: number;
        /**
         * Gets or sets a value indicating whether animation is applied to the axis.
         */
        axisAnimation: boolean;
        /**
         * Gets the animated chart instance.
         */
        readonly chart: wijmo.chart.FlexChartBase;
        private _playAnimation;
        /**
         * Performs the animation.
         */
        animate(): void;
    }
}
declare module wijmo.chart.animation {
}

declare module wijmo.chart.hierarchical {
    class HierarchicalUtil {
        static parseDataToHierarchical(data: any, binding: any, bindingName: any, childItemsPath: any): any[];
        private static parseGroupCV;
        private static parseGroups;
        private static parseItems;
        private static isFlatItem;
        private static convertFlatData;
        private static convertFlatToHierarchical;
        private static convertFlatItem;
        private static parseItem;
        static parseFlatItem(data: any, item: any, binding: any, bindingName: any): void;
    }
}
declare module wijmo.chart.hierarchical {
    /**
     * Specifies the treemap type.
     */
    enum TreeMapType {
        /** Shows squarified treemap. */
        Squarified = 0,
        /** Shows horizontal squarified treemap. */
        Horizontal = 1,
        /** Shows vertical squarified treemap. */
        Vertical = 2
    }
    /**
     * The {@link TreeMap} control displays hierarchical (tree-structured) data as a set
     * of nested rectangles. Each branch of the tree is given a rectangle, which is then
     * tiled with smaller rectangles representing sub-branches.
     * A leaf node's rectangle has an area proportional to a specified dimension of the data.
     * Often the leaf nodes are colored to show a separate dimension of the data.
     *
     * To use the {@link TreeMap} control, set the {@link TreeMap.itemsSource} property
     * to an array containing the data and use the {@link TreeMap.binding} and
     * {@link TreeMap.bindingName} properties to set the properties that contain
     * the item values and names.
     */
    class TreeMap extends wijmo.chart.FlexChartBase {
        static _CSS_ITEMDEPTH: string;
        private static _MARGIN;
        private _binding;
        private _bindingName;
        _values: number[];
        _labels: string[];
        _areas: any[];
        private _sum;
        private _keywords;
        private _processedData;
        private _depth;
        private _itemIndex;
        private _childItemsPath;
        private _processedItem;
        private _lbl;
        private _tmGroup;
        private _type;
        private _maxDepth;
        private _plotRect;
        private _tmItems;
        private _colRowLens;
        _currentItem: any;
        _defPalette: any;
        /**
         * Initializes a new instance of the {@link TreeMap} class.
         *
         * @param element The DOM element that hosts the control, or a CSS selector for the host element (e.g. '#theCtrl').
         * @param options A Javascript object containing initialization data for the control.
         */
        constructor(element: any, options?: any);
        _rollUp(): void;
        private _toogleTooltip;
        /**
         * The selectionMode doesn't work in TreeMap control.
         */
        selectionMode: wijmo.chart.SelectionMode;
        readonly _treeMapItems: any[];
        /**
         * Gets the chart's {@link Tooltip}.
         */
        readonly tooltip: wijmo.chart.ChartTooltip;
        /**
        * Gets or sets the name of the property of the data item that contains the chart value.
        *
        * The binding property is used to calculate the size of the node as compared to other node values.
        * The property should contain numeric data.
        */
        binding: string;
        /**
         * Gets or sets the {@link TreeMapType} of the treemap.
         */
        type: TreeMapType;
        /**
         * Gets or sets the name of the property containing name of the data item.
         * The bindingName property is used to show name of the node. It should be an array or a string.
         */
        bindingName: any;
        /**
         * Gets or sets the {@link DataLabel} of the treemap.
         */
        dataLabel: wijmo.chart.DataLabel;
        /**
         * Gets or sets the name of the property (or properties) used to generate
         * child items in hierarchical data.
         *
         * Set this property to a string to specify the name of the property that
         * contains an item's child items (e.g. <code>'items'</code>).
         *
         * Set this property to an array containing the names of the properties
         * that contain child items at each level, when the items are child items
         * at different levels with different names
         * (e.g. <code>[ 'accounts', 'checks', 'earnings' ]</code>).
         */
        childItemsPath: any;
        /**
         * Gets or sets the maximum number of node levels to show in the current view.
         * These levels are flattened into the current plane.
         * If a treemap has more levels than this value, user has to move up and down.
         */
        maxDepth: number;
        /**
         * Gets or sets an array of default colors to be used in a treemap.
         *
         * The array contains strings that represent CSS colors. For example:
         * <pre>
         * // use colors specified by name
         * chart.palette = ['red', 'green', 'blue'];
         * // or use colors specified as rgba-values
         * chart.palette = [
         *   'rgba(255,0,0,1)',
         *   'rgba(255,0,0,0.8)',
         *   'rgba(255,0,0,0.6)',
         *   'rgba(255,0,0,0.4)'];
         * </pre>
         *
         * Or contains titleColor, maxColor, minColor separately. For example:
         * <pre>
         * chart.palette = [{
         *      titleColor: '#00277d',
         *      maxColor: 'rgba(0,39,125,0.7)',
         *      minColor: 'rgba(168,187,230,0.7)'
         *  }, {
         *      titleColor: '#7d1f00',
         *      maxColor: 'rgba(125,21,0,0.7)',
         *      minColor: 'rgba(230,183,168,0.7)'
         *  }, {
         *      titleColor: '#007d27',
         *      maxColor: 'rgba(0,125,39,0.7)',
         *      minColor: 'rgba(168,230,188,0.7)'
         *  }];
         * </pre>
         */
        palette: string[];
        _initData(): void;
        _performBind(): void;
        private _sortData;
        private _getTMItemsAndLabelsAndValues;
        private _calculateColorForItems;
        private _getBindData;
        private _calculateValueAndDepth;
        _prepareRender(): void;
        _renderChart(engine: wijmo.chart.IRenderEngine, rect: wijmo.Rect, applyElement: boolean): void;
        private _renderTreeMap;
        private _resetItemRects;
        private _calculateItemRects;
        private _renderHierarchicalTreeMapItems;
        _renderLabels(engine: wijmo.chart.IRenderEngine): void;
        private _renderLabelAndBorder;
        private _renderText;
        private _cutText;
        private _measureLegendItem;
        _getDesiredLegendSize(engine: wijmo.chart.IRenderEngine, isVertical: boolean, width: number, height: number): wijmo.Size;
        _renderLegend(engine: wijmo.chart.IRenderEngine, pos: wijmo.Point, areas: any[], isVertical: boolean, width: number, height: number): void;
        _drawLegendItem(engine: wijmo.chart.IRenderEngine, rect: wijmo.Rect, i: number, name: string): void;
        private _getLabelContent;
        /**
            * Gets a {@link HitTestInfo} object with information about the specified point.
            *
            * @param pt The point to investigate, in window coordinates.
            * @param y Y coordinate of the point (if the first parameter is a number).
            * @return A {@link HitTestInfo} object containing information about the point.
            */
        hitTest(pt: any, y?: number): wijmo.chart.HitTestInfo;
        _getHitTestItem(index: number): any;
        _getHitTestValue(index: number): number;
        _getHitTestLabel(index: number): string;
    }
}
declare module wijmo.chart.hierarchical {
    /**
     * Sunburst chart control.
     */
    class Sunburst extends wijmo.chart.FlexPie {
        private _bindName;
        private _processedData;
        private _legendLabels;
        private _level;
        private _sliceIndex;
        private _parentRef;
        private _childItemsPath;
        private _processedItem;
        constructor(element: any, options?: any);
        /**
         * Gets or sets the name of the property containing name of the data item;
         * it should be an array or a string.
         */
        bindingName: any;
        /**
         * Gets or sets the name of the property (or properties) used to generate
         * child items in hierarchical data.
         *
         * Set this property to a string to specify the name of the property that
         * contains an item's child items (e.g. <code>'items'</code>).
         *
         * Set this property to an array containing the names of the properties
         * that contain child items at each level, when the items are child items
         * at different levels with different names
         * (e.g. <code>[ 'accounts', 'checks', 'earnings' ]</code>).
         */
        childItemsPath: any;
        _initData(): void;
        _performBind(): void;
        private _calculateValueAndLevel;
        _renderPie(engine: wijmo.chart.IRenderEngine, i: number, radius: number, innerRadius: number, startAngle: number, offset: number): void;
        _renderHierarchicalSlices(engine: any, cx: any, cy: any, values: any, sum: any, radius: any, innerRadius: any, startAngle: any, totalSweep: any, offset: any, level: any): void;
        _getLabelsForLegend(): string[];
        _highlightCurrent(): void;
        hitTest(pt: any, y?: number): wijmo.chart.HitTestInfo;
        _getSelectedItemOffset(index: any, angle: any): {
            x: number;
            y: number;
        };
        private _getSelectedParentIndex;
    }
}
declare module wijmo.chart.hierarchical {
}

declare module wijmo.chart.radar {
    /**
     * Represents a series of data points to display in the chart.
     *
     * The {@link FlexRadarSeries} class supports all basic chart types. You may define
     * a different chart type on each {@link FlexRadarSeries} object that you add to the
     * {@link FlexRadar} series collection. This overrides the {@link chartType}
     * property set on the chart that is the default for all {@link FlexRadarSeries} objects
     * in its collection.
     */
    class FlexRadarSeries extends wijmo.chart.SeriesBase {
        private _finChartType;
        /**
         * Gets or sets the chart type for a specific series, overriding the chart type
         * set on the overall chart. Please note that ColumnVolume, EquiVolume,
         * CandleVolume and ArmsCandleVolume chart types are not supported and should be
         * set on the {@link FinancialChart}.
         */
        chartType: RadarChartType;
        _getChartType(): wijmo.chart.ChartType;
    }
}
declare module wijmo.chart.radar {
    /**
     * Line/scatter radar chart plotter.
     */
    class _RadarLinePlotter extends wijmo.chart._LinePlotter {
        isArea: boolean;
        _getLabelPoint(series: any, dataPoint: wijmo.chart._DataPoint): wijmo.Point;
        plotSeries(engine: wijmo.chart.IRenderEngine, ax: wijmo.chart._IAxis, ay: wijmo.chart._IAxis, series: wijmo.chart._ISeries, palette: wijmo.chart._IPalette, iser: number, nser: number): void;
    }
}
declare module wijmo.chart.radar {
    /**
     * Column(Rose) radar chart plotter.
     */
    class _RadarBarPlotter extends wijmo.chart._BarPlotter {
        adjustLimits(dataInfo: wijmo.chart._DataInfo, plotRect: wijmo.Rect): wijmo.Rect;
        _getLabelPoint(series: any, dataPoint: wijmo.chart._DataPoint): wijmo.Point;
        plotSeries(engine: wijmo.chart.IRenderEngine, ax: wijmo.chart._IAxis, ay: wijmo.chart._IAxis, series: wijmo.chart._ISeries, palette: wijmo.chart._IPalette, iser: number, nser: number): void;
    }
}
declare module wijmo.chart.radar {
    /**
     * Specifies the type of radar chart.
     */
    enum RadarChartType {
        /** Shows vertical bars and allows you to compare values of items across categories. */
        Column = 0,
        /** Shows patterns within the data using X and Y coordinates. */
        Scatter = 1,
        /** Shows trends over a period of time or across categories. */
        Line = 2,
        /** Shows line chart with a symbol on each data point. */
        LineSymbols = 3,
        /** Shows line chart with the area below the line filled with color. */
        Area = 4
    }
    /**
     * radar chart control.
     */
    class FlexRadar extends wijmo.chart.FlexChartCore {
        private _chartType;
        private _startAngle;
        private _totalAngle;
        private _reversed;
        _center: wijmo.Point;
        _radius: number;
        _angles: number[];
        _isPolar: boolean;
        _areas: any[];
        private __radarLinePlotter;
        private __radarColumnPlotter;
        /**
         * Initializes a new instance of the {@link FlexRadar} class.
         *
         * @param element The DOM element that hosts the control, or a selector for the
         * host element (e.g. '#theCtrl').
         * @param options A JavaScript object containing initialization data for the
         * control.
         */
        constructor(element: any, options?: any);
        private readonly _radarLinePlotter;
        private readonly _radarColumnPlotter;
        _initAxes(): void;
        _layout(rect: wijmo.Rect, size: wijmo.Size, engine: wijmo.chart.IRenderEngine): void;
        /**
         * Gets or sets the type of radar chart to be created.
         */
        chartType: RadarChartType;
        /**
         * Gets or sets the starting angle for the radar, in degrees.
         *
         * Angles are measured clockwise, starting at the 12 o'clock position.
         */
        startAngle: number;
        /**
         * Gets or sets the total angle for the radar, in degrees.  Its default value is 360.
         * The value must be greater than 0, or less than or equal to 360.
         */
        totalAngle: number;
        /**
         * Gets or sets a value that determines whether angles are reversed
         * (counter-clockwise).
         *
         * The default value is false, which causes angles to be measured in
         * the clockwise direction.
         */
        reversed: boolean;
        /**
         * Gets or sets a value that determines whether and how the series objects are stacked.
         */
        stacking: wijmo.chart.Stacking;
        _getChartType(): wijmo.chart.ChartType;
        _getPlotter(series: FlexRadarSeries): wijmo.chart._IPlotter;
        _convertPoint(radius: any, angle: any): Point;
        _createSeries(): wijmo.chart.SeriesBase;
        _clearCachedValues(): void;
        _performBind(): void;
        _prepareRender(): void;
    }
}
declare module wijmo.chart.radar {
    /**
     * Represents an axis in the radar chart.
     */
    class FlexRadarAxis extends wijmo.chart.Axis {
        private _points;
        private _axisLabels;
        _height: number;
        private __actualMin;
        private __actualMax;
        _render(engine: wijmo.chart.IRenderEngine): void;
        _getHeight(engine: wijmo.chart.IRenderEngine, maxw: number): number;
        _getActualRange(): number;
        _updateActualLimits(dataType: wijmo.DataType, dataMin: number, dataMax: number, labels?: string[], values?: number[]): void;
        _updateActualLimitsByChartType(labels: any, min: any, max: any): {
            min: any;
            max: any;
        };
        _isOverlapped(engine: wijmo.chart.IRenderEngine, w: number, lblClass: string, axisType: wijmo.chart.AxisType): boolean;
        /**
         * Converts the specified value from data to pixel coordinates.
         *
         * @param val The data value to convert.
         * @param maxValue The max value of the data, it's optional.
         * @param minValue The min value of the data, it's optional.
         */
        convert(val: number, maxValue?: number, minValue?: number): number;
        _renderLineAndTitle(engine: any): void;
        _renderPolygon(engine: any, r: any, cls: any): void;
        _renderMinors(engine: wijmo.chart.IRenderEngine, ticks: number[], isVert: boolean, isNear: boolean): void;
        private _drawMinorTickLength;
        _renderLabelsAndTicks(engine: any, index: any, val: any, sval: any, labelAngle: any, tickMarks: any, showLabel: any, t1: any, t2: any): boolean;
        private _renderXGridLine;
        private _renderXTick;
        private _renderYGridLine;
        private _getXLabelVAlign;
        private _getXLabelAlign;
        _createTimeLabels(start: number, len: number, vals: number[], lbls: string[]): void;
        _niceNumber(x: number, exp: number, round: boolean): number;
    }
}
declare module wijmo.chart.radar {
}

declare module wijmo.gauge {
    /**
     * Defines ranges to be used with {@link Gauge} controls.
     *
     * {@link Range} objects have {@link min} and {@link max} properties that
     * define the range's domain, as well as {@link color} and {@link thickness}
     * properties that define the range's appearance.
     *
     * Every {@link Gauge} control has at least two ranges:
     * the 'face' defines the minimum and maximum values for the gauge, and
     * the 'pointer' displays the gauge's current value.
     *
     * In addition to the built-in ranges, gauges may have additional
     * ranges used to display regions of significance (for example,
     * low, medium, and high values).
     */
    class Range {
        static _ctr: number;
        private _min;
        private _max;
        private _thickness;
        private _color;
        private _name;
        /**
         * Initializes a new instance of the {@link Range} class.
         *
         * @param options Initialization options for the {@link Range} or a string
         * containing the {@link Range} name.
         */
        constructor(options?: any);
        /**
         * Gets or sets the minimum value for this range.
         */
        min: number;
        /**
         * Gets or sets the maximum value for this range.
         */
        max: number;
        /**
         * Gets or sets the color used to display this range.
         */
        color: string;
        /**
         * Gets or sets the thickness of this range as a percentage of
         * the parent gauge's thickness.
         */
        thickness: number;
        /**
         * Gets or sets the name of this {@link Range}.
         */
        name: string;
        /**
         * Occurs when the value of a property in this {@link Range} changes.
         */
        readonly propertyChanged: Event<Range, PropertyChangedEventArgs>;
        /**
         * Raises the {@link propertyChanged} event.
         *
         * @param e {@link PropertyChangedEventArgs} that contains the property
         * name, old, and new values.
         */
        onPropertyChanged(e: wijmo.PropertyChangedEventArgs): void;
        _setProp(name: string, value: any): void;
    }
}
declare module wijmo.gauge {
    /**
     * Specifies which values to display as text.
     */
    enum ShowText {
        /** Do not show any text in the gauge. */
        None = 0,
        /** Show the gauge's {@link Gauge.value} as text. */
        Value = 1,
        /** Show the gauge's {@link Gauge.min} and {@link Gauge.max} values as text. */
        MinMax = 2,
        /** Show the gauge's {@link Gauge.value}, {@link Gauge.min}, and {@link Gauge.max} as text. */
        All = 3
    }
    /**
     * Represents a method that gets customized text to display
     * in a {@link Gauge} control. */
    interface IGetGaugeText {
        /**
         * @param gauge Gauge that contains the text.
         * @param part Name of the gauge part (e.g. 'min', 'max', 'value').
         * @param value Value being formatted.
         * @param text Default text to show.
         * @returns Text to be shown for the given part.
         */
        (gauge: Gauge, part: string, value: number, text: string): string;
    }
    /**
     * Base class for the Wijmo Gauge controls (abstract).
     */
    class Gauge extends wijmo.Control {
        static _SVGNS: string;
        static _ctr: number;
        private _ranges;
        private _rngElements;
        private _format;
        private _getText;
        private _showRanges;
        private _stackRanges;
        private _shadow;
        private _animated;
        private _animInterval;
        private _readOnly;
        private _step;
        private _showText;
        private _showTicks;
        private _showTickText;
        private _tickSpacing;
        private _thumbSize;
        private _filterID;
        private _rangesDirty;
        private _origin;
        private _dragging;
        protected _thickness: number;
        protected _initialized: boolean;
        protected _animColor: string;
        protected _face: Range;
        protected _pointer: Range;
        protected _dSvg: HTMLDivElement;
        protected _svg: SVGSVGElement;
        protected _gFace: SVGGElement;
        protected _gRanges: SVGGElement;
        protected _gPointer: SVGGElement;
        protected _gCover: SVGGElement;
        protected _pFace: SVGPathElement;
        protected _pPointer: SVGPathElement;
        protected _pTicks: SVGPathElement;
        protected _gTicks: SVGGElement;
        protected _gNeedle: SVGGElement;
        protected _filter: SVGFilterElement;
        protected _cValue: SVGCircleElement;
        protected _tValue: SVGTextElement;
        protected _tMin: SVGTextElement;
        protected _tMax: SVGTextElement;
        /**
         * Gets or sets the template used to instantiate {@link Gauge} controls.
         */
        static controlTemplate: string;
        /**
         * Initializes a new instance of the {@link Gauge} class.
         *
         * @param element The DOM element that hosts the control, or a CSS selector for the host element (e.g. '#theCtrl').
         * @param options The JavaScript object containing initialization data for the control.
         */
        constructor(element: any, options?: any);
        /**
         * Gets or sets the value displayed on the gauge.
         */
        value: number;
        /**
         * Gets or sets the minimum value that can be displayed on the gauge.
         *
         * For details about using the {@link min} and {@link max} properties, please see the
         * <a href="/wijmo/docs/Topics/Input/Using-Min-Max">Using the min and max properties</a> topic.
         */
        min: number;
        /**
         * Gets or sets the maximum value that can be displayed on the gauge.
         *
         * For details about using the {@link min} and {@link max} properties, please see the
         * <a href="/wijmo/docs/Topics/Input/Using-Min-Max">Using the min and max properties</a> topic.
         */
        max: number;
        /**
         * Gets or sets the starting point used for painting the range.
         *
         * By default, this property is set to null, which causes the value range
         * to start at the gauge's minimum value, or zero if the minimum is less
         * than zero.
         */
        origin: number;
        /**
         * Gets or sets a value that indicates whether the user can edit the value
         * using the mouse and keyboard.
         *
         * The default value for this property is <b>true</b>.
         */
        isReadOnly: boolean;
        /**
         * Gets or sets the amount to add to or subtract from the {@link value} property
         * when the user presses the arrow keys or moves the mouse wheel.
         */
        step: number;
        /**
         * Gets or sets the format string used to display gauge values as text.
         */
        format: string;
        /**
         * Gets or sets a callback that returns customized strings used to
         * display gauge values.
         *
         * Use this property if you want to customize the strings shown on
         * the gauge in cases where the {@link format} property is not enough.
         *
         * If provided, the callback should be a function as that takes as
         * parameters the gauge, the part name, the value, and the formatted
         * value. The callback should return the string to be displayed on
         * the gauge.
         *
         * For example:
         *
         * <pre>// callback to convert values into strings
         * gauge.getText = function (gauge, part, value, text) {
         *   switch (part) {
         *     case 'value':
         *       if (value &lt;= 10) return 'Empty!';
         *       if (value &lt;= 25) return 'Low...';
         *       if (value &lt;= 95) return 'Good';
         *       return 'Full';
         *     case 'min':
         *       return 'EMPTY';
         *     case 'max':
         *       return 'FULL';
         *   }
         *   return text;
         * }</pre>
         */
        getText: IGetGaugeText;
        /**
         * Gets or sets the thickness of the gauge, on a scale between zero and one.
         *
         * Setting the thickness to one causes the gauge to fill as much of the
         * control area as possible. Smaller values create thinner gauges.
         */
        thickness: number;
        /**
         * Gets or sets the {@link Range} used to represent the gauge's overall geometry
         * and appearance.
         */
        face: Range;
        /**
         * Gets or sets the {@link Range} used to represent the gauge's current value.
         */
        pointer: Range;
        /**
         * Gets or sets the {@link ShowText} values to display as text in the gauge.
         *
         * The default value for this property is <b>ShowText.All</b> for {@link RadialGauge}
         * controls, and to <b>ShowText.None</b> for {@link LinearGauge} controls.
         */
        showText: ShowText;
        /**
         * Gets or sets a property that determines whether the gauge should
         * display tickmarks at each {@link step} (or {@link tickSpacing})
         * value.
         *
         * The tickmarks can be formatted in CSS using the <b>wj-gauge</b> and
         * <b>wj-ticks</b> class names. For example:
         *
         * <pre>.wj-gauge .wj-ticks {
         *     stroke-width: 2px;
         *     stroke: white;
         * }</pre>
         *
         * The default value for this property is <b>false</b>.
         */
        showTicks: boolean;
        /**
         * Gets or sets a property that determines whether the gauge should
         * display the text value of each tick mark.
         *
         * You can use CSS to style the tickmark text:
         *
         * <pre>
         * .wj-gauge .wj-tick-text text {
         *     opacity: 1;
         *     font-family: Courier;
         *     font-size: 8pt;
         *     fill: purple;
         * }
         * </pre>
         *
         * See also the {@link showTicks} and {@link tickSpacing} properties.
         *
         * The default value for this property is <b>false</b>.
         */
        showTickText: boolean;
        /**
         * Gets or sets the spacing between tickmarks.
         *
         * Set the {@link showTicks} property to true if you want the
         * gauge to show tickmarks along its face. By default, the
         * interval between tickmarks is defined by the {@link step}
         * property.
         *
         * Use the {@link tickSpacing} property to override the default
         * and use a spacing that is different from the {@link step}
         * value. Set the {@link tickSpacing} property to null to revert
         * to the default behavior.
         */
        tickSpacing: number;
        /**
         * Gets or sets the size of the element that shows the gauge's current value,
         * in pixels.
         */
        thumbSize: number;
        /**
         * Gets or sets a value that indicates whether the gauge displays the ranges
         * contained in  the {@link ranges} property.
         *
         * If this property is set to false, the ranges contained in the {@link ranges}
         * property are not displayed in the gauge. Instead, they are used to
         * interpolate the color of the {@link pointer} range while animating value changes.
         *
         * The default value for this property is <b>true</b>.
         */
        showRanges: boolean;
        /**
         * Gets or sets a value that determines whether the ranges contained in
         * the {@link ranges} collection should be stacked within the gauge.
         *
         * By default, {@link stackRanges} is set to false, and the ranges in the
         * {@link ranges} collection are displayed with the same thickness as the
         * gauge's face.
         *
         * Setting {@link stackRanges} to true causes the ranges to become narrower,
         * and to be displayed side-by-side.
         */
        stackRanges: boolean;
        /**
         * Gets or sets a value that indicates whether the gauge displays
         * a shadow effect.
         *
         * The default value for this property is <b>true</b>.
         */
        hasShadow: boolean;
        /**
         * Gets or sets a value that determines whether the {@link Gauge}
         * should use animation to show value changes.
         *
         * The default value for this property is <b>true</b>.
         */
        isAnimated: boolean;
        /**
         * Gets the collection of ranges in this gauge.
         */
        readonly ranges: wijmo.collections.ObservableArray;
        /**
         * Occurs when the value of the {@link value} property changes.
         */
        readonly valueChanged: Event<Gauge, EventArgs>;
        /**
         * Raises the {@link valueChanged} event.
         */
        onValueChanged(e?: wijmo.EventArgs): void;
        /**
         * Refreshes the control.
         *
         * @param fullUpdate Indicates whether to update the control layout as well as the content.
         */
        refresh(fullUpdate?: boolean): void;
        /**
         * Gets a number that corresponds to the value of the gauge at a given point.
         *
         * For example:
         *
         * <pre>
         * // hit test a point when the user clicks on the gauge
         * gauge.hostElement.addEventListener('click', function (e) {
         *   var ht = gauge.hitTest(e.pageX, e.pageY);
         *   if (ht != null) {
         *     console.log('you clicked the gauge at value ' + ht.toString());
         *   }
         * });
         * </pre>
         *
         * @param pt The point to investigate, in window coordinates, or a MouseEvent object,
         * or the x coordinate of the point.
         * @param y The Y coordinate of the point (if the first parameter is a number).
         * @return Value of the gauge at the point, or null if the point is not on the gauge's face.
         */
        hitTest(pt: any, y?: number): number;
        static _getBBox(e: any): any;
        protected _getFilterUrl(): string;
        protected _getRangeElement(rng: Range): SVGPathElement;
        protected _rangeChanged(rng: Range, e: wijmo.PropertyChangedEventArgs): void;
        protected _createElement(tag: string, parent: SVGElement, cls?: string): Element;
        protected _centerText(e: SVGTextElement, value: number, center: wijmo.Point): void;
        protected _copy(key: string, value: any): boolean;
        protected _getPercent: (value: any) => number;
        protected _showElement(e: SVGElement, show: boolean): void;
        protected _updateRange(rng: Range, value?: number): void;
        protected _getPointerColor(value: number): string;
        protected _keydown(e: KeyboardEvent): void;
        protected _getKey(key: number): number;
        protected _applyMouseValue(e: any, instant?: boolean): boolean;
        protected _updateRangeElement(e: SVGPathElement, rng: Range, value: number): void;
        protected _updateText(): void;
        protected _updateTicks(): void;
        protected _getValueFromPoint(pt: wijmo.Point): any;
        protected _fix(n: any): string;
        protected _updateAria(): void;
    }
}
declare module wijmo.gauge {
    /**
     * Specifies a pre-defined shape for the gauge's needle element.
     */
    enum NeedleShape {
        /** No pre-defined shape. */
        None = 0,
        /** The needle element has a triangular shape. */
        Triangle = 1,
        /** The needle element has a diamond shape. */
        Diamond = 2,
        /** The needle element has an hexagonal shape. */
        Hexagon = 3,
        /** The needle element has a rectangular shape. */
        Rectangle = 4,
        /** The needle element has an arrow shape. */
        Arrow = 5,
        /** The needle element has a wide arrow shape. */
        WideArrow = 6,
        /** The needle element has a pointer shape. */
        Pointer = 7,
        /** The needle element has a wide pointer shape. */
        WidePointer = 8,
        /** The needle element has a triangular shape with an offset. */
        Outer = 9
    }
    /**
     * Specifies the length of the needle element with respect to the pointer range.
     */
    enum NeedleLength {
        /** The needle element extends to the outer radius of the pointer range. */
        Outer = 0,
        /** The needle element extends to the mid ponit between the inner and outer radii of the pointer range. */
        Middle = 1,
        /** The needle element extends to the inner radius of the pointer range. */
        Inner = 2
    }
    /**
     * The {@link RadialGauge} displays a circular scale with an indicator
     * that represents a single value and optional ranges to represent
     * reference values.
     *
     * If you set the gauge's {@link RadialGauge.isReadOnly} property to
     * false, then users will be able to edit the value by clicking on
     * the gauge.
     *
     * {@sample Gauge/RadialGauge Example}
     */
    class RadialGauge extends Gauge {
        private _startAngle;
        private _sweepAngle;
        private _autoScale;
        private _ndlElement;
        private _ndlShape;
        private _ndlLength;
        private _rcSvg;
        private _ctmInv;
        private _ptSvg;
        /**
         * Initializes a new instance of the {@link RadialGauge} class.
         *
         * @param element The DOM element that hosts the control, or a CSS selector for the host element (e.g. '#theCtrl').
         * @param options The JavaScript object containing initialization data for the control.
         */
        constructor(element: any, options?: any);
        /**
         * Gets or sets the starting angle for the gauge.
         *
         * Angles are measured in degrees, clockwise, starting from the
         * 9 o'clock position.
         *
         * The default value for this property is <b>0</b>.
         */
        startAngle: number;
        /**
         * Gets or sets the sweep angle for the gauge.
         *
         * Angles are measured in degrees, clockwise,
         * starting from the 9 o'clock position.
         *
         * The default value for this property is <b>180</b>.
         */
        sweepAngle: number;
        /**
         * Gets or sets a value that indicates whether the gauge automatically
         * scales to fill the host element.
         *
         * The default value for this property is <b>true</b>.
         */
        autoScale: boolean;
        /**
         * Gets the bounds of the gauge's face element.
         *
         * This property is useful for positioning custom SVG elements
         * on the gauge.
         *
         * {@fiddle mbno06j3}
         */
        readonly faceBounds: wijmo.Rect;
        readonly clientSize: wijmo.Size;
        /**
         * Gets or sets an SVGElement to be used as a needle for the Gauge.
         *
         * If provided, the needle element should extend from 0 to 100
         * units in the X direction, and should typically be symmetrical
         * about the Y axis.
         *
         * When this property is set, the needle element becomes part of
         * the gauge DOM and is removed from its original container.
         * To use the same element in several gauges, use the clone method
         * to create copies of the needle element.
         */
        needleElement: SVGElement;
        /**
         * Gets or sets a value that determines the shape of the gauge's
         * needle element.
         *
         * Use this property to select one of the pre-defined needle shapes.
         * The pre-defined shapes are created using the
         * {@link createNeedleElement} method.
         *
         * You can also create custom needle elements by setting the
         * {@link needleElement} property to custom elements created using
         * the {@link createNeedleElement} method with parameters of your
         * choice, or to custom SVG group elements created using whatever
         * method you prefer.
         *
         * You can style the needle using CSS. For example:
         *
         * <pre>
         * .wj-gauge .wj-needle {
         *     fill: orangered;
         *     stroke: orangered;
         * }
         * .wj-gauge .wj-needle .wj-inner-needle-cap {
         *     fill: white;
         * }
         * </pre>
         *
         * The default value for this property is <b>NeedleShape.None</b>.
         */
        needleShape: NeedleShape;
        /**
         * Gets or sets a value that determines the length of the gauge's
         * {@link needleElement} with respect to the pointer range.
         *
         * The default value for this property is <b>NeedleLength.Middle</b>.
         */
        needleLength: NeedleLength;
        /**
         * Creates an SVG element to be used as a gauge needle.
         *
         * @param points Array of objects with "x" and "y" values that define
         * the needle shape. The "x" values should range from 0 (gauge center)
         * to 100 (gauge radius). The "y" values define the needle width, and
         * typically range from 0 to 20. Each "y" value is used twice: from
         * left to right to define the extent of the needle above the needle
         * axis, and from right to left, with sign reversed, to define the
         * extent of the needle below the axis.
         * @param capRadius Optional value that defines the radius of the
         * cap element, a circle centered at the origin.
         * @param innerCapRadius Optional value that defines the radius of
         * a circle painted above the cap element.
         *
         * The {@link createNeedleElement} method provides an easy and concise
         * way to create custom needle shapes for use with the
         * {@link needleElement} property.
         *
         * For example, the code below shows how the {@link createNeedleElement}
         * method is used internally by the {@link RadialGauge} to build some of
         * the common needle shapes defined by the {@link NeedleShape} enumeration:
         *
         * <pre>
         * var needle = null;
         * switch (value) {
         *     case NeedleShape.Triangle:
         *         needle = RadialGauge.createNeedleElement([
         *             { x: -10, y: 10 }, { x: 100, y: 0 }
         *         ]);
         *         break;
         *     case NeedleShape.Diamond:
         *         needle = RadialGauge.createNeedleElement([
         *             { x: -20, y: 0 }, { x: 0, y: 10 }, { x: 100, y: 0 }
         *         ]);
         *         break;
         *     case NeedleShape.Drop:
         *         needle = RadialGauge.createNeedleElement([
         *             { x: 0, y: 20 }, { x: 100, y: 0 }
         *         ], 20, 10);
         *         break;
         *     case NeedleShape.Outer:
         *         needle = RadialGauge.createNeedleElement([
         *           { x: 60, y: 20 }, { x: 100, y: 0 }
         *         ]);
         *         break;
         *     }
         * </pre>
         */
        static createNeedleElement(points: any[], capRadius?: number, innerCapRadius?: number): Element;
        /**
         * Refreshes the control.
         *
         * @param fullUpdate Indicates whether to update the control layout as well as the content.
         */
        refresh(fullUpdate?: boolean): void;
        _updateRangeElement(e: SVGPathElement, rng: Range, value: number): void;
        _updateText(): void;
        _updateTicks(): void;
        _updateSegment(path: SVGPathElement, ctr: wijmo.Point, rOut: number, rIn: number, start: number, sweep: number): void;
        _getPoint(ctr: wijmo.Point, angle: number, radius: number): wijmo.Point;
        _getValueFromPoint(pt: wijmo.Point): number;
        _getDist2(p1: wijmo.Point, p2: wijmo.Point): number;
    }
}
declare module wijmo.gauge {
    /**
     * Represents the direction in which the pointer of a {@link LinearGauge}
     * increases.
     */
    enum GaugeDirection {
        /** Gauge value increases from left to right. */
        Right = 0,
        /** Gauge value increases from right to left. */
        Left = 1,
        /** Gauge value increases from bottom to top. */
        Up = 2,
        /** Gauge value increases from top to bottom. */
        Down = 3
    }
    /**
     * The {@link LinearGauge} displays a linear scale with an indicator
     * that represents a single value and optional ranges to represent
     * reference values.
     *
     * If you set the gauge's {@link LinearGauge.isReadOnly} property to
     * false, then users will be able to edit the value by clicking on
     * the gauge.
     *
     * {@sample Gauge/LinearGauge Example}
     */
    class LinearGauge extends Gauge {
        private _direction;
        /**
         * Initializes a new instance of the {@link LinearGauge} class.
         *
         * @param element The DOM element that hosts the control, or a CSS selector for the host element (e.g. '#theCtrl').
         * @param options JavaScript object containing initialization data for the control.
         */
        constructor(element: any, options?: any);
        /**
         * Gets or sets the direction in which the gauge is filled.
         *
         * The default value for this property is <b>GaugeDirection.Right</b>.
         */
        direction: GaugeDirection;
        /**
         * Gets the bounds of the gauge's face element.
         *
         * This property is useful for positioning custom SVG elements
         * on the gauge.
         *
         * {@fiddle tha1vms3}
         *
         */
        readonly faceBounds: wijmo.Rect;
        _updateRangeElement(e: SVGPathElement, rng: Range, value: number): void;
        _updateText(): void;
        _updateTicks(): void;
        _updateSegment(path: SVGPathElement, rc: wijmo.Rect): void;
        _setText(e: SVGTextElement, value: number, rc: wijmo.Rect, pos: string): void;
        _getRangeRect(rng: Range, value?: number): wijmo.Rect;
        _getValueFromPoint(pt: wijmo.Point): number;
        _getDirection(): GaugeDirection;
        _getKey(key: number): number;
    }
}
declare module wijmo.gauge {
    /**
     * The {@link BulletGraph} is a type of linear gauge designed specifically for use
     * in dashboards. It displays a single key measure along with a comparative
     * measure and qualitative ranges to instantly signal whether the measure is
     * good, bad, or in some other state.
     *
     * Bullet Graphs were created and popularized by dashboard design expert
     * Stephen Few. You can find more details and examples on
     * <a href="https://en.wikipedia.org/wiki/Bullet_graph">Wikipedia</a>.
     *
     * {@sample Gauge/BulletGraph Example}
     */
    class BulletGraph extends LinearGauge {
        _rngTarget: Range;
        _rngGood: Range;
        _rngBad: Range;
        /**
         * Initializes a new instance of the {@link BulletGraph} class.
         *
         * @param element The DOM element that hosts the control, or a CSS selector for the host element (e.g. '#theCtrl').
         * @param options The JavaScript object containing initialization data for the control.
         */
        constructor(element: any, options?: any);
        /**
         * Gets or sets the target value for the measure.
         */
        target: number;
        /**
         * Gets or sets a reference value considered good for the measure.
         */
        good: number;
        /**
         * Gets or sets a reference value considered bad for the measure.
         */
        bad: number;
        _getRangeRect(rng: Range, value?: number): wijmo.Rect;
    }
}
declare module wijmo.gauge {
}

declare module wijmo.xlsx {
    /**
     * Represents an Excel workbook.
     */
    class Workbook implements IWorkbook {
        /**
         * Gets or sets the name of application that generated the file that appears in the file properties.
         */
        application: string;
        /**
         * Gets or sets the name of company that generated the file that appears in the file properties.
         */
        company: string;
        /**
         * Gets or sets the creator of the xlsx file.
         */
        creator: string;
        /**
         * Gets or sets the creation time of the xlsx file.
         */
        created: Date;
        /**
         * Gets or sets the last modifier of the xlsx file.
         */
        lastModifiedBy: string;
        /**
         * Gets or sets the last modified time of the xlsx file.
         */
        modified: Date;
        /**
         * Gets or sets the index of the active sheet in the xlsx file.
         */
        activeWorksheet: number;
        private _reservedContent;
        private _sheets;
        private _styles;
        private _definedNames;
        private _tableStyles;
        private _colorThemes;
        private static _alphabet;
        private static _formatMap;
        /**
         * Initializes a new instance of the {@link Workbook} class.
         */
        constructor();
        /**
         * Gets the WorkSheet array of the workbook.
         */
        readonly sheets: WorkSheet[];
        /**
         * Gets the styles table of the workbook.
         */
        readonly styles: WorkbookStyle[];
        /**
         * Gets the defined name items of the workbook.
         */
        readonly definedNames: DefinedName[];
        /**
         * Gets the color of the workbook themes.
         */
        readonly colorThemes: string[];
        /**
         * Gets or sets the reserved content from xlsx file that flexgrid or flexsheet doesn't support yet.
         */
        reservedContent: any;
        /**
         * Saves the book to a file and returns a base-64 string representation of
         * the book.
         * This method works with JSZip version 2.* only.
         *
         * For example, this sample creates an xlsx file with a single cell:
         *
         * <pre>function exportXlsx(fileName) {
         *     var book = new wijmo.xlsx.Workbook(),
         *         sheet = new wijmo.xlsx.WorkSheet(),
         *         bookRow = new wijmo.xlsx.WorkbookRow(),
         *         bookCell = new wijmo.xlsx.WorkbookCell();
         *     bookCell.value = 'Hello, Excel!';
         *     bookRow.cells.push(bookCell);
         *     sheet.rows.push(bookRow);
         *     book.sheets.push(sheet);
         *     book.save(fileName);
         * }</pre>
         *
         * The file name is optional. If not provided, the method still returns
         * a base-64 string representing the book. This string can be used for
         * further processing on the client or on the server.
         *
         * @param fileName Name of the xlsx file to save.
         * @return A base-64 string that represents the content of the file.
         */
        save(fileName?: string): string;
        private _cs;
        /**
         * Saves the book to a file asynchronously.
         * This method works with JSZip version 3.* only.
         *
         * @param fileName Name of the xlsx file to save.
         * @param onSaved This callback provides an approach to get the base-64 string
         * that represents the content of the saved workbook. Since this method is an
         * asynchronous method, user does not get the base-64 string immediately.
         * User has to get the base-64 string via this callback.
         * This has a single parameter, the base-64 string of the saved workbook.
         * It will be passed to user.
         * @param onError This callback catches error information when saving.
         * This has a single parameter, the failure reason.
         * Return value will be passed to user, if he wants to catch the save failure reason.
         * @param onProgress Callback function that gives feedback about the progress of a task.
         * The function accepts a single argument, the current progress as a number between 0 and 100.
         *
         * For example:
         * <pre>
         * workbook.saveAsync('', function (base64){
         *      // User can access the base64 string in this callback.
         *      document.getElementByID('export').href = 'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;' + 'base64,' + base64;
         * }, function (reason){
         *      // User can catch the failure reason in this callback.
         *      console.log('The reason of save failure is ' + reason);
         * });
         * </pre>
         */
        saveAsync(fileName?: string, onSaved?: (base64?: string) => any, onError?: (reason?: any) => any, onProgress?: (value: number) => void): void;
        _externalCancellation: () => _ICancellationSource;
        /**
         * Cancels the export started by the {@link saveAsync} method.
         * @param done Callback invoked when the method finishes executing.
         */
        cancelAsync(done?: () => void): void;
        /**
         * Loads from base-64 string or data url.
         * This method works with JSZip version 2.* only.
         *
         * For example:
         * <pre>// This sample opens an xlsx file chosen from Open File
         * // dialog and creates a workbook instance to load the file.
         * &nbsp;
         * // HTML
         * &lt;input type="file"
         *     id="importFile"
         *     accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
         * /&gt;
         * &nbsp;
         * // JavaScript
         * var workbook, // receives imported IWorkbook
         *     importFile = document.getElementById('importFile');
         * &nbsp;
         * importFile.addEventListener('change', function () {
         *     loadWorkbook();
         * });
         * &nbsp;
         * function loadWorkbook() {
         *     var reader,
         *         workbook,
         *         file = importFile.files[0];
         *     if (file) {
         *         reader = new FileReader();
         *         reader.onload = function (e) {
         *            workbook = new wijmo.xlsx.Workbook(),
         *            workbook.load(reader.result);
         *         };
         *         reader.readAsDataURL(file);
         *     }
         * }</pre>
         *
         * @param base64 The base-64 string that contains the xlsx file content.
         */
        load(base64: string): void;
        /**
         * Loads from base-64 string or data url asynchronously.
         * This method works with JSZip version 3.* only.
         *
         * @param base64 base64 string that contains the xlsx file content.
         * @param onLoaded This callback provides an approach to get an instance of the loaded workbook.
         * Since this method is an asynchronous method, user is not able to get instance of
         * the loaded workbook immediately. User has to get the instance through this callback.
         * This has a single parameter, instance of the loaded workbook. It will be passed to user.
         * @param onError This callback catches error information when loading.
         * This has a single parameter, the failure reason. Return value is
         * be passed to user, if he wants to catch the load failure reason.
         *
         * For example:
         * <pre>
         * workbook.loadAsync(base64, function (workbook) {
         *      // User can access the loaded workbook instance in this callback.
         *      var app = worksheet.application ;
         *      ...
         * }, function (reason) {
         *      // User can catch the failure reason in this callback.
         *      console.log('The reason of load failure is ' + reason);
         * });
         * </pre>
         */
        loadAsync(base64: string, onLoaded: (workbook: Workbook) => void, onError?: (reason?: any) => any): void;
        _serialize(): IWorkbook;
        _deserialize(workbookOM: IWorkbook): void;
        _addWorkSheet(workSheet: WorkSheet, sheetIndex?: number): void;
        static _saveToFile(base64: string, fileName: string, containMarcos: boolean): void;
        private _getBase64String;
        /**
         * Converts the wijmo date format to Excel format.
         *
         * @param format The wijmo date format.
         * @return Excel format representation.
         */
        static toXlsxDateFormat(format: string): string;
        /**
         * Converts the wijmo number format to xlsx format.
         *
         * @param format The wijmo number format.
         * @return Excel format representation.
         */
        static toXlsxNumberFormat(format: string): string;
        /**
         * Converts the xlsx multi-section format string to an array of corresponding wijmo formats.
         *
         * @param xlsxFormat The Excel format string, that may contain multiple format sections
         * separated by a semicolon.
         * @return An array of .Net format strings where each element corresponds to a separate
         * Excel format section.
         * The returning array always contains at least one element. It can be an empty string
         * in case the passed Excel format is empty.
         */
        static fromXlsxFormat(xlsxFormat: string): string[];
        static _parseCellFormat(format: string, isDate: boolean): string;
        static _parseExcelFormat(item: IWorkbookCell): string;
        /**
         * Converts zero-based cell, row or column index to Excel alphanumeric representation.
         *
         * @param row The zero-based row index or a null value if only column index
         * is to be converted.
         * @param col The zero-based column index or a null value if only row index
         * is to be converted.
         * @param absolute True value indicates that absolute indices is to be returned
         * for both, row and column (like $D$7). The <b>absoluteCol</b> parameter allows
         * to redefine this value for the column index.
         * @param absoluteCol True value indicates that column index is absolute.
         * @param isWholeRow Indicates whether the Cell reference is whole row, whole column or specific cell range.
         * If isWholeRow is true means the cell reference is whole row.
         * If isWholeRow is false means the cell reference is whole column.
         * If isWholeRow is null means the cell reference is specific cell range.
         * @return The alphanumeric Excel index representation.
        */
        static xlsxAddress(row: number, col: number, absolute?: boolean, absoluteCol?: boolean, isWholeRow?: boolean): string;
        /**
         * Convert Excel's alphanumeric cell, row or column index to the zero-based
         * row/column indices pair.
         *
         * @param xlsxIndex The alphanumeric Excel index that may include alphabetic A-based
         * column index and/or numeric 1-based row index, like "D15", "D" or "15". The
         * alphabetic column index can be in lower or upper case.
         * @return The object with <b>row</b> and <b>col</b> properties containing zero-based
         * row and/or column indices.
         * If row or column component is not specified in the alphanumeric index, then
         * corresponding returning property is undefined.
         */
        static tableAddress(xlsxIndex: string): ITableAddress;
        static _parseHAlignToString(hAlign: HAlign): string;
        static _parseStringToHAlign(hAlign: string): HAlign;
        static _parseVAlignToString(vAlign: VAlign): string;
        static _parseStringToVAlign(vAlign: string): VAlign;
        static _parseBorderTypeToString(type: BorderStyle): string;
        static _parseStringToBorderType(type: string): BorderStyle;
        static _escapeXML(s: any): string;
        static _unescapeXML(val: any): string;
        private static _numAlpha;
        private static _alphaNum;
        private static _b64ToUint6;
        static _base64DecToArr(sBase64: string, nBlocksSize?: number): Uint8Array;
        private static _uint6ToB64;
        static _base64EncArr(aBytes: Uint8Array): string;
        private _serializeWorkSheets;
        private _serializeWorkbookStyles;
        private _serializeDefinedNames;
        private _serializeTableStyles;
        private _deserializeWorkSheets;
        private _deserializeWorkbookStyles;
        private _deserializeDefinedNames;
        private _deserializeTableStyles;
    }
    /**
     * Represents the Workbook Object Model sheet definition that includes sheet
     * properties and data.
     *
     * The sheet cells are stored in row objects and are accessible using JavaScript
     * expressions like <b>sheet.rows[i].cells[j]</b>.
     */
    class WorkSheet implements IWorkSheet {
        /**
         * Gets or sets the sheet name.
         */
        name: string;
        /**
         *  Gets or sets the {@link WorkbookFrozenPane} settings.
         */
        frozenPane: WorkbookFrozenPane;
        /**
         * Gets or sets a value indicating whether summary rows appear below or
         * above detail rows.
         */
        summaryBelow: boolean;
        /**
         * Gets or sets the worksheet visibility.
         */
        visible: boolean;
        /**
         * Gets or sets the row style.
         *
         * The property defines the style for all cells in the worksheet, and
         * can be overridden by the specific cell styles.
         */
        style: WorkbookStyle;
        private _columns;
        private _rows;
        private _tables;
        /**
         * Initializes a new instance of the {@link WorkSheet} class.
         */
        constructor();
        /**
         * Gets or sets an array of sheet columns definitions.
         *
         * Each {@link WorkbookColumn} object in the array describes a column
         * at the corresponding position in xlsx sheet, i.e. the column with index 0
         * corresponds to xlsx sheet column with index A, object with
         * index 1 defines sheet column with index B, and so on. If certain column
         * has no description in xlsx file, then corresponding array element
         * is undefined for both export and import operations.
         *
         * If {@link WorkbookColumn} object in the array doesn't specify the
         * <b>width</b> property value, then the default column width is applied.
         */
        readonly columns: WorkbookColumn[];
        /**
         * Gets an array of sheet rows definition.
         *
         * Each {@link WorkbookRow} object in the array describes a row at the corresponding
         * position in xlsx sheet, i.e. the row with index 0 corresponds to excel sheet
         * row with index 1, object with index 1 defines sheet row with index 2, and so on.
         * If certain row has no properties and data in xlsx file, then corresponding array
         * element is undefined for both export and import operations.
         *
         * If {@link WorkbookRow} object in the array doesn't specify the <b>height</b> property
         * value, then the default row height is applied.
         */
        readonly rows: WorkbookRow[];
        /**
         * Gets the name of tables refered in this worksheet.
         */
        readonly tables: WorkbookTable[];
        _serialize(): IWorkSheet;
        _deserialize(workSheetOM: IWorkSheet): void;
        _addWorkbookColumn(column: WorkbookColumn, columnIndex?: number): void;
        _addWorkbookRow(row: WorkbookRow, rowIndex?: number): void;
        private _serializeWorkbookColumns;
        private _serializeWorkbookRows;
        private _serializeTables;
        private _deserializeWorkbookColumns;
        private _deserializeWorkbookRows;
        private _deserializeTables;
        private _checkEmptyWorkSheet;
    }
    /**
     * Represents the Workbook Object Model column definition.
     */
    class WorkbookColumn implements IWorkbookColumn {
        /**
         * Gets or sets the width of the column in device-independent
         * (1/96th inch) pixels or characters.
         *
         * The numeric value defines the width in pixels. On import,
         * the widths are always expressed in pixels.
         *
         * The string value which is a number with the 'ch' suffix,
         * for example '10ch', defines the width in characters.
         * It has the same meaning as the column width defined through
         * Excel UI. The width can be specified in characters
         * for the export operations only.
         *
         * If width is not specified, then the default width is applied.
         */
        width: any;
        /**
         * Gets or sets the column visibility.
         */
        visible: boolean;
        /**
         * Gets or sets the column style.
         *
         * The property defines the style for all cells in the column,
         * and can be overridden by the specific cell styles.
         */
        style: WorkbookStyle;
        /**
         * Gets or sets a value indicating whether the column width is
         * automatically adjusted to fit the content of its cells.
         */
        autoWidth: boolean;
        /**
         * Initializes a new instance of the {@link WorkbookColumn} class.
         */
        constructor();
        _serialize(): IWorkbookColumn;
        _deserialize(workbookColumnOM: IWorkbookColumn): void;
        private _checkEmptyWorkbookColumn;
    }
    /**
     * Represents the Workbook Object Model row definition.
     */
    class WorkbookRow implements IWorkbookRow {
        /**
         * Gets or sets the row height in device-independent (1/96th inch) pixels.
         *
         * If height is not specified, then the default height is applied.
         */
        height: number;
        /**
         * Gets or sets the row visibility.
         */
        visible: boolean;
        /**
         * Gets or sets the group level of the row.
         */
        groupLevel: number;
        /**
         * Gets or sets the row style.
         *
         * The property defines the style for all cells in the row,
         * and can be overridden by the specific cell styles.
         */
        style: WorkbookStyle;
        /**
         * Indicating if the row is in the collapsed outline state.
         */
        collapsed: boolean;
        private _cells;
        /**
         * Initializes a new instance of the {@link WorkbookRow} class.
         */
        constructor();
        /**
         * Gets or sets an array of cells in the row.
         *
         * Each {@link WorkbookCell} object in the array describes a cell
         * at the corresponding position in the row, i.e. a cell with
         * index 0 pertains to column with index A, a cell with index 1
         * defines cell pertaining to column with index B, and so on.
         * If a certain cell has no definition (empty) in xlsx file,
         * then corresponding array element is undefined for both export
         * and import operations.
         */
        readonly cells: WorkbookCell[];
        _serialize(): IWorkbookRow;
        _deserialize(workbookRowOM: IWorkbookRow): void;
        _addWorkbookCell(cell: WorkbookCell, cellIndex?: number): void;
        private _serializeWorkbookCells;
        private _deserializeWorkbookCells;
        private _checkEmptyWorkbookRow;
    }
    /**
     * Represents the Workbook Object Model cell definition.
     */
    class WorkbookCell implements IWorkbookCell {
        /**
         * Gets or sets the cell value.
         *
         * The type of the value can be String, Number, Boolean or Date.
         */
        value: any;
        /**
         * Indicates whether the cell value is date or not.
         */
        isDate: boolean;
        /**
         * Indicates whether the cell value is number or not.
         */
        isNumber: boolean;
        /**
         * Gets or sets the formula of cell.
         */
        formula: string;
        /**
         * Gets or sets the style of cell.
         */
        style: WorkbookStyle;
        /**
         * Gets or sets the colSpan setting of cell.
         */
        colSpan: number;
        /**
         * Gets or sets the rowSpan setting of cell.
         */
        rowSpan: number;
        /**
         * Gets or sets the hyperlink of cell.
         */
        link: string;
        /**
         * Gets or sets the text runs represent the rich text of cell.
         */
        textRuns: WorkbookTextRun[];
        /**
         * Initializes a new instance of the {@link WorkbookCell} class.
         */
        constructor();
        _serialize(): IWorkbookCell;
        _deserialize(workbookCellOM: IWorkbookCell): void;
        private _serializeTextRuns;
        private _deserializeTextRuns;
        private _checkEmptyWorkbookCell;
    }
    /**
     * Workbook frozen pane definition
     */
    class WorkbookFrozenPane implements IWorkbookFrozenPane {
        /**
         * Gets or sets the number of frozen rows.
         */
        rows: number;
        /**
         * Gets or sets the number of frozen columns.
         */
        columns: number;
        /**
         * Initializes a new instance of the {@link WorkbookFrozenPane} class.
         */
        constructor();
        _serialize(): IWorkbookFrozenPane;
        _deserialize(workbookFrozenPaneOM: IWorkbookFrozenPane): void;
    }
    /**
     * Represents the Workbook Object Model style definition used
     * to style Excel cells, columns and rows.
     */
    class WorkbookStyle implements IWorkbookStyle {
        /**
         * Cell value format, defined using Excel format syntax.
         *
         * The description of Excel format syntax can be found
         * <a href="https://docs.microsoft.com/en-us/office/troubleshoot/excel/format-cells-settings" target="_blank">here</a>.
         *
         * You may use the <b>toXlsxNumberFormat</b> and <b>toXlsxDateFormat</b> static
         * functions of the {@link Workbook} class to convert from .Net ({@link Globalize})
         * format to Excel format.
         */
        format: string;
        /**
         * Defines the base style that this style inherits.
         *
         * This property is applicable for the export operations only.
         * The style gets all the properties defined in the base style,
         * and can override or augment them by setting its own properties.
         */
        basedOn: WorkbookStyle;
        /**
         * Gets or sets the font of style.
         */
        font: WorkbookFont;
        /**
         * Gets or sets the horizontal alignment of text.
         */
        hAlign: HAlign;
        /**
         *  Gets or sets the vertical alignment of text.
         */
        vAlign: VAlign;
        /**
         * Gets or sets the indent setting of style.
         */
        indent: number;
        /**
         * Gets or sets the background setting.
         */
        fill: WorkbookFill;
        /**
         * Gets or sets the border setting.
         */
        borders: WorkbookBorder;
        /**
         * Gets or sets the word wrap setting of row.
         */
        wordWrap: boolean;
        /**
         * Initializes a new instance of the {@link WorkbookStyle} class.
         */
        constructor();
        _serialize(): IWorkbookStyle;
        _deserialize(workbookStyleOM: IWorkbookStyle): void;
        private _checkEmptyWorkbookStyle;
    }
    /**
     * Represents the Workbook Object Model font definition.
     */
    class WorkbookFont implements IWorkbookFont {
        /**
         * Gets or sets the font family name.
         */
        family: string;
        /**
         * Gets or sets the font size in device-independent (1/96th inch) pixels.
         */
        size: number;
        /**
         * Indicates whether the current font is bold.
         */
        bold: boolean;
        /**
         * Indicates whether the current font has the italic style applied.
         */
        italic: boolean;
        /**
         * Indicates whether the current font is underlined.
         */
        underline: boolean;
        /**
         * Gets or sets the font color.
         *
         * For export, the color can be specified in any valid HTML format
         * like 6-character dash notation or rgb/rgba/hsl/hsla functional form.
         * In case of rgba/hsla representations, specified alpha channel value
         * is ignored.
         *
         * For import, a value is always represented in the HTML 6-character dash
         * notation, for example, "#afbfcf".
         */
        color: string;
        /**
         * Initializes a new instance of the {@link WorkbookFont} class.
         */
        constructor();
        _serialize(): IWorkbookFont;
        _deserialize(workbookFontOM: IWorkbookFont): void;
        private _checkEmptyWorkbookFont;
    }
    /**
     * Represents the Workbook Object Model background fill definition.
     */
    class WorkbookFill implements IWorkbookFill {
        /**
         * Gets or sets the fill color.
         *
         * For export, the color can be specified in any valid HTML format
         * like 6-character dash notation or rgb/rgba/hsl/hsla functional form.
         * In case of rgba/hsla representations, specified alpha channel value
         * is ignored.
         *
         * For import, a value is always represented in the HTML 6-character dash
         * notation, for example, "#afbfcf".
         */
        color: string;
        /**
         * Initializes a new instance of the {@link WorkbookFill} class.
         */
        constructor();
        _serialize(): IWorkbookFill;
        _deserialize(workbookFillOM: IWorkbookFill): void;
    }
    /**
     * Represents the Workbook Object Model border definition.
     */
    class WorkbookBorder implements IWorkbookBorder {
        /**
         * Gets or sets the top border setting.
         */
        top: WorkbookBorderSetting;
        /**
         * Gets or sets the bottom border setting.
         */
        bottom: WorkbookBorderSetting;
        /**
         * Gets or sets the left border setting.
         */
        left: WorkbookBorderSetting;
        /**
         * Gets or sets the right border setting.
         */
        right: WorkbookBorderSetting;
        /**
         * Gets or sets the diagonal border setting.
         */
        diagonal: WorkbookBorderSetting;
        /**
         * Initializes a new instance of the {@link WorkbookBorder} class.
         */
        constructor();
        _serialize(): IWorkbookBorder;
        _deserialize(workbookBorderOM: IWorkbookBorder): void;
        private _checkEmptyWorkbookBorder;
    }
    /**
     * Represents the Workbook Object Model background setting definition.
     */
    class WorkbookBorderSetting implements IWorkbookBorderSetting {
        /**
         * Gets or sets the border color.
         *
         * For export, the color can be specified in any valid HTML format
         * like 6-character dash notation or rgb/rgba/hsl/hsla functional form.
         * In case of rgba/hsla representations, specified alpha channel value
         * is ignored.
         *
         * For import, a value is always represented in the HTML 6-character dash
         * notation, for example, "#afbfcf".
         */
        color: string;
        /**
         * Gets or sets the border type.
         */
        style: BorderStyle;
        /**
         * Initializes a new instance of the {@link WorkbookBorderSetting} class.
         */
        constructor();
        _serialize(): IWorkbookBorderSetting;
        _deserialize(workbookBorderSettingOM: IWorkbookBorderSetting): void;
    }
    /**
     * Represents the Workbook Object Model Defined Name item definition.
     */
    class DefinedName implements IDefinedName {
        /**
         * The name of the defined name item.
         */
        name: string;
        /**
         * The value of the defined name item.
         * The value could be a formula, a string constant or a cell range.
         * For e.g. "Sum(1, 2, 3)", "test" or "sheet1!A1:B2"
         */
        value: any;
        /**
         * Indicates the defined name item works in which sheet.
         * If omitted, the defined name item works in workbook
         */
        sheetName: string;
        /**
         * Initializes a new instance of the {@link DefinedName} class.
         */
        constructor();
        _serialize(): IDefinedName;
        _deserialize(definedNameOM: IDefinedName): void;
    }
    /**
     * Represents the WorkbookTable Object Model background setting definition.
     */
    class WorkbookTable implements IWorkbookTable {
        /**
         * The name of the table.  It is used to reference the table programmatically.
         */
        name: string;
        /**
         * The range on the relevant sheet that the table occupies expressed using A1 style referencing. i.e. "A1:D4".
         * The reference shall include the totals row if it is shown.
         */
        range: string;
        /**
         * Indicates whether show the header row for the table.
         */
        showHeaderRow: boolean;
        /**
         * Indicates whether show the total row for the table.
         */
        showTotalRow: boolean;
        /**
         * Indicating whether banded column formatting is applied.
         */
        showBandedColumns: boolean;
        /**
         * The table style to use with the table.
         */
        style: WorkbookTableStyle;
        /**
         * Indicating whether banded row formatting is applied.
         */
        showBandedRows: boolean;
        /**
         * Indicating whether the first column in the table should have the style applied.
         */
        alterFirstColumn: boolean;
        /**
         * Indicating whether the last column in the table should have the style applied.
         */
        alterLastColumn: boolean;
        private _columns;
        /**
         * The columns of the table.
         */
        readonly columns: WorkbookTableColumn[];
        /**
         * Initializes a new instance of the {@link WorkbookTable} class.
         */
        constructor();
        _serialize(): IWorkbookTable;
        _deserialize(workbookTableOM: IWorkbookTable): void;
        private _serializeTableColumns;
        private _deserializeTableColumns;
    }
    /**
     * Represents the WorkbookTableColumn Object Model background setting definition.
     */
    class WorkbookTableColumn implements IWorkbookTableColumn {
        /**
         * The name of the table column. It is referenced through functions.
         */
        name: string;
        /**
         * The string to show in the totals row cell for the column.
         */
        totalRowLabel: string;
        /**
         * The function to show in the totals row cell for this column.
         */
        totalRowFunction: string;
        /**
         * Indicating whether show filter button for the column.
         */
        showFilterButton: boolean;
        /**
         * Initializes a new instance of the {@link WorkbookTableColumn} class.
         */
        constructor();
        _serialize(): IWorkbookTableColumn;
        _deserialize(workbookTableColumnOM: IWorkbookTableColumn): void;
    }
    /**
     * Represents the WorkbookTableStyle Object Model background setting definition.
     */
    class WorkbookTableStyle implements IWorkbookTableStyle {
        /**
         * The name of the table style.
         */
        name: string;
        /**
         * The whole table style.
         */
        wholeTableStyle: WorkbookTableCommonStyle;
        /**
         * The first column stripe style.
         */
        firstBandedColumnStyle: WorkbookTableBandedStyle;
        /**
         * The second column stripe style.
         */
        secondBandedColumnStyle: WorkbookTableBandedStyle;
        /**
         * The first row stripe style.
         */
        firstBandedRowStyle: WorkbookTableBandedStyle;
        /**
         * The second row stripe style.
         */
        secondBandedRowStyle: WorkbookTableBandedStyle;
        /**
         * The first column style.
         */
        firstColumnStyle: WorkbookTableCommonStyle;
        /**
         * The last column style.
         */
        lastColumnStyle: WorkbookTableCommonStyle;
        /**
         * The header row style.
         */
        headerRowStyle: WorkbookTableCommonStyle;
        /**
         * The total row style.
         */
        totalRowStyle: WorkbookTableCommonStyle;
        /**
         * The first cell style in the header row.
         */
        firstHeaderCellStyle: WorkbookTableCommonStyle;
        /**
         * The last cell style in the header row.
         */
        lastHeaderCellStyle: WorkbookTableCommonStyle;
        /**
         * The first cell style in the total row.
         */
        firstTotalCellStyle: WorkbookTableCommonStyle;
        /**
         * The last cell style in the total row.
         */
        lastTotalCellStyle: WorkbookTableCommonStyle;
        /**
         * Initializes a new instance of the {@link WorkbookTableStyle} class.
         */
        constructor();
        _serialize(): IWorkbookTableStyle;
        _deserialize(workbookTableStyleOM: IWorkbookTableStyle): void;
        private _checkEmptyWorkbookTableStyle;
    }
    /**
     * Represents the WorkbookTableCommonStyle Object Model background setting definition.
     */
    class WorkbookTableCommonStyle extends WorkbookStyle implements IWorkbookTableCommonStyle {
        /**
         * Table borders setting.
         */
        borders: WorkbookTableBorder;
        /**
         * Initializes a new instance of the {@link WorkbookTableCommonStyle} class.
         */
        constructor();
        _deserialize(workbookTableCommonStyleOM: IWorkbookTableCommonStyle): void;
    }
    /**
     * Represents the WorkbookTableBandedStyle Object Model background setting definition.
     */
    class WorkbookTableBandedStyle extends WorkbookTableCommonStyle implements IWorkbookTableBandedStyle {
        /**
         * Number of rows or columns in a single band of striping.
         */
        size: number;
        /**
         * Initializes a new instance of the {@link WorkbookTableBandedStyle} class.
         */
        constructor();
        _serialize(): IWorkbookTableBandedStyle;
        _deserialize(workbookTableBandedStyleOM: IWorkbookTableBandedStyle): void;
    }
    /**
     * Represents the Workbook Object Model table border definition.
     */
    class WorkbookTableBorder extends WorkbookBorder implements IWorkbookTableBorder {
        /**
         * Vertical border setting.
         */
        vertical: WorkbookBorderSetting;
        /**
         * Horizontal border setting.
         */
        horizontal: WorkbookBorderSetting;
        /**
         * Initializes a new instance of the {@link WorkbookTableBorder} class.
         */
        constructor();
        _serialize(): IWorkbookTableBorder;
        _deserialize(workbookBorderOM: IWorkbookTableBorder): void;
    }
    /**
     * Represents the Workbook Object Model text run definition.
     */
    class WorkbookTextRun implements IWorkbookTextRun {
        /**
         * Gets or sets the font of the text run.
         */
        font: WorkbookFont;
        /**
         * Gets or sets the text of the text run.
         */
        text: string;
        /**
         * Initializes a new instance of the {@link WorkbookTextRun} class.
         */
        constructor();
        _serialize(): IWorkbookTextRun;
        _deserialize(workbookTextRunOM: IWorkbookTextRun): void;
    }
    interface IXlsxFileContent {
        base64: string;
        base64Array: Uint8Array;
        href: Function;
    }
    /**
     * Represents the Workbook Object Model sheet definition that
     * includes sheet properties and data.
     *
     * The sheet cells are stored in row objects and are accessible
     * using JavaScript expressions like <b>sheet.rows[i].cells[j]</b>.
     */
    interface IWorkSheet {
        /**
         * Gets or sets the sheet name.
         */
        name?: string;
        /**
         * Gets or sets an array of sheet columns definitions.
         *
         * Each {@link IWorkbookColumn} object in the array describes a column at the
         * corresponding position in xlsx sheet, i.e. column with index 0 corresponds
         * to xlsx sheet column with index A, object with index 1 defines sheet column
         * with index B, and so on. If certain column has no description in xlsx file,
         * then corresponding array element is undefined for both export and import operations.
         *
         * If {@link IWorkbookColumn} object in the array doesn't specify the <b>width</b>
         * property value, then the default column width is applied.
         */
        columns?: IWorkbookColumn[];
        /**
         * Gets or sets an array of sheet rows definition.
         *
         * Each {@link IWorkbookRow} object in the array describes a row at the
         * corresponding position in xlsx sheet, i.e. row with index 0 corresponds
         * to xlsx sheet row with index A, object with index 1 defines sheet row
         * with index B, and so on. If certain row has no description in xlsx file,
         * then corresponding array element is undefined for both export and import operations.
         *
         * If {@link IWorkbookRow} object in the array doesn't specify the <b>height</b>
         * property value, then the default row height is applied.
         */
        rows?: IWorkbookRow[];
        /**
         *  Gets or sets the frozen pane settings.
         */
        frozenPane?: IWorkbookFrozenPane;
        /**
         * Gets or sets a value indicating whether summary rows appear below or above detail rows.
         */
        summaryBelow?: boolean;
        /**
         * Gets or sets the worksheet visibility.
         */
        visible?: boolean;
        /**
         * Gets or sets the sheet style.
         *
         * The property defines the style for all cells in the worksheet,
         * and can be overridden by the specific cell styles.
         */
        style?: IWorkbookStyle;
        /**
         * Gets the tables in this worksheet.
         */
        tables?: IWorkbookTable[];
    }
    /**
     * Represents the Workbook Object Model column definition.
     */
    interface IWorkbookColumn {
        /**
         * Gets or sets the width of the column in device-independent (1/96th inch) pixels
         * or characters.
         *
         * The numeric value defines the width in pixels. On import, the widths are
         * always expressed in pixels.
         *
         * The string value which is a number with the 'ch' suffix, for example '10ch',
         * defines the width in characters. It has the same meaning as the column width
         * defined through Excel UI. The width can be specified in characters
         * for the export operations only.
         *
         * If width is not specified, then the default width is applied.
         */
        width?: any;
        /**
         * Gets or sets the column visibility.
         */
        visible?: boolean;
        /**
         * Gets or sets the column style.
         *
         * The property defines the style for all cells in the column,
         * and can be overridden by the specific cell styles.
         */
        style?: IWorkbookStyle;
        /**
         * Gets or sets a value indicating whether the column width is
         * automatically adjusted to fit the content of its cells.
         */
        autoWidth?: boolean;
    }
    /**
     * Represents the Workbook Object Model row definition.
     */
    interface IWorkbookRow {
        /**
         * Gets or sets the row height in device-independent (1/96th inch) pixels.
         *
         * If height is not specified, then the default height is applied.
         */
        height?: number;
        /**
         * Gets or sets the row visibility.
         */
        visible?: boolean;
        /**
         * Gets or sets the group level of the row.
         */
        groupLevel?: number;
        /**
         * Gets or sets the row style.
         *
         * The property defines the style for all cells in the row,
         * and can be overridden by the specific cell styles.
         */
        style?: IWorkbookStyle;
        /**
         * TBD: Indicating if the row is in the collapsed outline state.
         */
        collapsed?: boolean;
        /**
         * Gets or sets an array of cells in the row.
         *
         * Each {@link IWorkbookCell} object in the array describes a cell at
         * the corresponding position in the row, i.e. cell with index 0
         * pertains to column with index A, cell with index 1 defines
         * cell pertaining to column with index B, and so on. If a certain cell
         * has no definition (empty) in xlsx file, then corresponding array
         * element is undefined for both export and import operations.
         */
        cells?: IWorkbookCell[];
    }
    /**
     * Represents the Workbook Object Model cell definition.
     */
    interface IWorkbookCell {
        /**
         * Gets or sets the cell value.
         *
         * The type of the value can be String, Number, Boolean or Date.
         */
        value?: any;
        /**
         * Indicates whether the cell value is date or not.
         */
        isDate?: boolean;
        /**
         * Indicates whether the cell value is number or not.
         */
        isNumber?: boolean;
        /**
         * Cell formula
         */
        formula?: string;
        /**
         * Cell style
         */
        style?: IWorkbookStyle;
        /**
         * Cell colSpan setting
         */
        colSpan?: number;
        /**
         * Cell rowSpan setting
         */
        rowSpan?: number;
        /**
         * The hyperlink of the cell.
         */
        link?: string;
        /**
         * The text runs represent the rich text of cell.
         */
        textRuns?: IWorkbookTextRun[];
    }
    /**
     * Workbook frozen pane definition
     */
    interface IWorkbookFrozenPane {
        /**
         * Gets or sets the number of frozen rows.
         */
        rows: number;
        /**
         * Gets or sets the number of frozen columns.
         */
        columns: number;
    }
    /**
     * Represents an Excel Workbook. This interface is the root of the Excel
     * Workbook Object Model (WOM) which provides a way to define properties
     * and data stored in xlsx file.
     *
     * To create an xlsx file, create a {@link Workbook} object and populate them
     * with {@link WorkSheet}, {@link WorkbookColumn}, {@link WorkbookRow}, and {@link WorkbookCell}
     * objects.
     *
     * To save xlsx files, use the {@link Workbook.save} method which can save the
     * book to a file or return it as a base-64 string.
     *
     * To load existing xlsx files, use the {@link Workbook.load} method which will
     * populate the book.
     */
    interface IWorkbook {
        /**
         * Defines an array of Excel Workbook sheets.
         */
        sheets: IWorkSheet[];
        /**
        * Name of the application that generated the file that appears in the file properties.
        */
        application?: string;
        /**
        * Name of the company that generated the file that appears in the file properties.
        */
        company?: string;
        /**
         * Creator of the xlsx file.
         */
        creator?: string;
        /**
         * Creation time of the xlsx file.
         */
        created?: Date;
        /**
         * Last modifier of the xlsx file.
         */
        lastModifiedBy?: string;
        /**
         * Last modified time of the xlsx file.
         */
        modified?: Date;
        /**
         * Index of the active sheet in the xlsx file.
         */
        activeWorksheet?: number;
        /**
         * Styles table of the workbook.
         */
        styles?: IWorkbookStyle[];
        /**
         * The reserved content for the workbook.
         */
        reservedContent?: any;
        /**
         * The array of the defined name items.
         */
        definedNames?: IDefinedName[];
        /**
         * The color of the workbook themes.
         */
        colorThemes?: string[];
    }
    /**
     * Represents the Workbook Object Model style definition used to
     * style Excel cells, columns and rows.
     */
    interface IWorkbookStyle {
        /**
         * Cell value format, defined using Excel format syntax.
         *
         * The description of Excel format syntax can be found
         * <a href="https://support.office.com/en-us/article/create-a-custom-number-format-78f2a361-936b-4c03-8772-09fab54be7f4" target="_blank">here</a>.
         *
         * You may use the <b>toXlsxNumberFormat</b> and <b>toXlsxDateFormat</b>
         * static functions of the {@link Workbook} class to convert from .Net
         * ({@link Globalize}) format to Excel format.
         */
        format?: string;
        /**
         * Defines the base style that this style inherits.
         *
         * This property is applicable for export operations only.
         * The style gets all the properties defined in the base style,
         * and can override or augment them by setting its own properties.
         */
        basedOn?: IWorkbookStyle;
        /**
         * Gets or sets the font properties.
         */
        font?: IWorkbookFont;
        /**
         * Gets or sets the horizontal alignment of a text.
         */
        hAlign?: HAlign;
        /**
         *  Gets or sets the vertical alignment of a text.
         */
        vAlign?: VAlign;
        /**
         * Text indent.
         * It is an integer value, where an increment of 1 represents 3 spaces.
         */
        indent?: number;
        /**
         * Cell outline setting.
         */
        borders?: IWorkbookBorder;
        /**
         * Cells background.
         */
        fill?: IWorkbookFill;
        /**
         * Word wrap setting.
         */
        wordWrap?: boolean;
    }
    /**
     * Represents the Workbook Object Model font definition.
     */
    interface IWorkbookFont {
        /**
         * Gets or sets the font family name.
         */
        family?: string;
        /**
         * Gets or sets the font size in device-independent (1/96th inch) pixels.
         */
        size?: number;
        /**
         * Gets or sets a value indicating whether this font is bold.
         */
        bold?: boolean;
        /**
         * Gets or sets a value indicating whether this font has the italic style applied.
         */
        italic?: boolean;
        /**
         * Gets or sets a value indicating whether this font is underlined.
         */
        underline?: boolean;
        /**
         * Gets or sets the font color.
         *
         * For export, the color can be specified in any valid HTML format like
         * 6-character dash notation or rgb/rgba/hsl/hsla functional form. In case
         * of rgba/hsla representations, specified alpha channel value
         * is ignored.
         *
         * For import, a value is always represented in the HTML 6-character
         * dash notation, for example, "#afbfcf".
         */
        color?: string;
    }
    /**
     * Workbook cell outline definition.
     */
    interface IWorkbookBorder {
        /**
         * Top border setting.
         */
        top?: IWorkbookBorderSetting;
        /**
         * Bottom border setting.
         */
        bottom?: IWorkbookBorderSetting;
        /**
         * Left border setting.
         */
        left?: IWorkbookBorderSetting;
        /**
         * Right border setting.
         */
        right?: IWorkbookBorderSetting;
        /**
         * Diagonal border setting.
         */
        diagonal?: IWorkbookBorderSetting;
    }
    /**
     * Border style definition
     */
    interface IWorkbookBorderSetting {
        /**
         * Border color.
         *
         * For export, the color can be specified in any valid HTML format like
         * 6-character dash notation or rgb/rgba/hsl/hsla functional form. In case
         * of rgba/hsla representations, specified alpha channel value
         * is ignored.
         *
         * For import, a value is always represented in the HTML 6-character
         * dash notation, for example, "#afbfcf".
         */
        color?: string;
        /**
         * Border type.
         */
        style?: BorderStyle;
    }
    /**
     * Represents the Workbook Object Model background fill definition.
     */
    interface IWorkbookFill {
        /**
         * Gets or sets the fill color.
         *
         * For export, the color can be specified in any valid HTML format like
         * 6-character dash notation or rgb/rgba/hsl/hsla functional form. In case
         * of rgba/hsla representations, specified alpha channel value
         * is ignored.
         *
         * For import, a value is always represented in the HTML 6-character
         * dash notation, for example, "#afbfcf".
         */
        color?: string;
    }
    interface ITableIndex {
        row: number;
        col: number;
        absCol: boolean;
        absRow: boolean;
    }
    /**
     * Defines a cell index with zero-based row and column components,
     * as well as the properties indicating whether the index component
     * is absolute (for example: "$D") or relative (for example: "D").
     *
     * It is not related with the WorkbookTable any more.
     * It is a zero-based row/column indices pair that stores the converted Excel's alphanumeric cell.
     */
    interface ITableAddress {
        /**
         * A zero-based row index.
         */
        row: number;
        /**
         * A zero-based column index.
         */
        col: number;
        /**
        * Indicates whether the original column index is absolute (for example: "$D")
        * or relative (for example: "D").
        */
        absCol: boolean;
        /**
        * Indicates whether the original row index is absolute (for example: "$15")
        * or relative (for example: "15").
        */
        absRow: boolean;
    }
    /**
     * Represents the Defined name definition.
     */
    interface IDefinedName {
        /**
         * The name of the defined name item.
         */
        name: string;
        /**
         * The value of the defined name item.
         * The value could be a formula, a string constant or a cell range.
         * For e.g. "Sum(1, 2, 3)", "test" or "sheet1!A1:B2"
         */
        value: any;
        /**
         * Indicates the defined name item works in which sheet.
         * If omitted, the defined name item works in workbook.
         */
        sheetName?: string;
    }
    /**
     * Represents the Table definition.
     */
    interface IWorkbookTable {
        /**
         * The name of the table.  It is used to reference the table programmatically.
         */
        name: string;
        /**
         * The range on the relevant sheet that the table occupies expressed using A1 style referencing. i.e. "A1:D4".
         * The reference shall include the totals row if it is shown.
         */
        range: string;
        /**
         * Indicates whether show the header row for the table.
         */
        showHeaderRow: boolean;
        /**
         * Indicates whether show the total row for the table.
         */
        showTotalRow: boolean;
        /**
         * Indicating whether banded column formatting is applied.
         */
        showBandedColumns: boolean;
        /**
         * The table style to use with the table.
         */
        style: IWorkbookTableStyle;
        /**
         * Indicating whether banded row formatting is applied.
         */
        showBandedRows: boolean;
        /**
         * Indicating whether the first column in the table should have the style applied.
         */
        alterFirstColumn: boolean;
        /**
         * Indicating whether the last column in the table should have the style applied.
         */
        alterLastColumn: boolean;
        /**
         * The columns of the table.
         */
        columns: IWorkbookTableColumn[];
    }
    /**
     * Represents the Table Column definition.
     */
    interface IWorkbookTableColumn {
        /**
         * The name of the table column. It is referenced through functions.
         */
        name: string;
        /**
         * The string to show in the totals row cell for the column.
         */
        totalRowLabel?: string;
        /**
         * The function to show in the totals row cell for this column.
         */
        totalRowFunction?: string;
        /**
         * Indicating whether show filter button for the column.
         */
        showFilterButton?: boolean;
    }
    /**
     * Represents the Table Style definition.
     */
    interface IWorkbookTableStyle {
        /**
         * The name of the table style.
         */
        name: string;
        /**
         * The whole table style.
         */
        wholeTableStyle?: IWorkbookTableCommonStyle;
        /**
         * The first column stripe style.
         */
        firstBandedColumnStyle?: IWorkbookTableBandedStyle;
        /**
         * The second column stripe style.
         */
        secondBandedColumnStyle?: IWorkbookTableBandedStyle;
        /**
         * The first row stripe style.
         */
        firstBandedRowStyle?: IWorkbookTableBandedStyle;
        /**
         * The second row stripe style.
         */
        secondBandedRowStyle?: IWorkbookTableBandedStyle;
        /**
         * The first column style.
         */
        firstColumnStyle?: IWorkbookTableCommonStyle;
        /**
         * The last column style.
         */
        lastColumnStyle?: IWorkbookTableCommonStyle;
        /**
         * The header row style.
         */
        headerRowStyle?: IWorkbookTableCommonStyle;
        /**
         * The total row style.
         */
        totalRowStyle?: IWorkbookTableCommonStyle;
        /**
         * The first cell style in the header row.
         */
        firstHeaderCellStyle?: IWorkbookTableCommonStyle;
        /**
         * The last cell style in the header row.
         */
        lastHeaderCellStyle?: IWorkbookTableCommonStyle;
        /**
         * The first cell style in the total row.
         */
        firstTotalCellStyle?: IWorkbookTableCommonStyle;
        /**
         * The last cell style in the total row.
         */
        lastTotalCellStyle?: IWorkbookTableCommonStyle;
    }
    /**
     * Represents the Table Common Style definition.
     */
    interface IWorkbookTableCommonStyle extends IWorkbookStyle {
        /**
         * Table borders setting.
         */
        borders?: IWorkbookTableBorder;
    }
    /**
     * Represents the Table Stripe Style definition.
     */
    interface IWorkbookTableBandedStyle extends IWorkbookTableCommonStyle {
        /**
         * Number of rows or columns in a single band of striping.
         */
        size?: number;
    }
    /**
     * Table border definition.
     */
    interface IWorkbookTableBorder extends IWorkbookBorder {
        /**
         * Vertical border setting.
         */
        vertical?: IWorkbookBorderSetting;
        /**
         * Horizontal border setting.
         */
        horizontal?: IWorkbookBorderSetting;
    }
    /**
     * Piece of text run for rich text.
     */
    interface IWorkbookTextRun {
        /**
         * The font of the text run.
         */
        font?: IWorkbookFont;
        /**
         * The text of the text run.
         */
        text: string;
    }
    /**
     * Defines the Workbook Object Model horizontal text alignment.
     */
    enum HAlign {
        /** Alignment depends on the cell value type. */
        General = 0,
        /** Text is aligned to the left. */
        Left = 1,
        /** Text is centered. */
        Center = 2,
        /** Text is aligned to the right. */
        Right = 3,
        /** Text is replicated to fill the whole cell width. */
        Fill = 4,
        /** Text is justified. */
        Justify = 5
    }
    /**
     * Vertical alignment
     */
    enum VAlign {
        /** Top vertical alignment */
        Top = 0,
        /** Center vertical alignment */
        Center = 1,
        /** Bottom vertical alignment */
        Bottom = 2,
        /** Justified vertical alignment */
        Justify = 3
    }
    /**
     * Border line style
     */
    enum BorderStyle {
        /** No border */
        None = 0,
        /** Thin border */
        Thin = 1,
        /** Medium border */
        Medium = 2,
        /** Dashed border */
        Dashed = 3,
        /** Dotted border */
        Dotted = 4,
        /** Thick line border */
        Thick = 5,
        /** Double line border */
        Double = 6,
        /** Hair line border */
        Hair = 7,
        /** Medium dashed border */
        MediumDashed = 8,
        /** Thin dash dotted border */
        ThinDashDotted = 9,
        /** Medium dash dotted border */
        MediumDashDotted = 10,
        /** Thin dash dot dotted border */
        ThinDashDotDotted = 11,
        /** Medium dash dot dotted border */
        MediumDashDotDotted = 12,
        /** Slanted medium dash dotted border */
        SlantedMediumDashDotted = 13
    }
}
declare module wijmo.xlsx {
    /**
     * NOTE: This function is OBSOLETE and retained for compatibility.
     * It is no longer needed because wijmo.xlsx module loads
     * jszip module automatically. You should only ensure that jszip module is installed in
     * your application.
     *
     * Defines a reference to JSZip module that will be used by the Wijmo xlsx export modules.
     *
     * This method should be used in npm modules based applications to provide wijmo.xlsx module
     * with a reference to the JSZip module retrieved using the ES6 import statement. For example:
     * <pre>import * as JSZip from 'jszip';
     * import * as wjcXlsx from 'wijmo/wijmo.xlsx';
     * wjcXlsx.useJSZip(JSZip);
     * </pre>
     *
     * @param jszip Reference to the JSZip constructor function.
     */
    function useJSZip(jszip: any): void;
    class _xlsx {
        private static _alphabet;
        private static _indexedColors;
        private static _numFmts;
        private static _tableColumnFunctions;
        private static _xmlDescription;
        private static _workbookNS;
        private static _relationshipsNS;
        private static _defaultFontName;
        private static _defaultFontSize;
        private static _macroEnabled;
        private static _sharedStrings;
        static readonly _defaultColorThemes: string[];
        private static _colorThemes;
        private static _styles;
        private static _sharedFormulas;
        private static _borders;
        private static _fonts;
        private static _fills;
        private static _contentTypes;
        private static _props;
        private static _xlRels;
        private static _worksheets;
        private static _tableStyles;
        private static _dxfs;
        private static _tables;
        static load(base64: string): any;
        static loadAsync(base64: string): any;
        static save(workbook: any): any;
        static saveAsync(workbook: any, cs: _ICancellationSource, onError?: (reason?: any) => any, onProgress?: (value: number) => void): _SyncPromise;
        private static _loadImpl;
        private static _getZipStyle;
        private static _getZipSharedString;
        private static _saveWorkbookToZip;
        private static _generateWorksheets;
        private static _getSharedString;
        private static _getInlineString;
        private static _getCoreSetting;
        private static _getWorkbook;
        private static _getTheme;
        private static _getStyle;
        private static _getEdgeBorder;
        private static _getSheet;
        private static _getTable;
        private static _getTableColumn;
        private static _getSheetRelatedTable;
        private static _getSheetRelatedHyperlink;
        private static _getTableStyles;
        private static _getTableStyleElement;
        private static _getTableStyleByName;
        private static _getHyperlink;
        private static _getTextRunFont;
        private static _getTextOfTextRuns;
        private static _isBuiltInStyleName;
        private static _generateRelsDoc;
        private static _generateThemeDoc;
        private static _generateClrScheme;
        private static _generateFontScheme;
        private static _generateFmtScheme;
        private static _generateFillScheme;
        private static _generateLineStyles;
        private static _generateEffectScheme;
        private static _generateBgFillScheme;
        private static _generateCoreDoc;
        private static _generateSheetGlobalSetting;
        private static _generateCell;
        private static _generateMergeSetting;
        private static _generateStyleDoc;
        private static _generateBorderStyle;
        private static _generateFontStyle;
        private static _generateFillStyle;
        private static _generateCellXfs;
        private static _generateContentTypesDoc;
        private static _generateAppDoc;
        private static _generateWorkbookRels;
        private static _generateWorkbook;
        private static _generateWorksheetRows;
        private static _generateWorkSheet;
        private static _generateSharedStringsDoc;
        private static _generatePlainText;
        private static _generateTable;
        private static _generateTableFilterSetting;
        private static _generateHyperlinkRel;
        private static _getDxfs;
        private static _generateDxfs;
        private static _generateTableStyles;
        private static _isEmptyStyleEle;
        private static _getTableFileName;
        private static _getColor;
        private static _getThemeColor;
        private static _parseColor;
        private static _getsBaseSharedFormulas;
        private static _parseSharedFormulaInfo;
        private static _getSharedFormula;
        private static _convertDate;
        private static _parseBorder;
        private static _applyDefaultBorder;
        private static _resolveStyleInheritance;
        private static _parsePixelToCharWidth;
        private static _parseCharWidthToPixel;
        private static _parseCharCountToCharWidth;
        private static _numAlpha;
        private static _alphaNum;
        private static _typeOf;
        private static _extend;
        private static _isEmpty;
        private static _cloneStyle;
        private static _cloneColumnsStyle;
        private static _getSheetIndex;
        private static _checkValidMergeCell;
        private static _getAttr;
        private static _getChildNodeValue;
        private static _getSheetIndexBySheetName;
    }
    interface _ISyncPromiseCallback {
        onFulfilled?: (value?: any) => any;
        onRejected?: (reason?: any) => any;
    }
    interface _ICancellationSource {
        cancelled: boolean;
        cancel(): void;
    }
    class _SyncPromise implements _ISyncPromiseCallback, _ICancellationSource {
        static serial(cs: _ICancellationSource, promises: (() => _SyncPromise)[]): _SyncPromise;
        private _callbacks;
        private _resolved;
        private _cs;
        private _onCancel;
        private _cancelled;
        constructor(cs?: _ICancellationSource, onCancel?: Function);
        cancel(raiseEvent?: boolean): void;
        readonly cancelled: boolean;
        then(onFulfilled?: (value?: any) => any, onRejected?: (reason?: any) => any): this;
        catch(onRejected: (reason?: any) => any): _SyncPromise;
        resolve(value?: any): this;
        reject(reason?: any): this;
        onFulfilled(value: any): void;
        onRejected(reason: any): void;
    }
    function _map(value: number, minIn: number, maxIn: number, minOut: number, maxOut: number): number;
}
declare module wijmo.xlsx {
}

declare module wijmo.grid.xlsx {
    function softDetail(): typeof wijmo.grid.detail;
    function softMultiRow(): typeof wijmo.grid.multirow;
    function softTransposed(): typeof wijmo.grid.transposed;
    function softTransposedMultiRow(): typeof wijmo.grid.transposedmultirow;
}
declare module wijmo.grid.xlsx {
    /**
     * This class provides static <b>load</b> and <b>save</b> methods for loading
     * and saving {@link FlexGrid} controls from and to Excel xlsx files.
     *
     * The example below shows how you can use the {@link FlexGridXlsxConverter} to
     * export the content of a {@link FlexGrid} control to XLSX:
     *
     * {@sample Grid/ImportExportPrint/Excel/Async/purejs Example}
     */
    class FlexGridXlsxConverter {
        private static hasCssText;
        /**
         * Save the {@link FlexGrid} instance to the {@link Workbook} instance.
         * This method works with JSZip 2.5.
         *
         * For example:
         * <pre>// This sample exports FlexGrid content to an xlsx file.
         * // click.
         * &nbsp;
         * // HTML
         * &lt;button
         *     onclick="saveXlsx('FlexGrid.xlsx')"&gt;
         *     Save
         * &lt;/button&gt;
         * &nbsp;
         * // JavaScript
         * function saveXlsx(fileName) {
         *     // Save the flexGrid to xlsx file.
         *     wijmo.grid.xlsx.FlexGridXlsxConverter.save(flexGrid,
         *             { includeColumnHeaders: true }, fileName);
         * }</pre>
         *
         * @param grid FlexGrid that will be saved.
         * @param options {@link IFlexGridXlsxOptions} object specifying the save options.
         * @param fileName Name of the file that will be generated.
         * @return A {@link Workbook} object that can be used to customize the workbook
         * before saving it (with the Workbook.save method).
         */
        static save(grid: wijmo.grid.FlexGrid, options?: IFlexGridXlsxOptions, fileName?: string): wijmo.xlsx.Workbook;
        private static _cs;
        /**
         * Asynchronously saves the content of a {@link FlexGrid} to a file.
         *
         * This method requires JSZip 3.0.
         *
         * The return value depends on the {@link asyncWorkbook} parameter. If it is false (default) then the
         * method returns the {@link Workbook} instance. If it is true then the method returns a null value
         * and the {@link Workbook} instance should be obtained in the {@link onSaved} callback.
         *
         * If {@link asyncWorkbook} parameter is true then, once started, the task will be automatically
         * restarted when changes in the grid are detected.
         *
         * @param grid FlexGrid that will be saved.
         * @param options {@link IFlexGridXlsxOptions} object specifying the save options.
         * @param fileName Name of the file that will be generated.
         * @param onSaved Callback invoked when the method finishes executing.
         * The callback provides access to the content of the saved workbook
         * (encoded as a base-64 string and passed as a parameter to the callback).
         * @param onError Callback invoked when there are errors saving the file.
         * The error is passed as a parameter to the callback.
         * @param onProgress Callback function that gives feedback about the progress of a task.
         * The function accepts a single argument, the current progress as a number between 0 and 100.
         * Can be used only if the {@link asyncWorkbook} parameter is set to true.
         * @param asyncWorkbook Indicates whether Workbook genaration should be performed asynchronously or not.
         * The default value is false.
         *
         * For example:
         * <pre>
         * wijmo.grid.xlsx.FlexGridXlsxConverter.saveAsync(flexGrid,
         *     { includeColumnHeaders: true }, // options
         *     'FlexGrid.xlsx', // filename
         *     function (base64) { // onSaved
         *         // User can access the base64 string in this callback.
         *         document.getElementByID('export').href = 'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;' + 'base64,' + base64;
         *     },
         *     function (reason) { // onError
         *         // User can catch the failure reason in this callback.
         *         console.log('The reason of save failure is ' + reason);
         *     }
         *  );</pre>
         */
        static saveAsync(grid: wijmo.grid.FlexGrid, options?: IFlexGridXlsxOptions, fileName?: string, onSaved?: (base64: string, workbook: wijmo.xlsx.Workbook) => any, onError?: (reason?: any) => any, onProgress?: (value: number) => void, asyncWorkbook?: boolean): wijmo.xlsx.Workbook;
        /**
         * Cancels the task started by the {@link FlexGridXlsxConverter.saveAsync} method.
         * @param done Callback invoked when the method finishes executing.
         */
        static cancelAsync(done?: () => void): void;
        /**
         * Loads a {@link Workbook} instance or a Blob object containing xlsx
         * file content to the {@link FlexGrid} instance.
         * This method works with JSZip 2.5.
         *
         * For example:
         * <pre>// This sample opens an xlsx file chosen through Open File
         * // dialog and fills FlexGrid with the content of the first
         * // sheet.
         * &nbsp;
         * // HTML
         * &lt;input type="file"
         *     id="importFile"
         *     accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
         * /&gt;
         * &lt;div id="flexHost"&gt;&lt;/&gt;
         * &nbsp;
         * // JavaScript
         * var flexGrid = new wijmo.grid.FlexGrid("#flexHost"),
         *     importFile = document.getElementById('importFile');
         * &nbsp;
         * importFile.addEventListener('change', function () {
         *     loadWorkbook();
         * });
         * &nbsp;
         * function loadWorkbook() {
         *     var reader,
         *         file = importFile.files[0];
         *     if (file) {
         *         reader = new FileReader();
         *         reader.onload = function (e) {
         *             wijmo.grid.xlsx.FlexGridXlsxConverter.load(flexGrid, reader.result,
         *                 { includeColumnHeaders: true });
         *         };
         *         reader.readAsArrayBuffer(file);
         *     }
         * }</pre>
         *
         * @param grid {@link FlexGrid} that loads the {@link Workbook} object.
         * @param workbook A {@link Workbook}, Blob, base-64 string, or ArrayBuffer
         * containing the xlsx file content.
         * @param options {@link IFlexGridXlsxOptions} object specifying the load options.
         */
        static load(grid: wijmo.grid.FlexGrid, workbook: any, options?: IFlexGridXlsxOptions): void;
        /**
         * Asynchronously loads a {@link Workbook} or a Blob representing an xlsx file
         * into a {@link FlexGrid}.
         *
         * This method requires JSZip 3.0.
         *
         * @param grid {@link FlexGrid} that loads the {@link Workbook} object.
         * @param workbook {@link Workbook}, Blob, base-64 string, or ArrayBuffer
         * representing the xlsx file content.
         * @param options {@link IFlexGridXlsxOptions} object specifying the load options.
         * @param onLoaded Callback invoked when the method finishes executing.
         * The callback provides access to the workbook that was loaded
         * (passed as a parameter to the callback).
         * @param onError Callback invoked when there are errors saving the file.
         * The error is passed as a parameter to the callback.
         *
         * For example:
         * <pre>
         * wijmo.grid.xlsx.FlexGridXlsxConverter.loadAsync(grid, blob, null, function (workbook) {
         *      // user can access the loaded workbook instance in this callback.
         *      var app = worksheet.application ;
         *      ...
         * }, function (reason) {
         *      // User can catch the failure reason in this callback.
         *      console.log('The reason of save failure is ' + reason);
         * });
         * </pre>
         */
        static loadAsync(grid: wijmo.grid.FlexGrid, workbook: any, options?: IFlexGridXlsxOptions, onLoaded?: (workbook: wijmo.xlsx.Workbook) => void, onError?: (reason?: any) => any): void;
        private static _saveFlexGridToWorkbook;
        private static _saveContentToWorksheet;
        private static _loadToFlexGrid;
        private static _getColumnHeadersHeight;
        private static _escapePlainText;
        private static _parseFlexGridRowToSheetRow;
        static _parseCellStyle(cellStyle: any, isTableStyle?: boolean): wijmo.xlsx.IWorkbookStyle;
        private static _parseBorder;
        private static _parseEgdeBorder;
        static _parseBorderStyle(borderStyle: wijmo.xlsx.BorderStyle, edge: string, cellStyle: any): void;
        private static _parseToExcelFontFamily;
        private static _parseToExcelFormula;
        private static _parseToTextRuns;
        private static _parseToTextRunFont;
        static _getMeasureCell(panel: wijmo.grid.GridPanel, colIndex: number, patternCell: HTMLDivElement, cellsCache: _CellsCache): HTMLDivElement;
        private static _getColumnSetting;
        private static _toExcelHAlign;
        private static _getColumnCount;
        private static _getRowCount;
        private static _numAlpha;
        private static _getItemType;
        private static _setColumn;
        private static _getItemValue;
        static _getCellStyle(panel: wijmo.grid.GridPanel, fakeCell: HTMLDivElement, r: number, c: number, styleCache: _StyleCache | null): CSSStyleDeclaration;
        private static _parseTextRunsToHTML;
        private static _extend;
        private static _checkParentCollapsed;
        private static _getColSpan;
        private static _getRenderColumn;
        private static _getMergedRange;
        private static _isFormula;
    }
    /**
     * Represents arguments of the IFlexGridXlsxOptions.formatItem callback.
     */
    class XlsxFormatItemEventArgs extends wijmo.grid.CellRangeEventArgs {
        private _cell;
        private _patternCell;
        private _xlsxCell;
        private _cellsCache;
        private _styleCache;
        constructor(panel: wijmo.grid.GridPanel, rng: wijmo.grid.CellRange, cell: HTMLDivElement, patternCell: HTMLDivElement, cellsCache: _CellsCache, styleCache: _StyleCache, xlsxCell: wijmo.xlsx.IWorkbookCell);
        /**
             * If IFlexGridXlsxOptions.includeCellStyles is set to true then contains a
         * reference to the element that represents the formatted grid cell; otherwise, a null value.
         *
         */
        readonly cell: HTMLElement;
        /**
         * Contains an exporting cell representation. Initially it contains a default cell representation created
         * by FlexGrid export, and can be modified by the event handler to customize its final content. For example,
         * the xlsxCell.value property can be updated to modify a cell content, xlsxCell.style to modify cell's style,
         * and so on.
         */
        xlsxCell: wijmo.xlsx.IWorkbookCell;
        /**
         * Returns a cell with a custom formatting applied (formatItem event, cell templates).
         * This method is useful when export of custom formatting is disabled
         * (IFlexGridXlsxOptions.includeCellStyles=false), but you need
         * to export a custom content and/or style for a certain cells.
         */
        getFormattedCell(): HTMLElement;
    }
    class _StyleCache {
        private _cache;
        private _max;
        private _size;
        constructor(maxSize: number);
        add(key: string, value: CSSStyleDeclaration): void;
        clear(): void;
        getValue(key: string): CSSStyleDeclaration;
        hasKey(key: string): boolean;
        private _cloneStyle;
    }
    /**
     * Defines additional worksheet properties that can be accesses via the dynamic <b>wj_sheetInfo</b> property
     * of the {@link FlexGrid} instance.
     */
    interface IExtendedSheetInfo {
        /**
         * The sheet name.
         */
        name: string;
        /**
         * Sheet visibility.
         */
        visible: boolean;
        /**
         * Styled cells in the sheet
         */
        styledCells: any;
        /**
         * Merged ranges in the sheet
         */
        mergedRanges: wijmo.grid.CellRange[];
        /**
         * Contains an array of font names used in the sheet.
         */
        fonts: string[];
        /**
         * The tables in this worksheet.
         */
        tables: wijmo.xlsx.WorkbookTable[];
        /**
         * A function that evaluates the formula of cell.
         */
        evaluateFormula?: Function;
    }
    /**
     * FlexGrid Xlsx conversion options
     */
    interface IFlexGridXlsxOptions {
        /**
         * The index of the sheet in the workbook.  It indicates to import which sheet.
         */
        sheetIndex?: number;
        /**
         * The name of the sheet.
         * It indicates to import which sheet for importing.  If the sheetIndex and sheetName are both setting, the priority of sheetName is higher than sheetIndex.
         * It sets the name of worksheet for exporting.
         */
        sheetName?: string;
        /**
         * The visible of the sheet.
         */
        sheetVisible?: boolean;
        /**
         * Indicates whether to include column headers as first rows in the generated xlsx file.
         */
        includeColumnHeaders?: boolean;
        /**
         * Indicates whether to include column headers as first rows in the generated xlsx file.
         */
        includeRowHeaders?: boolean;
        /**
         * Indicates whether cells styling should be included in the generated xlsx file.
         */
        includeCellStyles?: boolean;
        /**
         * Index or name of the active sheet in the xlsx file.
         */
        activeWorksheet?: any;
        /**
         * A callback to indicate which columns of FlexGrid need be included or omitted during exporting.
         *
         * For example:
         * <pre>// This sample excludes the 'country' column from export.
         * &nbsp;
         * // JavaScript
         * wijmo.grid.xlsx.FlexGridXlsxConverter.save(grid, {
         *   includeColumns: function(column) {
         *      return column.binding !== 'country';
         *   }
         * }</pre>
         */
        includeColumns?: (column: wijmo.grid.Column) => boolean;
        /**
         * An optional callback which is called for every exported cell and allows to perform transformations
         * of exported cell value and style.
         * The callback is called irrespectively of the 'includeCellStyles' property value.
         * It has a single parameter of the {@link XlsxFormatItemEventArgs} type that
         * provides both information about the source grid cell and an {@link IWorkbookCell} object
         * defining its representation in the exported file, which can be customized in the callback.
         */
        formatItem?: (args: XlsxFormatItemEventArgs) => void;
        /**
         * When turned on, decreases the export time by activating the cell styles caching if {@link IFlexGridXlsxOptions.includeCellStyles} property is enabled.
         * In typical scenarios it allows to decrease the export time by several times.
         *
         * The combination of cell's inline style specific properties, own CSS classes and CSS classes of row containing the cell is used as
         * the cache tag. Before the cell style is calculated, the cache is checked first, and if the style associated with the tag is found there,
         * it's taken from there and doesn't get recalculated.
         *
         * Using this mode can make the export slower when considerable amount of cells have the unique set of CSS classes and inline styles.
         * Also, when pseudo classes like :first-child and :nth-child are used to style the cells and rows, the cell styles can be determined
         * incorrectly.
         *
         * The default value is <b>true</b>.
         */
        quickCellStyles?: boolean;
    }
    type _CellsCache = HTMLDivElement[][];
}
declare module wijmo.grid.xlsx {
}

declare var PDFDocument: {
    prototype: _IPdfKitDocument;
    new (options?: _IPdfKitDocumentOptions): _IPdfKitDocument;
};
interface _IPdfKitDocument {
    x: number;
    y: number;
    _ctm: number[];
    compress: boolean;
    info: _IPdfKitDocumentInfo;
    options: _IPdfKitDocumentOptions;
    page: _IPdfKitPage;
    version: 1.3 | 1.4 | 1.5 | 1.6 | 1.7;
    addPage(options?: _IPdfKitPageOptions): _IPdfKitDocument;
    bufferedPageRange(): {
        start: number;
        count: number;
    };
    flushPages(): void;
    switchToPage(pageNumber: number): _IPdfKitPage;
    end(): boolean;
    lineGap(value: number): _IPdfKitDocument;
    currentLineGap(): number;
    currentLineHeight(includeGap?: boolean): number;
    widthOfString(value: string, options?: _IPdfKitWidthOfStringOptions): number;
    heightOfString(value: string, options?: _IPdfKitMeasurementTextOptions): number;
    moveDown(lines: number): _IPdfKitDocument;
    moveUp(lines: number): _IPdfKitDocument;
    text(text: string, options?: _IPdfKitTextOptions): _IPdfKitDocument;
    text(text: string, x?: number, y?: number, options?: _IPdfKitTextOptions): _IPdfKitDocument;
    textAndMeasure(text: string, x: number, y: number, options: _IPdfKitMeasurementTextOptions, measureOnly?: boolean): _IPdfKitTextSize;
    currentFontAscender(): number;
    currentFontBBox(): _IPdfKitFontBBox;
    currentFontSize(): number;
    font(name: string, size?: number): _IPdfKitDocument;
    font(src: ArrayBuffer, size?: number): _IPdfKitDocument;
    font(src: ArrayBuffer, fontFamily: string, size?: number): _IPdfKitDocument;
    fontSize(size: number): _IPdfKitDocument;
    registerFont(name: string, standardFontName: string): _IPdfKitDocument;
    registerFont(name: string, src: ArrayBuffer, fontFamily?: string): _IPdfKitDocument;
    image(URI: string | _IPdfKitImage, options?: _IPdfKitImageOptions): _IPdfKitDocument;
    image(URI: string | _IPdfKitImage, x?: number, y?: number, options?: _IPdfKitImageOptions): _IPdfKitDocument;
    openImage(URI: string): _IPdfKitImage;
    on(eventName: string, handler: Function): _IPdfKitDocument;
    on(eventName: 'data', handler: (chunk: any) => {}): _IPdfKitDocument;
    removeAllListeners(type: string): _IPdfKitDocument;
    removeListener(type: string, listener: Function): _IPdfKitDocument;
    fill(colorOrRule: string): _IPdfKitDocument;
    fill(color: string, rule?: string): _IPdfKitDocument;
    fill(color: number[], rule?: string): _IPdfKitDocument;
    fill(color: _IPdfKitGradient, rule?: string): _IPdfKitDocument;
    fillAndStroke(rule?: string): _IPdfKitDocument;
    fillAndStroke(fillColor: string, strokeColor: string, rule?: string): _IPdfKitDocument;
    fillAndStroke(fillColor: number[], strokeColor: number[], rule?: string): _IPdfKitDocument;
    fillAndStroke(fillColor: _IPdfKitGradient, strokeColor: _IPdfKitGradient, rule?: string): _IPdfKitDocument;
    fillColor(color: string, opacity?: number): _IPdfKitDocument;
    fillColor(color: number[], opacity?: number): _IPdfKitDocument;
    fillColor(color: _IPdfKitGradient, opacity?: number): _IPdfKitDocument;
    strokeColor(color: string, opacity?: number): _IPdfKitDocument;
    strokeColor(color: number[], opacity?: number): _IPdfKitDocument;
    strokeColor(color: _IPdfKitGradient, opacity?: number): _IPdfKitDocument;
    fillOpacity(opacity: number): _IPdfKitDocument;
    strokeOpacity(opacity: number): _IPdfKitDocument;
    opacity(opacity: number): _IPdfKitDocument;
    linearGradient(x1: number, y1: number, x2: number, y2: number): _IPdfKitGradient;
    radialGradient(x1: number, y1: number, r1: number, x2: number, y2: number, r2: number): _IPdfKitGradient;
    closePath(): _IPdfKitDocument;
    clip(rule?: string): _IPdfKitDocument;
    bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): _IPdfKitDocument;
    quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): _IPdfKitDocument;
    circle(x: number, y: number, radius: number): _IPdfKitDocument;
    ellipse(x: number, y: number, r1: number, r2?: number): _IPdfKitDocument;
    lineTo(x: number, y: number): _IPdfKitDocument;
    lineWidth(width: number): _IPdfKitDocument;
    moveTo(x: number, y: number): _IPdfKitDocument;
    path(path: string): _IPdfKitDocument;
    rect(x: number, y: number, w: number, h: number): _IPdfKitDocument;
    roundedRect(x: number, y: number, w: number, h: number, r?: number): _IPdfKitDocument;
    polygon(...points: number[][]): _IPdfKitDocument;
    lineCap(value: any): _IPdfKitDocument;
    lineJoin(value: any): _IPdfKitDocument;
    miterLimit(value: number): _IPdfKitDocument;
    dash(length: number, options?: _IPdfKitDashOptions): _IPdfKitDocument;
    undash(): _IPdfKitDocument;
    stroke(color?: string): _IPdfKitDocument;
    stroke(color?: number[]): _IPdfKitDocument;
    stroke(color?: _IPdfKitGradient): _IPdfKitDocument;
    scale(xFactor: number, yFactor: number, options?: _IPdfKitOrigin): _IPdfKitDocument;
    scale(factor: number): _IPdfKitDocument;
    translate(x: number, y: number): _IPdfKitDocument;
    transform(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number): _IPdfKitDocument;
    rotate(angle: number, options?: _IPdfKitOrigin): _IPdfKitDocument;
    restore(): _IPdfKitDocument;
    save(): _IPdfKitDocument;
}
interface _IPdfKitPageOptions {
    layout?: string;
    margin?: number;
    margins?: _IPdfKitPageMargins;
    size?: any;
}
interface _IPdfKitPage {
    document: _IPdfKitDocument;
    width: number;
    height: number;
    margins: _IPdfKitPageMargins;
    size: any;
    layout: string;
    originalMargins: _IPdfKitPageMargins;
}
interface _IPdfKitDocumentOptions extends _IPdfKitPageOptions {
    autoFirstPage?: boolean;
    bufferPages?: boolean;
    compress?: boolean;
    info?: _IPdfKitDocumentInfo;
    pdfVersion?: _PdfKitVersion;
    security?: {
        new (document: typeof PDFDocument, options: _IPdfKitDocumentOptions): any;
    };
    userPassword?: string;
    ownerPassword?: string;
    permissions?: {
        printing?: _PdfKitPrintPermission;
        modifying?: boolean;
        copying?: boolean;
        annotating?: boolean;
        fillingForms?: boolean;
        contentAccessibility?: boolean;
        documentAssembly?: boolean;
    };
    pageAdding?: (document: _IPdfKitDocument, options: _IPdfKitPageOptions) => void;
    pageAdded?: (document: _IPdfKitDocument, pageIndex: number) => void;
}
interface _IPdfKitDocumentInfo {
    Author?: string;
    CreationDate?: Date;
    Keywords?: string;
    ModDate?: Date;
    Subject?: string;
    Title?: string;
}
interface _IPdfKitPageMargins {
    bottom: number;
    left: number;
    right: number;
    top: number;
}
interface _IPdfKitTextOptions {
    align?: string;
    lineBreak?: boolean;
    width?: number;
    height?: number;
    ellipsis?: any;
    columns?: number;
    columnGap?: number;
    indent?: number;
    paragraphGap?: number;
    lineGap?: number;
    wordSpacing?: number;
    characterSpacing?: number;
    fill?: boolean;
    stroke?: boolean;
    link?: string;
    underline?: boolean;
    strike?: boolean;
    continued?: boolean;
}
interface _IPdfKitDashOptions {
    phase?: number;
    space?: number;
}
interface _IPdfKitMeasurementTextOptions extends _IPdfKitTextOptions {
    includeLastLineExternalLeading?: boolean;
}
interface _IPdfKitWidthOfStringOptions {
    characterSpacing?: number;
}
interface _IPdfKitImage {
    width: number;
    height: number;
}
interface _IPdfKitImageOptions {
    width?: number;
    height?: number;
    scale?: number;
    fit?: number[];
    align?: string;
    valign?: string;
}
interface _IPdfKitGradient {
    stop(pos: number, color: any, opacity?: number): _IPdfKitGradient;
}
interface _IPdfKitOrigin {
    origin?: number[];
}
interface _IPdfKitTextSize {
    width?: number;
    height?: number;
    charCount?: number;
}
interface _IPdfKitFontBBox {
    llx: number;
    lly: number;
    urx: number;
    ury: number;
}
declare type _PdfKitPrintPermission = 'lowResolution' | 'highResolution';
declare type _PdfKitVersion = '1.3' | '1.4' | '1.5' | '1.6' | '1.7' | '1.7ext3';
declare module wijmo.pdf {
    var __c1pdfkitIsModule: any;
}
declare module wijmo.pdf {
    function softPdfSecurity(): typeof wijmo.pdf.security;
}
declare module wijmo.pdf {
    class _PdfSvgPathHelper {
        static offset(path: string, offset: wijmo.Point): string;
        static scale(path: string, scale: number): string;
        private static _processPath;
        private static _getTokenizer;
        private static _updateOffset;
    }
}
declare module wijmo.pdf {
    class _SafeColor extends wijmo.Color {
        constructor(color: string);
        _parse(c: string): boolean;
        static fromString(value: string): wijmo.Color;
    }
}
declare module wijmo.pdf {
    /**
     * Represents the dash pattern used to stroke paths.
     */
    class PdfDashPattern {
        private _dash;
        private _gap;
        private _phase;
        /**
        * Initializes a new instance of the {@link PdfDashPattern} class.
        *
        * @param dash The length of alternating dashes, in points.
        * @param gap The length of alternating gaps, in points.
        * @param phase The distance in the dash pattern to start the dash at, in points.
        */
        constructor(dash?: number, gap?: number, phase?: number);
        /**
        * Gets or sets the length of alternating dashes, in points.
        * The default value is null which indicates no dash pattern, but a solid line.
        */
        dash: number;
        /**
        * Gets or sets the length of alternating gaps, in points.
        * The default value is equal to {@link dash} which indicates that dashes and gaps will
        * have the same length.
        */
        gap: number;
        /**
        * Gets or sets the distance in the dash pattern to start the dash at, in points.
        * The default value is 0.
        */
        phase: number;
        /**
        * Creates a copy of this {@link PdfDashPattern}.
        * @return A copy of this dash pattern.
        */
        clone(): PdfDashPattern;
        /**
        * Determines whether the specified {@link PdfDashPattern} instance is equal
        * to the current one.
        *
        * @param value {@link PdfDashPattern} to compare.
        * @return true if the specified object is equal to the current one, otherwise false.
        */
        equals(value: PdfDashPattern): boolean;
    }
}
declare module wijmo.pdf {
    /**
    * Provides arguments for the {@link PdfDocument.end} event.
    */
    class PdfDocumentEndedEventArgs extends wijmo.EventArgs {
        private _blob;
        private _chunks;
        /**
        * Initializes a new instance of the {@link PdfDocumentEndedEventArgs} class.
        *
        * @param chunks An array of chunks.
        */
        constructor(chunks: Uint8Array[]);
        /**
        * Gets a Blob object that contains the document data.
        */
        readonly blob: Blob;
        /**
        * Gets the underlying array of buffers that contains the document data.
        */
        readonly chunks: Uint8Array[];
    }
}
declare module wijmo.pdf {
    /**
    * Specifies the shape that shall be used at the ends of open subpaths
    * (and dashes, if any) when they are stroked.
    */
    enum PdfLineCapStyle {
        /**
        * The stroke is squared off at the endpoint of the path.
        */
        Butt = 0,
        /**
        * A semicircular arc with a diameter equal to the line width is
        * drawn around the endpoint and is filled in.
        */
        Round = 1,
        /**
        * The stroke continues beyond the endpoint of the path for a
        * distance equal to the half of the line width and is squared off.
        */
        Square = 2
    }
    /**
    * Specifies the shape to be used at the corners of paths that are stroked.
    */
    enum PdfLineJoinStyle {
        /**
        * The outer edges of the strokes for the two segments are extended
        * until they meet at an angle.
        */
        Miter = 0,
        /**
        * An arc of a circle with a diameter equal to the line width is drawn
        * around the point where the two segments meet.
        */
        Round = 1,
        /**
        * The two segments are finished with butt caps and the resulting notch
        * beyond the ends of the segments is filled with a triangle.
        */
        Bevel = 2
    }
    /**
    * Specifies a rule that determines if a point falls inside the enclosed path.
    */
    enum PdfFillRule {
        /**
        * Non-zero rule.
        */
        NonZero = 0,
        /**
        * Even-odd rule.
        */
        EvenOdd = 1
    }
    /**
    * Specifies the page orientation.
    */
    enum PdfPageOrientation {
        /**
        * Portrait orientation.
        */
        Portrait = 0,
        /**
        * Landscape orientation.
        */
        Landscape = 1
    }
    /**
    * Specifies the horizontal alignment of the image.
    */
    enum PdfImageHorizontalAlign {
        /**
        * Aligns the image to the left edge of the drawing area.
        */
        Left = 0,
        /**
        * Aligns the image in the middle of the drawing area.
        */
        Center = 1,
        /**
        * Aligns the image to the right edge of the drawing area.
        */
        Right = 2
    }
    /**
    * Specifies the vertical alignment of the image.
    */
    enum PdfImageVerticalAlign {
        /**
        * Aligns the image to the top edge of the drawing area.
        */
        Top = 0,
        /**
        * Aligns the image in the middle of the drawing area.
        */
        Center = 1,
        /**
        * Aligns the image to the bottom edge of the drawing area.
        */
        Bottom = 2
    }
    /**
    * Specifies the horizontal alignment of text content.
    */
    enum PdfTextHorizontalAlign {
        /**
        * Text is aligned to the left.
        */
        Left = 0,
        /**
        * Text is centered.
        */
        Center = 1,
        /**
        * Text is aligned to the right.
        */
        Right = 2,
        /**
        * Text is justified.
        */
        Justify = 3
    }
    enum _PdfTextBaseline {
        Top = 0,
        Alphabetic = 1
    }
    /**
    * Specifies the page size, in points.
    */
    enum PdfPageSize {
        /**
        * Represents the A0 page size.
        */
        A0 = 0,
        /**
        * Represents the A1 page size.
        */
        A1 = 1,
        /**
        * Represents the A2 page size.
        */
        A2 = 2,
        /**
        * Represents the A3 page size.
        */
        A3 = 3,
        /**
        * Represents the A4 page size.
        */
        A4 = 4,
        /**
        * Represents the A5 page size.
        */
        A5 = 5,
        /**
        * Represents the A6 page size.
        */
        A6 = 6,
        /**
        * Represents the A7 page size.
        */
        A7 = 7,
        /**
        * Represents the A8 page size.
        */
        A8 = 8,
        /**
        * Represents the A9 page size.
        */
        A9 = 9,
        /**
        * Represents the A10 page size.
        */
        A10 = 10,
        /**
        * Represents the B0 page size.
        */
        B0 = 11,
        /**
        * Represents the B1 page size.
        */
        B1 = 12,
        /**
        * Represents the B2 page size.
        */
        B2 = 13,
        /**
        * Represents the B3 page size.
        */
        B3 = 14,
        /**
        * Represents the B4 page size.
        */
        B4 = 15,
        /**
        * Represents the B5 page size.
        */
        B5 = 16,
        /**
        * Represents the B6 page size.
        */
        B6 = 17,
        /**
        * Represents the B7 page size.
        */
        B7 = 18,
        /**
        * Represents the B8 page size.
        */
        B8 = 19,
        /**
        * Represents the B9 page size.
        */
        B9 = 20,
        /**
        * Represents the B10 page size.
        */
        B10 = 21,
        /**
        * Represents the C0 page size.
        */
        C0 = 22,
        /**
        * Represents the C1 page size.
        */
        C1 = 23,
        /**
        * Represents the C2 page size.
        */
        C2 = 24,
        /**
        * Represents the C3 page size.
        */
        C3 = 25,
        /**
        * Represents the C4 page size.
        */
        C4 = 26,
        /**
        * Represents the C5 page size.
        */
        C5 = 27,
        /**
        * Represents the C6 page size.
        */
        C6 = 28,
        /**
        * Represents the C7 page size.
        */
        C7 = 29,
        /**
        * Represents the C8 page size.
        */
        C8 = 30,
        /**
        * Represents the C9 page size.
        */
        C9 = 31,
        /**
        * Represents the C10 page size.
        */
        C10 = 32,
        /**
        * Represents the RA0 page size.
        */
        RA0 = 33,
        /**
        * Represents the RA1 page size.
        */
        RA1 = 34,
        /**
        * Represents the RA2 page size.
        */
        RA2 = 35,
        /**
        * Represents the RA3 page size.
        */
        RA3 = 36,
        /**
        * Represents the RA4 page size.
        */
        RA4 = 37,
        /**
        * Represents the SRA0 page size.
        */
        SRA0 = 38,
        /**
        * Represents the SRA1 page size.
        */
        SRA1 = 39,
        /**
        * Represents the SRA2 page size.
        */
        SRA2 = 40,
        /**
        * Represents the SRA3 page size.
        */
        SRA3 = 41,
        /**
        * Represents the SRA4 page size.
        */
        SRA4 = 42,
        /**
        * Represents the executive page size.
        */
        Executive = 43,
        /**
        * Represents the folio page size.
        */
        Folio = 44,
        /**
        * Represents the legal page size.
        */
        Legal = 45,
        /**
        * Represents the letter page size.
        */
        Letter = 46,
        /**
        * Represents the tabloid page size.
        */
        Tabloid = 47
    }
    /**
    * Specifies PDF printing permisson.
    */
    enum PdfPrintPermission {
        /**
        * Printing is not allowed.
        */
        NotAllowed = 0,
        /**
        * Printing is limited to a low-level representation of the appearance, possibly of degraded quality.
        */
        AllowLowResolution = 1,
        /**
        * Print the document to a representation from which a faithful digital copy of the PDF content could be generated.
        */
        AllowHighResolution = 2
    }
    /**
    * Specifies PDF file version.
    */
    enum PdfVersion {
        /**
        * PDF version 1.3.
        */
        v1_3 = 0,
        /**
        * PDF version 1.4.
        */
        v1_4 = 1,
        /**
        * PDF version 1.5.
        */
        v1_5 = 2,
        /**
        * PDF version 1.6.
        */
        v1_6 = 3,
        /**
        * PDF version 1.7.
        */
        v1_7 = 4,
        /**
        * PDF version 1.7 ExtensionLevel 3.
        */
        v1_7Ext3 = 5
    }
}
declare module wijmo.pdf {
    var _Errors: {
        InvalidArg: (name: string) => string;
        InvalidFormat: (value: string) => string;
        ValueCannotBeEmpty: (name: string) => string;
        PathStarted: string;
        BufferPagesMustBeEnabled: string;
        AbstractMethod: string;
        FontNameMustBeSet: string;
        FontSourceMustBeStringArrayBuffer: string;
        FontSourceMustBeString: string;
        FontSourceMustBeArrayBuffer: string;
        EmptyUrl: string;
        UndefinedMimeType: string;
        InvalidImageDataUri: string;
        InvalidImageFormat: string;
        SecurityRequirements: string;
    };
}
declare module wijmo.pdf {
    /**
    * Represents an abstract class that serves as a base class for all brushes.
    * Instances of any class that derives from this class are used to fill areas and text.
    *
    * This class is not intended to be instantiated in your code.
    */
    class PdfBrush {
        /**
        * Creates a copy of this {@link PdfBrush}.
        * @return A copy of this brush.
        */
        clone(): PdfBrush;
        /**
        * Determines whether the specified {@link PdfBrush} instance is equal to the current one.
        *
        * @param value {@link PdfBrush} to compare.
        * @return true if the specified object is equal to the current one, otherwise false.
        */
        equals(value: PdfBrush): boolean;
        _getBrushObject(area: PdfPageArea): any;
    }
}
declare module wijmo.pdf {
    /**
     * Determines an object used to stroke paths and text.
     */
    class PdfPen {
        private _color;
        private _brush;
        private _width;
        private _cap;
        private _join;
        private _miterLimit;
        private _dashPattern;
        /**
        * Initializes a new instance of the {@link PdfPen} class with the specified color or
        * brush or JavaScript object.
        *
        * The first argument can accept the following values:
        * <ul>
        *  <li>{@link wijmo.Color} object or any string acceptable by the {@link wijmo.Color.fromString} method.</li>
        *  <li>{@link PdfBrush} object.</li>
        *  <li>JavaScript object containing initialization properties (all other arguments are ignored).</li>
        * </ul>
        *
        * @param colorOrBrushOrOptions The color or brush or JavaScript object to use.
        * @param width The width to use.
        * @param dashPattern The dash pattern to use.
        * @param cap The line cap style to use.
        * @param join The line join style to use.
        * @param miterLimit The miter limit to use.
        */
        constructor(colorOrBrushOrOptions?: any, width?: number, dashPattern?: PdfDashPattern, cap?: PdfLineCapStyle, join?: PdfLineJoinStyle, miterLimit?: number);
        /**
        * Gets or sets the color used to stroke paths.
        * The default color is black.
        */
        color: wijmo.Color;
        /**
        * Gets or sets the brush used to stroke paths.
        * Takes precedence over the {@link color} property, if defined.
        */
        brush: PdfBrush;
        /**
        * Gets or sets the line width used to stroke paths, in points.
        * The default width is 1.
        */
        width: number;
        /**
        * Gets or sets the shape that shall be used at the open ends of a stroked path.
        * The default value is <b>Butt</b>.
        */
        cap: PdfLineCapStyle;
        /**
        * Gets or sets the shape to be used at the corners of a stroked path.
        * The default value is <b>Miter</b>.
        */
        join: PdfLineJoinStyle;
        /**
        * Determines the maximum value of the miter length to the line width ratio, when the line
        * join is converted from miter to bevel.
        * The default value is 10.
        */
        miterLimit: number;
        /**
        * Gets the dash pattern used to stroke paths.
        * The default value is a solid line.
        */
        dashPattern: PdfDashPattern;
        /**
        * Creates a copy of this {@link PdfPen}.
        * @return A copy of this pen.
        */
        clone(): PdfPen;
        /**
        * Determines whether the specified {@link PdfPen} instance is equal to the current one.
        *
        * @param value {@link PdfPen} to compare.
        * @return true if the specified object is equal to the current one, otherwise false.
        */
        equals(value: PdfPen): boolean;
    }
}
declare module wijmo.pdf {
    /**
     * Represents a font.
     */
    class PdfFont {
        static _DEF_NATIVE_NAME: string;
        static _DEF_FAMILY_NAME: string;
        static _KNOWN_WEIGHTS: {
            'normal': number;
            'bold': number;
            '100': number;
            '200': number;
            '300': number;
            '400': number;
            '500': number;
            '600': number;
            '700': number;
            '800': number;
            '900': number;
        };
        static _KNOWN_STYLES: {
            'normal': number;
            'italic': number;
            'oblique': number;
        };
        static _DEF_PDFKIT_FONT: PdfFont;
        static _DEF_FONT: PdfFont;
        private _family;
        private _size;
        private _style;
        private _weight;
        /**
        * Initializes a new instance of the {@link PdfFont} class.
        *
        * @param family The family name of the font.
        * @param size The size of the font.
        * @param style The style of the font.
        * @param weight The weight of the font.
        */
        constructor(family?: string, size?: number, style?: string, weight?: string);
        /**
        * Gets or sets the family name of the font.
        *
        * The list of the font family names in the order of preferences,
        * separated by commas. Each font family name can be the one that
        * was registered using the {@link PdfDocument.registerFont} method or
        * the name of one of the PDF standard font families: 'courier',
        * 'helvetica', 'symbol', 'times', 'zapfdingbats' or the superfamily
        * name: 'cursive', 'fantasy', 'monospace', 'serif', 'sans-serif'.
        */
        family: string;
        /**
        * Gets or sets the size of the font.
        */
        size: number;
        /**
         * Gets or sets the style of the font.
         *
         * The following values are supported: 'normal', 'italic', 'oblique'.
         */
        style: string;
        /**
         * Gets or sets the weight of the font.
         *
         * The following values are supported: 'normal', 'bold', '100', '200', '300',
         * '400', '500', '600', '700', '800', '900'.
         */
        weight: string;
        /**
        * Creates a copy of this {@link PdfFont}.
        * @return A copy of this font.
        */
        clone(): PdfFont;
        /**
        * Determines whether the specified {@link PdfFont} instance is equal to the current one.
        *
        * @param value {@link PdfFont} to compare.
        * @return true if the specified object is equal to the current one, otherwise false.
        */
        equals(value: PdfFont): boolean;
    }
}
declare module wijmo.pdf {
    /** Infrastructure. */
    interface _IPdfTextFlowCtxState {
        xo: number;
        yo: number;
        lineGap: number;
    }
    /**
    * Represents text settings used by {@link PdfPageArea.drawText} and {@link PdfPageArea.measureText} methods.
    */
    interface IPdfTextSettings {
        /**
        * Determines how text is aligned within the drawing area.
        * The default value is <b>Left</b>.
        */
        align?: PdfTextHorizontalAlign;
        /**
        * Indicates whether line wrapping should be used or not.
        * The property is ignored if {@link IPdfTextSettings.width} is defined.
        * The default value is true.
        */
        lineBreak?: boolean;
        /**
        * Determines the width of the text area in points to which the text should wrap.
        * The default value is undefined which means that the text area will be limited by
        * right margin of the page.
        * Use Infinity to indicate that the text area has an infinite width.
        * If defined, forces the {@link IPdfTextSettings.lineBreak} property to be enabled.
        */
        width?: number;
        /**
        * Determines the height of the drawing area in points to which the text should be clipped.
        * The default value is undefined which means that the text area will be limited by
        * bottom edge of the body section.
        * Use Infinity to indicate that the text area has an infinite height.
        */
        height?: number;
        /**
        * Determines the character to display at the end of the text when it exceeds
        * the given area.The default value is undefined, that is, ellipsis is not displayed.
        * Set to true to use the default character.
        */
        ellipsis?: any;
        /**
        * Determines the number of columns to flow the text into.
        * The default value is 1.
        */
        columns?: number;
        /**
        * Determines the spacing between each column, in points.
        * The default value is 18.
        */
        columnGap?: number;
        /**
        * Determines the value of indentaion in each paragraph of text, in points.
        * The default value is 0.
        */
        indent?: number;
        /**
        * Determines the spacing between paragraphs of text.
        * The default value is 0.
        */
        paragraphGap?: number;
        /**
        * Determines the spacing between lines of text.
        * The default value is 0.
        */
        lineGap?: number;
        /**
        * Determines the spacing between words in the text.
        * The default value is 0.
        */
        wordSpacing?: number;
        /**
        * Determines the spacing between text characters.
        * The default value is 0.
        */
        characterSpacing?: number;
        /**
        * Indicates whether the text should be filled or not.
        * The default value is true.
        */
        fill?: boolean;
        /**
        * Indicates whether the text should be stroked or not.
        * The default value is false.
        */
        stroke?: boolean;
        /**
        * Determines a URL used to create a link annotation (URI action).
        */
        link?: string;
        /**
        * Indicates whether the text should be underlined or not.
        * The default value is false.
        */
        underline?: boolean;
        /**
        * Indicates whether the text should be striked out or not.
        * The default value is false.
        */
        strike?: boolean;
        /**
        * Indicates whether subsequent text should be continued right after that or
        * it will be a new paragraph. If true, the text settings will be retained
        * between drawText calls. It means that options argument will be merged with
        * the one taken from the previous drawText call.
        *
        * The default value is false.
        */
        continued?: boolean;
    }
    /**
    * Represents the settings used by {@link PdfPageArea.drawText} method to draw a text
    * with the specified {@link PdfPen} and {@link PdfBrush}.
    */
    interface IPdfTextDrawSettings extends IPdfTextSettings {
        /**
        * Determines the font to use. If not specified, the default document font will be
        * used ({@link PdfDocument.setFont} method).
        */
        font?: PdfFont;
        /**
        * Determines the pen to stroke the text. If not specified, the default document
        * pen will be used ({@link PdfDocument.setPen} method).
        */
        pen?: PdfPen | wijmo.Color | string;
        /**
        * Determines the brush to fill the text. If not specified, the default document
        * brush will be used ({@link PdfDocument.setBrush} method).
        */
        brush?: PdfBrush | wijmo.Color | string;
        _baseline?: _PdfTextBaseline;
    }
    /**
    * Represents the settings used by {@link PdfPageArea.measureText} method.
    */
    interface IPdfTextMeasurementSettings extends IPdfTextSettings {
        /**
        * Determines whether the last line external leading value should be included into the measurements result.
        * The default value is true.
        */
        includeLastLineExternalLeading?: boolean;
    }
    /**
    * Represents the image opened using {@link PdfPageArea.openImage} method.
    */
    interface IPdfImage {
        /**
        * The width of the image, in pixels.
        */
        width: number;
        /**
        * The height of the image, in pixels.
        */
        height: number;
    }
    /**
     * Represents the image drawing settings used by {@link PdfPageArea.drawImage} method.
     *
     * If neither width nor height options are provided, then the image will be rendered
     * in its original size. If only width is provided, then the image will be scaled
     * proportionally to fit in the provided width. If only height is provided, then the
     * image will be scaled proportionally to fit in the provided height. If both width
     * and height are provided, then image will be stretched to the dimensions depending
     * on the stretchProportionally property.
     */
    interface IPdfImageDrawSettings {
        /**
        * Determines the width of the image, in points.
        */
        width?: number;
        /**
        * Determines the height of the image, in points.
        */
        height?: number;
        /**
        * Indicates whether an image will be stretched proportionally or not, if both width
        * and height options are provided.
        */
        stretchProportionally?: boolean;
        /**
        * Determines the horizontal alignment in case of proportional stretching.
        */
        align?: PdfImageHorizontalAlign;
        /**
        * Determines the vertical alignment in case of proportional stretching.
        */
        vAlign?: PdfImageVerticalAlign;
    }
    /**
    * Represents the settings used by {@link PdfPageArea.drawSvg} method to draw a SVG image.
    */
    interface IPdfSvgDrawSettings extends IPdfImageDrawSettings {
        /**
        * Determines a callback function used to convert a relative URL to a URL that is correct for the current request path.
        * The function gets passed the relative URL as its argument and should return the resolved URL.
        */
        urlResolver?: (url: string) => string;
    }
    /**
    * Represents a range of buffered pages returned by {@link PdfDocument.bufferedPageRange} method.
    */
    interface IPdfBufferedPageRange {
        /**
        * Determines the zero-based index of the first buffered page.
        */
        start: number;
        /**
        * Determines the count of buffered pages.
        */
        count: number;
    }
    /**
    * Represents the font attributes.
    */
    interface IPdfFontAttributes {
        /**
        * Glyphs have finishing strokes, flared or tapering ends, or have actual
        * serifed endings.
        */
        cursive?: boolean;
        /**
        * Fantasy fonts are primarily decorative fonts that contain playful representations
        * of characters.
        */
        fantasy?: boolean;
        /**
        * All glyphs have the same width.
        */
        monospace?: boolean;
        /**
        * Glyphs have finishing strokes, flared or tapering ends, or have actual
        * serifed endings.
        */
        serif?: boolean;
        /**
        * Glyphs have stroke endings that are plain.
        */
        sansSerif?: boolean;
    }
    /**
    * Represents the settings of the font to register by {@link PdfDocument.registerFont} and
    * {@link PdfDocument.registerFontAsync} methods.
    */
    interface IPdfFontFile extends IPdfFontAttributes {
        /**
        * An ArrayBuffer containing binary data or URL to load the font from.
        * Following font formats are supported: TrueType (.ttf), TrueType Collection (.ttc),
        * Datafork TrueType (.dfont).
        */
        source: ArrayBuffer | string;
        /**
        * The name of the font to use.
        */
        name: string;
        /**
        * The style of the font. One of the following values: 'normal', 'italic', 'oblique'.
        */
        style?: string;
        /**
        * The weight of the font. One of the following values: 'normal', 'bold', '100', '200',
        *'300', '400', '500', '600', '700', '800', '900'.
        */
        weight?: string;
        /**
        * An optional parameter determining the TrueType Collection or Datafork TrueType
        * font family.
        */
        family?: string;
    }
    /**
    * Represents the document information used by {@link PdfDocument.info} property.
    */
    interface IPdfDocumentInfo {
        /**
        * Determines the name of the person who created the document.
        */
        author?: string;
        /**
        * Determines the date and time the document was created on.
        */
        creationDate?: Date;
        /**
        * Determines the keywords associated with the document.
        */
        keywords?: string;
        /**
        * Determines the date and time when the document was last modified.
        */
        modDate?: Date;
        /**
        * Determines the subject of the document.
        */
        subject?: string;
        /**
        * Determines the title of the document.
        */
        title?: string;
    }
    /**
    * Represents the page margins.
    */
    interface IPdfPageMargins {
        /**
        * Determines the bottom margin, in points.
        */
        bottom: number;
        /**
        * Determines the left margin, in points.
        */
        left: number;
        /**
        * Determines the right margin, in points.
        */
        right: number;
        /**
        * Determines the top margin, in points.
        */
        top: number;
    }
    /**
    * Represents the page settings.
    */
    interface IPdfPageSettings {
        /**
        * Determines the layout of the page.
        */
        layout?: PdfPageOrientation;
        /**
        * Determines the margins of the page.
        */
        margins?: IPdfPageMargins;
        /**
        * Determines the dimensions of the page.
        * The following values are supported:
        * <ul>
        *  <li><b>{@link PdfPageSize}</b>: predefined sizes.</li>
        *  <li><b>{@link Size}</b>: custom sizes.</li>
        * </ul>
        */
        size?: PdfPageSize | wijmo.Size;
    }
    /**
    * Represents the text measurement information returned by {@link PdfPageArea.measureText} method.
    */
    interface IPdfTextMeasurementInfo {
        /**
        * Determines the text size, in points.
        */
        size: wijmo.Size;
        /**
        * Determines the character count.
        */
        charCount: number;
    }
    /**
    * Represents the initialization settings of a running title of the page, like header and footer.
    */
    interface IPdfRunningTitleOptions {
        /**
        * Represents the height of a running title, in points. To hide the running title, set this property to 0.
        *
        * The default value is 24.
        */
        height?: number;
        /**
        * Represents the spacing between each line of text, in points.
        *
        * The default value is 0.
        */
        lineGap?: number;
        /**
        * Represents the declarative content of a running title.
        */
        declarative?: {
            /**
            * Represents the font of the {@link text}.
            */
            font?: PdfFont;
            /**
            * Represents the text of a running title.
            * May contain up to 3 tabular characters ('\t') which are used for separating the text
            * into the parts that will be aligned within the page area using left, center and right
            * alignment.
            * Two kinds of macros are supported, '&[Page]' and '&[Pages]'. The former one designates
            * the current page index while the latter one designates the page count.
            *
            * For example, for the first page of a document having ten pages, the following string:
            * <pre>
            *    '&[Page]\\&[Pages]\theader\t&[Page]\\&[Pages]'
            * </pre>
            * will be translated to:
            * <pre>
            *    '1\10 header 1\10'
            * </pre>
            */
            text?: string;
            /**
            * Represents the brush used to fill the {@link text}.
            */
            brush?: PdfBrush | wijmo.Color | string;
        };
    }
    /**
    * Represents the {@link PdfDocument} permission settings.
    */
    interface IPdfPermissions {
        /**
        * Determines whether annotating, form filling is allowed.
        * The default value is false.
        */
        annotating?: boolean;
        /**
        * Determines copying text for accessibility is allowed.
        *
        * Not supported in PDF 1.3.
        *
        * The default value is false.
        */
        contentAccessibility?: boolean;
        /**
        * Determines whether copying text or graphics is allowed.
        *
        * The default value is false.
        */
        copying?: boolean;
        /**
        * Determines whether whether assembling document is allowed.
        *
        * Not supported in PDF 1.3.
        *
        * The default value is false.
        */
        documentAssembly?: boolean;
        /**
        * Determines whether form filling and signing is allowed.
        *
        * Not supported in PDF 1.3.
        *
        * The default value is false.
        */
        fillingForms?: boolean;
        /**
        * Determines whether modifying the file is allowed.
        *
        * The default value is false.
        */
        modifying?: boolean;
        /**
        * Determines whether printing is allowed.
        *
        * The {@link PdfPrintPermission.AllowLowResolution} value is equivalent to {@link PdfPrintPermission.AllowHighResolution} in PDF 1.3.
        *
        * The default value is {@link PdfPrintPermission.NotAllowed}.
        */
        printing?: PdfPrintPermission;
    }
    /**
    * Represents the {@link PdfDocument} initialization settings.
    */
    interface IPdfDocumentOptions {
        /**
        * Indicates whether the pages buffering mode is enabled which means that the document's pages
        * can be iterated over using {@link PdfDocument.pageIndex} and {@link PdfDocument.bufferedPageRange}.
        *
        * This property can be set to false only if both {@link header} and {@link footer} are invisible.
        *
        * The default value is true.
        */
        bufferPages?: boolean;
        /**
        * Indicates whether the document compression is enabled.
        *
        * The default value is true.
        */
        compress?: boolean;
        /**
        * Represents the document information, such as author name, document's creation date and so on.
        */
        info?: IPdfDocumentInfo;
        /**
        * Represents the spacing between each line of text, in points.
        *
        * The default value is 0.
        */
        lineGap?: number;
        /**
        * Represents the initialization settings of a header, the page area positioned right below
        * the top margin.
        */
        header?: IPdfRunningTitleOptions;
        /**
        * Represents the initialization settings of a footer, the page area positioned right above
        * the bottom margin.
        */
        footer?: IPdfRunningTitleOptions;
        /**
        * Represents the default page settings for the pages added automatically and for the {@link PdfDocument.addPage} method.
        */
        pageSettings?: IPdfPageSettings;
        /**
        * Represents the PDF owner password.
        *
        * When only owner password is provided, users are able to decrypt and open the document without providing any password,
        * but the access is limited to those operations explicitly permitted according to {@link permissions} settings.
        * Users with owner password have full access to the document.
        *
        * When both owner password and {@link userPassword} are provided, users with user password are able to decrypt the file
        * but only have limited access to the file according to {@link permissions} settings.
        * Users with owner password have full access to the document.
        *
        * The {@link wijmo.pdf.security} module must be added on page to use PDF encryption and permissions settings.
        */
        ownerPassword?: string;
        /**
        * Represents PDF file permissions.
        *
        * To set permissons for the PDF file, you need to provide an {@link ownerPassword} along with the permissions settings.
        * By default, all operations are disallowed. You need to explicitly allow certain operations.
        *
        * The {@link wijmo.pdf.security} module must be added on page to use PDF encryption and permissions settings.
        */
        permissions?: IPdfPermissions;
        /**
        * Represents the PDF user password.
        *
        * When only user password is provided, users with user password are able to decrypt the file and have full access to the document.
        *
        * When both user password and {@link ownerPassword} are provided, users with user password are able to decrypt the file
        * but only have limited access to the file according to {@link permissions} settings.
        * Users with owner password have full access to the document.
        *
        * The {@link wijmo.pdf.security} module must be added on page to use PDF encryption and permissions settings.
        */
        userPassword?: string;
        /**
        * Represents PDF file version.
        *
        * The PDF file version determines encryption algorithm and key length to use:
        * <ul>
        *  <li>{@link PdfVersion.v1_3}, 40-bit RC4.</li>
        *  <li>{@link PdfVersion.v1_4}, 128-bit RC4.</li>
        *  <li>{@link PdfVersion.v1_5}, 128-bit RC4.</li>
        *  <li>{@link PdfVersion.v1_6}, 128-bit AES.</li>
        *  <li>{@link PdfVersion.v1_7}, 128-bit AES.</li>
        *  <li>{@link PdfVersion.v1_7Ext3}, 256-bit AES.</li>
        * </ul>
        *
        * When using PDF version 1.7 ExtensionLevel 3, password is truncated to 127 bytes of its UTF-8 representation.
        * In older versions, password is truncated to 32 bytes, and only Latin-1 characters are allowed.
        *
        * The default value is {@link PdfVersion.v1_3}.
        */
        version?: PdfVersion;
        /**
        * Occurs when the document has been rendered.
        */
        ended?: (sender: PdfDocument, args: PdfDocumentEndedEventArgs) => void;
        /**
        * Occurs when a new page is added to the document.
        */
        pageAdded?: (sender: PdfDocument, args: wijmo.EventArgs) => void;
    }
}
declare module wijmo.pdf {
    var _IE: boolean;
    /**
     * Saves the Blob object as a file.
     * @param blob The Blob object to save.
     * @param fileName The name with which the file is saved.
    */
    function saveBlob(blob: Blob, fileName: string): void;
    /**
    * Converts a point unit value to a pixel unit value.
    *
    * @param value The value to convert.
    * @return The converted value.
    */
    function ptToPx(value: number): number;
    /**
    * Converts a pixel unit value to a point unit value.
    *
    * @param value The value to convert.
    * @return The converted value.
    */
    function pxToPt(value: number): number;
    function _asColor(value: wijmo.Color | string, clone?: boolean): wijmo.Color;
    function _asPdfPen(value: PdfPen | wijmo.Color | string, nullOK?: boolean): PdfPen;
    function _asPdfBrush(value: any, nullOK?: boolean): PdfBrush;
    function _asPdfFont(value: PdfFont, nullOK?: boolean): PdfFont;
    function _asPt(value: any, emptyOK?: boolean, emptyValue?: number): number;
    function _formatMacros(str: string, dict: any): string;
    function _compare(a: any, b: any): boolean;
    function _shallowCopy(src: any): any;
    function _toTitleCase(value: string): string;
}
declare module wijmo.pdf {
    class _XhrHelper {
        static arrayBufferAsync(url: string, success: (xhr: XMLHttpRequest, data: ArrayBuffer) => void, error?: (xhr: XMLHttpRequest) => void): void;
        static arrayBuffer(url: string, error?: (xhr: XMLHttpRequest) => void): ArrayBuffer;
        static text(url: string, error?: (xhr: XMLHttpRequest) => void): string;
        private static _getData;
    }
}
declare module wijmo.pdf {
    class _PdfImageHelper {
        private static DATAURI_CACHE;
        static getDataUri(url: string): string;
        private static _toBase64;
    }
}
declare module wijmo.pdf {
    /**
    * Represents an area of a page with its own coordinate system, where (0, 0) points
    * to the top-left corner.
    * Provides methods for drawing text, images, paths and transformations.
    *
    * This class is not intended to be instantiated in your code.
    */
    class PdfPageArea {
        private _pdfdoc;
        _offset: wijmo.Point;
        private _graphics;
        private _drawingText;
        private _ctxProps;
        /**
        * Initializes a new instance of the {@link PdfPageArea} class.
        */
        constructor();
        /**
        * Gets or sets the X-coordinate (in points) of the current point in the text flow
        * used to draw a text or an image.
        */
        x: number;
        /**
        * Gets or sets the Y-coordinate (in points) of the current point in the text flow
        * used to draw a text or an image.
        */
        y: number;
        /**
        * Gets or sets the spacing between each line of text, in points.
        *
        * The default value is 0.
        */
        lineGap: number;
        /**
        * Gets the height of the area, in points.
        */
        readonly height: number;
        /**
        * Gets the width of the area, in points.
        */
        readonly width: number;
        readonly _heightCtm: number;
        readonly _widthCtm: number;
        /**
        * Gets an object that provides ability to draw paths.
        */
        readonly paths: PdfPaths;
        /**
        * Gets the document object.
        */
        readonly document: PdfDocument;
        /**
        * Draws a string with the given options and returns the measurement information.
        *
        * If <b>options.pen</b>, <b>options.brush</b> or <b>options.font</b> are omitted,
        * the current document's pen, brush or font are used (see {@link PdfDocument.setPen},
        * {@link PdfDocument.setBrush}, and  {@link PdfDocument.setFont}).
        *
        * The string is drawn within the rectangular area for which top-left corner, width
        * and  height are defined by the x, y, <b>options.width</b> and <b>options.height</b>
        * values. If x and y are not provided, the {@link PdfDocument.x} and {@link PdfDocument.y}
        * properties are used instead.
        *
        * The text is wrapped and clipped automatically within the area.
        * If <b>options.height</b> is not provided and the text exceeds the bottom body edge,
        * then a new page will be added to accommodate the text.
        *
        * Finally, the method updates the value of the {@link PdfDocument.x} and {@link PdfDocument.y}
        * properties. Hence, any subsequent text or image starts below this point
        * (depending on the value of <b>options.continued</b>).
        *
        * The measurement result doesn't reflect the fact that text can be split into
        * multiple pages or columns; the text is treated as a single block.
        *
        * @param text The text to draw.
        * @param x The X-coordinate of the point to draw the text at, in points.
        * @param y The Y-coordinate of the point to draw the text at, in points.
        * @param options Determines the text drawing options.
        * @return A {@link IPdfTextMeasurementInfo} object determines the measurement information.
        */
        drawText(text: string, x?: number, y?: number, options?: IPdfTextDrawSettings): IPdfTextMeasurementInfo;
        /**
        * Draws an image in JPG or PNG format with the given options.
        *
        * If x and y are not defined, then {@link x} and {@link y} are used instead.
        *
        * Finally, if the image was drawn in the text flow, the method updates {@link y}.
        * Hence, any subsequent text or image starts below this point.
        *
        * @param src A string containing the URL to get the image from, or the data URI containing a base64 encoded image,
        * or a {@link wijmo.pdf.IPdfImage} object returned by the {@link openImage} method.
        * @param x The x-coordinate of the point to draw the image at, in points.
        * @param y The y-coordinate of the point to draw the image at, in points.
        * @param options Determines the image drawing options.
        * @return The {@link PdfPageArea} object.
        */
        drawImage(src: string | IPdfImage, x?: number, y?: number, options?: IPdfImageDrawSettings): PdfPageArea;
        /**
        * Draws a SVG image with the given options.
        *
        * If x and y are not defined, then {@link x} and {@link y} are used instead.
        *
        * The method uses the values of the width and height attributes of the outermost svg element to determine the
        * scale factor according to the options.width and options.height properties. If any of these attributes are
        * omitted then scaling is not performed and the image will be rendered in its original size.
        *
        * Finally, if the image was drawn in the text flow, the method updates {@link y}.
        * Hence, any subsequent text or image starts below this point.
        * The increment value is defined by the options.height property or by the outermost svg element's height attribute, which comes first.
        * If none of them is provided then {@link y} will stay unchanged.
        *
        * The method supports a limited set of SVG features and provided primarily for rendering wijmo 5 chart controls.
        *
        * @param url A string containing the URL to get the SVG image from or the data URI containing a base64 encoded SVG image.
        * @param x The x-coordinate of the point to draw the image at, in points.
        * @param y The y-coordinate of the point to draw the image at, in points.
        * @param options Determines the SVG image drawing options.
        * @return The {@link PdfPageArea} object.
        */
        drawSvg(url: string, x?: number, y?: number, options?: IPdfSvgDrawSettings): PdfPageArea;
        /**
        * Gets the line height with a given font.
        *
        * If font is not specified, then font used in the current document is used.
        *
        * @param font Font to get the line height.
        * @return The line height, in points.
        */
        lineHeight(font?: PdfFont): number;
        /**
        * Measures a text with the given font and text drawing options without rendering it.
        *
        * If font is not specified, then the font used in the current document is used.
        *
        * The method uses the same text rendering engine as {@link drawText}, so it is tied up
        * in the same way to {@link x} and the right page margin, if options.width is not
        * provided. The measurement result doesn't reflect the fact that text can be split
        * into multiple pages or columns; the text is treated as a single block.
        *
        * @param text Text to measure.
        * @param font Font to be applied on the text.
        * @param options Determines the text drawing options.
        * @return A {@link IPdfTextMeasurementInfo} object determines the measurement information.
        */
        measureText(text: string, font?: PdfFont, options?: IPdfTextMeasurementSettings): IPdfTextMeasurementInfo;
        /**
        * Moves down the {@link y} by a given number of lines using the given font or,
        * using the font of current document, if not specified.
        *
        * @param lines Number of lines to move down.
        * @param font Font to calculate the line height.
        * @return The {@link PdfPageArea} object.
        */
        moveDown(lines?: number, font?: PdfFont): PdfPageArea;
        /**
        * Moves up the {@link y} by a given number of lines using the given font or,
        * using the font of current document, if not specified.
        *
        * @param lines Number of lines to move up.
        * @param font Font to calculate the line height.
        * @return The {@link PdfPageArea} object.
        */
        moveUp(lines?: number, font?: PdfFont): PdfPageArea;
        /**
        * Opens an image in JPG or PNG format.
        *
        * @param url A string containing the URL to get the image from or the data URI containing a base64 encoded image.
        * @return The {@link IPdfImage} object containing image data.
        */
        openImage(url: string): IPdfImage;
        /**
        * Scales the graphic context by a specified scaling factor.
        *
        * The scaling factor value within the range [0, 1] indicates that the size will be
        * decreased.
        * The scaling factor value greater than 1 indicates that the size will be increased.
        *
        * @param xFactor The factor to scale the X dimension.
        * @param yFactor The factor to scale the Y dimension. If it is not provided, it is
        * assumed to be equal to xFactor.
        * @param origin The {@link Point} to scale around, in points. If it is not provided,
        * then the top left corner is used.
        * @return The {@link PdfPageArea} object.
        */
        scale(xFactor: number, yFactor?: number, origin?: wijmo.Point): PdfPageArea;
        /**
        * Translates the graphic context with a given distance.
        *
        * @param x The distance to translate along the X-axis, in points.
        * @param y The distance to translate along the Y-axis, in points.
        * @return The {@link PdfPageArea} object.
        */
        translate(x: number, y: number): PdfPageArea;
        /**
        * Transforms the graphic context with given six numbers which represents a
        * 3x3 transformation matrix.
        *
        * A transformation matrix is written as follows:
        * <table>
        *   <tr><td>a</td><td>b</td><td>0</td></tr>
        *   <tr><td>c</td><td>d</td><td>0</td></tr>
        *   <tr><td>e</td><td>f</td><td>1</td></tr>
        * </table>
        *
        * @param a Value of the first row and first column.
        * @param b Value of the first row and second column.
        * @param c Value of the second row and first column.
        * @param d Value of the second row and second column.
        * @param e Value of the third row and first column.
        * @param f Value of the third row and second column.
        * @return The {@link PdfPageArea} object.
        */
        transform(a: number, b: number, c: number, d: number, e: number, f: number): PdfPageArea;
        /**
        * Rotates the graphic context clockwise by a specified angle.
        *
        * @param angle The rotation angle, in degrees.
        * @param origin The {@link Point} of rotation, in points. If it is not provided,
        * then the top left corner is used.
        */
        rotate(angle: number, origin?: wijmo.Point): PdfPageArea;
        _assertPathStarted(): void;
        _initialize(doc: PdfDocument, xo: number, yo: number): void;
        _isDrawingText(): boolean;
        private _switchCtx;
        private _saveCtx;
        private _textOptionsToNative;
    }
}
declare module wijmo.pdf {
    /**
    * Represents a brush used to fill an area with a color.
    */
    class PdfSolidBrush extends PdfBrush {
        private _color;
        /**
        * Initializes a new instance of the {@link PdfSolidBrush} class.
        *
        * @param color The color of this brush. A {@link wijmo.Color} object or any string
        * acceptable by the {@link wijmo.Color.fromString} method.
        */
        constructor(color?: any);
        /**
        * Gets or sets the color of the brush.
        * The default color is black.
        */
        color: wijmo.Color;
        /**
        * Creates a copy of this {@link PdfSolidBrush}.
        * @return A copy of this brush.
        */
        clone(): PdfSolidBrush;
        /**
        * Determines whether the specified {@link PdfSolidBrush} instance is equal
        * to the current one.
        *
        * @param value {@link PdfSolidBrush} to compare.
        * @return true if the specified object is equal to the current one, otherwise false.
        */
        equals(value: PdfSolidBrush): boolean;
        _getBrushObject(area: PdfPageArea): wijmo.Color;
    }
}
declare module wijmo.pdf {
    /**
    * Represents the declarative content of the running title.
    */
    class PdfRunningTitleDeclarativeContent {
        private _font;
        private _text;
        private _brush;
        /**
        * Initializes a new instance of the {@link PdfRunningTitleDeclarativeContent} class.
        *
        * @param text The text of the running title.
        * @param font Font of the text.
        * @param brushOrColor The {@link PdfBrush} or {@link wijmo.Color} or any string acceptable
        * by the {@link wijmo.Color.fromString} method used to fill the text.
        */
        constructor(text?: string, font?: PdfFont, brushOrColor?: PdfBrush | wijmo.Color | string);
        /**
        * Gets or sets the font of the {@link text}.
        */
        font: PdfFont;
        /**
        * Gets or sets the text of the running title.
        *
        * May contain up to 3 tabular characters ('\t') which are used for separating the text
        * into the parts that will be aligned within the page area using left, center and right
        * alignment.
        * Two kinds of macros are supported, '&[Page]' and '&[Pages]'. The former one designates
        * the current page index while the latter one designates the page count.
        *
        * For example, for the first page of a document having ten pages, the following string:
        * <pre>
        *    '&[Page]\\&[Pages]\theader\t&[Page]\\&[Pages]'
        * </pre>
        * will be translated to:
        * <pre>
        *    '1\10 header 1\10'
        * </pre>
        */
        text: string;
        /**
        * Gets or sets the brush used to fill the {@link text}.
        */
        brush: PdfBrush;
        /**
        * Creates a copy of this {@link PdfRunningTitleDeclarativeContent}.
        * @return A copy of this pen.
        */
        clone(): PdfRunningTitleDeclarativeContent;
        /**
        * Determines whether the specified {@link PdfRunningTitleDeclarativeContent} instance
        * is equal to the current one.
        *
        * @param value {@link PdfRunningTitleDeclarativeContent} to compare.
        * @return true if the specified object is equal to the current one, otherwise false.
        */
        equals(value: PdfRunningTitleDeclarativeContent): boolean;
    }
}
declare module wijmo.pdf {
    /**
    * Represents a running title of the page, like header and footer.
    *
    * This class is not intended to be instantiated in your code.
    */
    class PdfRunningTitle extends PdfPageArea {
        private _height;
        private _declarative;
        _heightChanged: Event<PdfRunningTitle, EventArgs>;
        /**
        * Initializes a new instance of the {@link PdfRunningTitle} class.
        *
        * @param options An optional object containing initialization settings.
        */
        constructor(options?: any);
        /**
        * Gets or sets an object that provides the ability to setup the running title
        * content declaratively.
        */
        declarative: PdfRunningTitleDeclarativeContent;
        /**
        * Gets or sets the height of the running title, in points.
        * To hide the running title, set this property to 0.
        * Changing this property has no effect on previous drawings; they will not be resized
        * or clipped.
        *
        * The default value is 24.
        */
        height: number;
        drawText(text: any, x?: any, y?: any, options?: IPdfTextDrawSettings): IPdfTextMeasurementInfo;
    }
}
declare module wijmo.pdf {
    /**
    * Represents an object which determines a transition point of a gradient.
    */
    class PdfGradientStop {
        private _offset;
        private _color;
        private _opacity;
        /**
        * Initializes a new instance of the {@link PdfGradientStop} class.
        *
        * @param offset The location of the gradient stop on the gradient axis.
        * @param color The color of the gradient stop. A {@link wijmo.Color} object or
        * any string acceptable by the {@link wijmo.Color.fromString} method.
        * @param opacity The opacity of the gradient stop.
        */
        constructor(offset?: number, color?: any, opacity?: number);
        /**
        * Gets or sets the location of the gradient stop on gradient axis of the brush.
        * The value must be in range [0, 1], where 0 indicates that the gradient stop is
        * placed at the beginning of the gradient axis, while 1 indicates that the
        * gradient stop is placed at the end of the gradient axis.
        * The default value is 0.
        */
        offset: number;
        /**
        * Gets or sets the color of the gradient stop.
        * The default color is black.
        */
        color: wijmo.Color;
        /**
        * Gets or sets the opacity of the gradient stop.
        * The value must be in range [0, 1], where 0 indicates that the gradient stop is
        * completely transparent, while 1 indicates that the gradient stop is completely
        * opaque. The default value is 1.
        */
        opacity: number;
        /**
        * Creates a copy of this {@link PdfGradientStop}.
        * @return A copy of this gradient stop.
        */
        clone(): PdfGradientStop;
        /**
        * Determines whether the specified {@link PdfGradientStop} instance is equal to
        * the current one.
        *
        * @param value {@link PdfGradientStop} to compare.
        * @return true if the specified object is equal to the current one, otherwise false.
        */
        equals(value: PdfGradientStop): boolean;
    }
}
declare module wijmo.pdf {
    /**
    * Represents an abstract class that serves as a base class for the
    * {@link PdfLinearGradientBrush} and {@link PdfRadialGradientBrush} classes.
    *
    * This class is not intended to be instantiated in your code.
    */
    class PdfGradientBrush extends PdfBrush {
        private _opacity;
        private _stops;
        /**
        * Initializes a new instance of the {@link PdfGradientBrush} class.
        *
        * @param stops The {@link PdfGradientStop} array to set on this brush.
        * @param opacity The opacity of this brush.
        */
        constructor(stops?: PdfGradientStop[], opacity?: number);
        /**
        * Gets or sets the opacity of the brush.
        * The value must be in range [0, 1], where 0 indicates that the brush is
        * completely transparent and 1 indicates that the brush is completely opaque.
        * The default value is 1.
        */
        opacity: number;
        /**
        * Gets or sets an array of {@link PdfGradientStop} objects representing a color,
        * offset and opacity within the brush's gradient axis.
        * The default value is an empty array.
        */
        stops: PdfGradientStop[];
        /**
        * Determines whether the specified {@link PdfGradientBrush} instance is equal
        * to the current one.
        *
        * @param value {@link PdfGradientBrush} to compare.
        * @return true if the specified object is equal to the current one, otherwise false.
        */
        equals(value: PdfGradientBrush): boolean;
        private _cloneStopsArray;
    }
}
declare module wijmo.pdf {
    /**
    * Represents a brush used to fill an area with a radial gradient.
    */
    class PdfRadialGradientBrush extends PdfGradientBrush {
        private _x1;
        private _y1;
        private _r1;
        private _x2;
        private _y2;
        private _r2;
        /**
        * Initializes a new instance of the {@link PdfRadialGradientBrush} class.
        *
        * @param x1 The X-coordinate of the inner circle's center of the radial gradient.
        * @param y1 The Y-coordinate of the inner circle's center of the radial gradient.
        * @param r1 The radius of the inner circle of the radial gradient.
        * @param x2 The X-coordinate of the outer circle's center of the radial gradient.
        * @param y2 The Y-coordinate of the outer circle's center of the radial gradient.
        * @param r2 The radius of the outer circle of the radial gradient.
        * @param stops The {@link PdfGradientStop} array to set on this brush.
        * @param opacity The opacity of this brush.
        */
        constructor(x1: number, y1: number, r1: number, x2: number, y2: number, r2: number, stops: PdfGradientStop[], opacity?: number);
        /**
        * Gets or sets the X-coordinate of the inner circle's center that represents the
        * starting point of the radial gradient, in page area coordinates, in points.
        */
        x1: number;
        /**
        * Gets or sets the Y-coordinate of the inner circle's center that represents the
        * starting point of the radial gradient, in page area coordinates, in points.
        */
        y1: number;
        /**
        * Gets or sets the radius of the inner circle that represents the starting
        * point of the radial gradient, in page area coordinates, in points.
        */
        r1: number;
        /**
        * Gets or sets the X-coordinate of the outer circle's center that represents the ending point of the radial gradient, in page area coordinates, in points.
        */
        x2: number;
        /**
        * Gets or sets the Y-coordinate of the outer circle's center that represents
        * the ending point of the radial gradient, in page area coordinates, in points.
        */
        y2: number;
        /**
        * Gets or sets the radius of the outer circle that represents the ending point of the
        * radial gradient, in page area coordinates, in points.
        */
        r2: number;
        /**
        * Creates a copy of this {@link PdfRadialGradientBrush}.
        * @return A copy of this brush.
        */
        clone(): PdfRadialGradientBrush;
        /**
        * Determines whether the specified {@link PdfRadialGradientBrush} instance is equal
        * to the current one.
        *
        * @param value {@link PdfRadialGradientBrush} to compare.
        * @return true if the specified object is equal to the current one, otherwise false.
        */
        equals(value: PdfRadialGradientBrush): boolean;
        _getBrushObject(area: PdfPageArea): any;
    }
}
declare module wijmo.pdf {
    /**
    * Represents a brush used to fill an area with a linear gradient.
    */
    class PdfLinearGradientBrush extends PdfGradientBrush {
        private _x1;
        private _y1;
        private _x2;
        private _y2;
        /**
        * Initializes a new instance of the {@link PdfLinearGradientBrush} class.
        *
        * @param x1 The X-coordinate of the starting point of the linear gradient.
        * @param y1 The Y-coordinate of the starting point of the linear gradient.
        * @param x2 The X-coordinate of the ending point of the linear gradient.
        * @param y2 The Y-coordinate of the ending point of the linear gradient.
        * @param stops The {@link PdfGradientStop} array to set on this brush.
        * @param opacity The opacity of this brush.
        */
        constructor(x1: number, y1: number, x2: number, y2: number, stops: PdfGradientStop[], opacity?: number);
        /**
        * Gets or sets the X-coordinate of the starting point of the linear gradient,
        * in page area coordinates, in points.
        */
        x1: number;
        /**
        * Gets or sets the Y-coordinate of the starting point of the linear gradient,
        * in page area coordinates, in points.
        */
        y1: number;
        /**
        * Gets or sets the X-coordinate of the ending point of the linear gradient,
        * in page area coordinates, in points.
        */
        x2: number;
        /**
        * Gets or sets the Y-coordinate of the ending point of the linear gradient,
        * in page area coordinates, in points.
        */
        y2: number;
        /**
        * Creates a copy of this {@link PdfLinearGradientBrush}.
        * @return A copy of this brush.
        */
        clone(): PdfLinearGradientBrush;
        /**
        * Determines whether the specified {@link PdfLinearGradientBrush} instance is equal to
        * the current one.
        *
        * @param value {@link PdfLinearGradientBrush} to compare.
        * @return true if the specified object is equal to the current one, otherwise false.
        */
        equals(value: PdfLinearGradientBrush): boolean;
        _getBrushObject(area: PdfPageArea): any;
    }
}
declare module wijmo.pdf {
    class _PdfFontRegistrar {
        private _fonts;
        private _weightNameToNum;
        private _doc;
        private _findFontCache;
        private _internalFontNames;
        constructor(doc: any);
        registerFont(font: IPdfFontFile): string;
        findFont(name: string, style?: string, weight?: string): string;
        private _normalizeFontSelector;
        private _findFont;
        private _findFontWeightFallback;
        private _makeInternalName;
    }
}
declare module wijmo.pdf {
    /**
    * Represents a PDF document object, based on <a href="https://github.com/foliojs/pdfkit">PDFKit</a> JavaScript library.
    */
    class PdfDocument extends PdfPageArea {
        private _doc;
        private _docInitialized;
        private _compress;
        private _bufferPages;
        private _chunks;
        private _fontReg;
        private _pageIndex;
        private _version;
        private _userPassword;
        private _ownerPassword;
        private _permissions;
        private _ehOnPageAdded;
        private _ehOnPageAdding;
        private _ehOnDocData;
        private _ehOnDocEnding;
        private _ehOnDocEnded;
        private _header;
        private _footer;
        private _graphicsStack;
        private _currentGS;
        private _defPen;
        private _defBrush;
        private _curFont;
        private _defFont;
        /**
        * Initializes a new instance of the {@link PdfDocument} class.
        *
        * @param options An optional object containing initialization settings.
        */
        constructor(options?: IPdfDocumentOptions);
        /**
        * Gets a value that indicates whether the document compression is enabled.
        *
        * This property can be assigned using the {@link IPdfDocumentOptions} object passed to the {@link PdfDocument} constructor.
        *
        * The default value is true.
        */
        readonly compress: boolean;
        /**
        * Gets a value that indicates whether the pages buffering mode is enabled which means
        * that the document's pages can be iterated over using {@link pageIndex} and {@link bufferedPageRange}.
        *
        * This property can be assigned using the {@link IPdfDocumentOptions} object passed to the {@link PdfDocument} constructor.
        * This property can be set to false only if both {@link header} and {@link footer} are invisible.
        *
        * The default value is true.
        */
        readonly bufferPages: boolean;
        /**
        * Gets or sets the document information, such as author name, document's creation
        * date and so on.
        */
        info: IPdfDocumentInfo;
        /**
        * Gets an object that represents a header, the page area positioned right below
        * the top margin.
        */
        readonly header: PdfRunningTitle;
        /**
        * Gets an object that represents a footer, the page area positioned right above
        * the bottom margin.
        */
        readonly footer: PdfRunningTitle;
        /**
        * Gets or sets the index of the current page within the buffered pages range.
        *
        * Use the {@link bufferedPageRange} method to get the range of buffered pages.
        */
        pageIndex: number;
        /**
        * Gets the PDF owner password.
        *
        * This property can be assigned using the {@link IPdfDocumentOptions} object passed to the {@link PdfDocument} constructor.
        */
        readonly ownerPassword: string;
        /**
        * Gets the PDF user password.
        *
        * This property can be assigned using the {@link IPdfDocumentOptions} object passed to the {@link PdfDocument} constructor.
        */
        readonly userPassword: string;
        /**
        * Gets an object that represents the default page settings for the pages added
        * automatically and for the {@link addPage} method.
        */
        pageSettings: IPdfPageSettings;
        /**
        * Gets an object that represents PDF file permissions.
        *
        * This property can be assigned using the {@link IPdfDocumentOptions} object passed to the {@link PdfDocument} constructor.
        * Changing the property after creating PdfDocument will not have any effect.
        */
        readonly permissions: IPdfPermissions;
        /**
        * Gets PDF file version.
        *
        * This property can be assigned using the {@link IPdfDocumentOptions} object passed to the {@link PdfDocument} constructor.
        *
        * The default version is {@link PdfVersion.v1_3}.
        */
        readonly version: PdfVersion;
        /**
        * Occurs when the document has been rendered.
        */
        readonly ended: Event<PdfDocument, PdfDocumentEndedEventArgs>;
        /**
        * Occurs when a new page is added to the document.
        */
        readonly pageAdded: Event<PdfDocument, EventArgs>;
        /**
        * Raises the {@link end} event.
        *
        * @param args A {@link PdfDocumentEndedEventArgs} object that contains the event data.
        */
        onEnded(args: PdfDocumentEndedEventArgs): void;
        /**
        * Raises the {@link pageAdded} event.
        *
        * @param args A {@link EventArgs} object that contains the event data.
        */
        onPageAdded(args: wijmo.EventArgs): void;
        /**
        * Disposes the document.
        */
        dispose(): void;
        /**
        * Gets an object that represents the current page settings (read-only).
        *
        * @return A {@link IPdfPageSettings} object that represents the current page settings.
        */
        readonly currentPageSettings: IPdfPageSettings;
        /**
        * Adds a new page with the given settings.
        *
        * If the settings parameter is omitted, then {@link pageSettings} will be used instead.
        *
        * @param settings Page settings.
        * @return The {@link PdfDocument} object.
        */
        addPage(settings?: IPdfPageSettings): PdfDocument;
        /**
        * Gets the range of buffered pages.
        * @return A {@link IPdfBufferedPageRange} object that represents the range of buffered pages.
        */
        bufferedPageRange(): IPdfBufferedPageRange;
        /**
        * Finishes the document rendering.
        */
        end(): void;
        /**
        * Sets the default document brush.
        * This brush will be used by the {@link PdfPaths.fill}, {@link PdfPaths.fillAndStroke} and
        * {@link drawText} methods, if no specific brush is provided.
        *
        * The brushOrColor argument can accept the following values:
        * <ul>
        *   <li>A {@link PdfBrush} object.</li>
        *   <li>
        *     A {@link wijmo.Color} object or any string acceptable by the {@link wijmo.Color.fromString} method.
        *     In this case, the {@link PdfBrush} object with the specified color will be created internally.
        *    </li>
        * </ul>
        *
        * @param value The brush or color to use.
        * @return The {@link PdfDocument} object.
        */
        setBrush(value: PdfBrush | wijmo.Color | string): PdfDocument;
        /**
        * Sets the default document pen.
        * This pen will be used by the {@link PdfPaths.stroke}, {@link PdfPaths.fillAndStroke}
        * and {@link drawText} methods, if no specific pen is provided.
        *
        * The penOrColor argument can accept the following values:
        * <ul>
        *   <li>A {@link PdfPen} object.</li>
        *   <li>
        *     A {@link wijmo.Color} object or any string acceptable by the {@link wijmo.Color.fromString} method.
        *     In this case, the {@link PdfPen} object with the specified color will be created internally.
        *   </li>
        * </ul>
        *
        * @param value The pen or color to use.
        * @return The {@link PdfDocument} object.
        */
        setPen(value: PdfPen | wijmo.Color | string): PdfDocument;
        /**
        * Sets the document font.
        *
        * If exact font with given style and weight properties is not found then,
        * <ul>
        *   <li>
        *     It tries to search the closest font using
        *     <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight">font weight fallback</a>.
        *   </li>
        *   <li>
        *     If still nothing is found, it tries to find the closest font with other style in following order:
        *     <ul>
        *       <li><b>'italic'</b>: 'oblique', 'normal'.</li>
        *       <li><b>'oblique'</b>: 'italic', 'normal'.</li>
        *       <li><b>'normal'</b>: 'oblique', 'italic'.</li>
        *     </ul>
        *   </li>
        * </ul>
        *
        * @param font The font object to set.
        *
        * @return The {@link PdfDocument} object.
        */
        setFont(font: PdfFont): PdfDocument;
        _getFont(): PdfFont;
        /**
        * Registers a font from a source and associates it with a given font family name
        * and font attributes.
        *
        * @param font The font to register.
        *
        * @return The {@link PdfDocument} object.
        */
        registerFont(font: IPdfFontFile): PdfDocument;
        /**
        * Registers a font from a URL asynchronously and associates it with a given font
        * family name and font attributes.
        *
        * The callback function takes a {@link IPdfFontFile} object as a parameter.
        *
        * @param font The font to register.
        * @param callback A callback function which will be called, when the font has been
        * registered.
        */
        registerFontAsync(font: IPdfFontFile, callback: (font: IPdfFontFile) => void): void;
        /**
        * Saves the state of the graphic context (including current pen, brush and
        * transformation state) and pushes it onto stack.
        *
        * @return The {@link PdfDocument} object.
        */
        saveState(): PdfDocument;
        /**
        * Restores the state from the stack and applies it to the graphic context.
        *
        * @return The {@link PdfDocument} object.
        */
        restoreState(): PdfDocument;
        private _runtimeProperties;
        _copy(key: string, value: any): boolean;
        readonly _document: any;
        _switchTextFlowCtx(state: _IPdfTextFlowCtxState): void;
        _getTextFlowCtxState(): _IPdfTextFlowCtxState;
        _toggleBrush(brush?: PdfBrush): void;
        _togglePen(pen?: PdfPen): void;
        _toggleFont(font?: PdfFont): void;
        private _onDocData;
        private _onDocEnding;
        private _setDocInfo;
        private _onDocEnded;
        private _onPageAdding;
        private _onPageAdded;
        private _assertAreasPathStarted;
        private _pageSettingsToNative;
        private _processHeadersFooters;
        private _renderHeaderFooter;
        private _renderHeaderFooterPart;
        private _setCurBrush;
        private _setCurFont;
        private _setCurPen;
        private _setNativeDocBrush;
        private _resetAreasOffset;
    }
}
declare module wijmo.pdf {
    /**
    * Provides methods for creating graphics paths and drawing them or using them for clipping.
    *
    * Path creation method calls must be finished with the {@link PdfPaths.stroke},
    * {@link PdfPaths.fill}, {@link PdfPaths.fillAndStroke} or {@link PdfPaths.clip} method.
    * Any document methods which don't apply directly to path creation/ drawing/ clipping
    * (changing a pen, drawing a text, saving the graphics state etc) are prohibited to use
    * until the path is finished.
    * The {@link PdfPaths.lineTo}, {@link PdfPaths.bezierCurveTo} and {@link PdfPaths.quadraticCurveTo}
    * methods should not start the path, they must be preceded with the {@link PdfPaths.moveTo}.
    *
    * The methods are chainable:
    * <pre>
    * doc.paths.moveTo(0, 0).lineTo(100, 100).stroke();
    * </pre>
    *
    * This class is not intended to be instantiated in your code.
    */
    class PdfPaths {
        private _doc;
        private _offset;
        private _pathBuffer;
        /**
        * Initializes a new instance of the {@link PdfPaths} class.
        *
        * @param doc Document.
        * @param offset Offset.
        */
        constructor(doc: PdfDocument, offset: wijmo.Point);
        /**
        * Sets a new current point.
        *
        * @param x The X-coordinate of the new point, in points.
        * @param y The Y-coordinate of the new point, in points.
        * @return The {@link PdfPaths} object.
        */
        moveTo(x: number, y: number): PdfPaths;
        /**
        * Draws a line from the current point to a new point.
        *
        * The new current point is (x, y).
        *
        * @param x The X-coordinate of the new point, in points.
        * @param y The Y-coordinate of the new point, in points.
        * @return The {@link PdfPaths} object.
        */
        lineTo(x: number, y: number): PdfPaths;
        /**
        * Draws a quadratic curve from the current point to a new point using the current point
        * and (cpx, cpy) as the control points.
        *
        * The new current point is (x, y).
        *
        * @param cpx The X-coordinate of the control point, in points.
        * @param cpy The Y-coordinate of the control point, in points.
        * @param x The X-coordinate of the new point, in points.
        * @param y The Y-coordinate of the new point, in points.
        * @return The {@link PdfPaths} object.
        */
        quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): PdfPaths;
        /**
        * Draws a bezier curve from the current point to a new point using the (cp1x, cp1y)
        * and (cp2x, cp2y) as the control points.
        *
        * The new current point is (x, y).
        *
        * @param cp1x The X-coordinate of the first control point, in points.
        * @param cp1y The Y-coordinate of the first control point, in points.
        * @param cp2x The X-coordinate of the second control point, in points.
        * @param cp2y The Y-coordinate of the second control point, in points.
        * @param x The X-coordinate of the new point, in points.
        * @param y The Y-coordinate of the new point, in points.
        * @return The {@link PdfPaths} object.
        */
        bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): PdfPaths;
        /**
        * Draws a SVG 1.1 path.
        *
        * @param path The SVG path to draw.
        * @return The {@link PdfPaths} object.
        */
        svgPath(path: string): PdfPaths;
        /**
        * Closes the current path and draws a line from the current point to the initial
        * point of the current path.
        *
        * @return The {@link PdfPaths} object.
        */
        closePath(): PdfPaths;
        /**
        * Draws a rectangle.
        *
        * @param x The X-coordinate of the topleft corner of the rectangle, in points.
        * @param y The Y-coordinate of the topleft corner of the rectangle, in points.
        * @param width The width of the rectangle, in points.
        * @param height The width of the rectangle, in points.
        * @return The {@link PdfPaths} object.
        */
        rect(x: number, y: number, width: number, height: number): PdfPaths;
        /**
        * Draws a rounded rectangle.
        *
        * @param x The X-coordinate of the upper-left corner of the rectangle, in points.
        * @param y The Y-coordinate of the upper-left corner of the rectangle, in points.
        * @param width The width of the rectangle, in points.
        * @param height The width of the rectangle, in points.
        * @param cornerRadius The corner radius of the rectangle, in points. The default value is 0.
        * @return The {@link PdfPaths} object.
        */
        roundedRect(x: number, y: number, width: number, height: number, cornerRadius?: number): PdfPaths;
        /**
        * Draws an ellipse.
        *
        * @param x The X-coordinate of the center of the ellipse, in points.
        * @param y The Y-coordinate of the center of the ellipse, in points.
        * @param radiusX The radius of the ellipse along the X-axis, in points.
        * @param radiusY The radius of the ellipse along the Y-axis, in points.
        * If it is not provided, then it is assumed to be equal to radiusX.
        * @return The {@link PdfPaths} object.
        */
        ellipse(x: number, y: number, radiusX: number, radiusY?: number): PdfPaths;
        /**
        * Draws a circle.
        *
        * @param x The X-coordinate of the center of the circle, in points.
        * @param y The Y-coordinate of the center of the circle, in points.
        * @param radius The radius of the circle, in points.
        * @return The {@link PdfPaths} object.
        */
        circle(x: number, y: number, radius: number): PdfPaths;
        /**
        * Draws a polygon using a given points array.
        *
        * @param points An array of two-elements arrays [x, y] specifying
        * the X and Y coordinates of the point, in points.
        * @return The {@link PdfPaths} object.
        */
        polygon(points: number[][]): PdfPaths;
        /**
        * Creates a clipping path used to limit the regions of the page affected by
        * painting operators.
        *
        * @param rule The fill rule to use.
        * @return The {@link PdfPaths} object.
        */
        clip(rule?: PdfFillRule): PdfPaths;
        /**
        * Fills the path with the specified brush and rule.
        * If brush is not specified, then the default document brush will be used
        * (see the {@link PdfDocument.setBrush} method).
        *
        * The brushOrColor argument can accept the following values:
        * <ul>
        *   <li>A {@link PdfBrush} object.</li>
        *   <li>
        *     A {@link wijmo.Color} object or any string acceptable by the {@link wijmo.Color.fromString} method.
        *     In this case, the {@link PdfBrush} object with the specified color will be created internally.
        *    </li>
        * </ul>
        *
        * @param brushOrColor The brush or color to use.
        * @param rule The fill rule to use.
        * @return The {@link PdfPaths} object.
        */
        fill(brushOrColor?: PdfBrush | wijmo.Color | string, rule?: PdfFillRule): PdfPaths;
        /**
        * Fills and strokes the path with the specified brush, pen and rule.
        * If brush and pen is not specified, then the default document brush and pen will
        * be used (See the {@link PdfDocument.setBrush}, {@link PdfDocument.setPen} methods).
        *
        * The brushOrColor argument can accept the following values:
        * <ul>
        *   <li>A {@link PdfBrush} object.</li>
        *   <li>
        *     A {@link wijmo.Color} object or any string acceptable by the {@link wijmo.Color.fromString} method.
        *     In this case, the {@link PdfBrush} object with the specified color will be created internally.
        *    </li>
        * </ul>
        *
        * The penOrColor argument can accept the following values:
        * <ul>
        *   <li>A {@link PdfPen} object.</li>
        *   <li>
        *     A {@link wijmo.Color} object or any string acceptable by the {@link wijmo.Color.fromString} method.
        *     In this case, the {@link PdfPen} object with the specified color will be created internally.
        *   </li>
        * </ul>
        *
        * @param brushOrColor The brush or color to use.
        * @param penOrColor The pen or color to use.
        * @param rule The fill rule to use.
        * @return The {@link PdfPaths} object.
        */
        fillAndStroke(brushOrColor?: PdfBrush | wijmo.Color | string, penOrColor?: PdfPen | wijmo.Color | string, rule?: PdfFillRule): PdfPaths;
        /**
        * Strokes the path with the specified pen.
        * If pen is not specified, then the default document pen will be used
        * (See the {@link PdfDocument.setPen} method).
        *
        * The penOrColor argument can accept the following values:
        * <ul>
        *   <li>A {@link PdfPen} object.</li>
        *   <li>
        *     A {@link wijmo.Color} object or any string acceptable by the {@link wijmo.Color.fromString} method.
        *     In this case, the {@link PdfPen} object with the specified color will be created internally.
        *   </li>
        * </ul>
        *
        * @param penOrColor The pen or color to use.
        * @return The {@link PdfPaths} object.
        */
        stroke(penOrColor?: PdfPen | wijmo.Color | string): PdfPaths;
        _hasPathBuffer(): boolean;
        private _writePathBuffer;
    }
}
declare module wijmo.pdf {
}
declare module wijmo.pdf {
    type _TDictionary<T> = {
        [key: string]: T;
    };
    function _compressSpaces(value: string): string;
    function _resolveUrlIfRelative(url: string, urlResolver: (url: string) => string): string;
    interface _ISvgCssPropertyValue {
        value: string;
        important: boolean;
    }
    class _SvgCssRule {
        selector: string;
        declarations: _TDictionary<_ISvgCssPropertyValue>;
        constructor(selector: string, declaration: string);
        private _fillDeclarations;
    }
    class _SvgCssHelper {
        static matchesSelector(node: Element, selector: string): boolean;
        static getSpecificity(selector: string): number;
        static getComputedStyle(node: SVGElement, registeredRules: _TDictionary<_SvgCssRule>): _TDictionary<string>;
        static registerFontFace(doc: PdfDocument, rule: _SvgCssRule, urlResolver?: (url: string) => string): void;
    }
}
declare module wijmo.pdf {
    interface _ISvgRenderContext {
        area: PdfPageArea;
        urlResolver: (url: string) => string;
        getElement: (id: string) => _SvgElementBase;
        registerCssRule: (rule: _SvgCssRule) => void;
    }
    class _SvgRenderer {
        private _elementsById;
        private _registeredCssRules;
        private _svg;
        private _doc;
        constructor(svgString: string, area: PdfPageArea, vpWidth?: number, vpHeight?: number, urlResolver?: (url: string) => string);
        readonly root: _SvgSvgElementImpl;
        render(viewPort?: wijmo.Size): void;
        private _parse;
        private _buildTree;
        private _getClassName;
        private _copyAttributes;
        private _getElementById;
        private _registerCssRule;
    }
}
declare module wijmo.pdf {
    enum _SvgRenderMode {
        Render = 0,
        Ignore = 1,
        Clip = 2
    }
    interface _ISvgElementBaseCtor {
        new (ctx: _ISvgRenderContext, node: SVGElement, defRenderMode?: _SvgRenderMode): _SvgElementBase;
    }
    class _SvgElementBase {
        private _children;
        private _attributes;
        private _parent;
        private _style;
        private _ctx;
        private _viewport;
        private _defRenderMode;
        private _curRenderMode;
        constructor(ctx: _ISvgRenderContext, node: SVGElement, defRenderMode?: _SvgRenderMode);
        readonly children: _SvgElementBase[];
        readonly ctx: _ISvgRenderContext;
        parent: _SvgElementBase;
        readonly style: _SvgStyleAttributes;
        viewport: wijmo.Size;
        attr(name: string, value?: any): any;
        appendNode(node: _SvgElementBase): void;
        copyAttributesFrom(el: _SvgElementBase, except?: string[]): void;
        clone(): _SvgElementBase;
        remove(): void;
        clearAttr(name: string): void;
        render(viewPort: wijmo.Size, renderMode?: _SvgRenderMode): void;
        readonly renderMode: _SvgRenderMode;
        protected _render(): void;
        protected _renderContent(): void;
    }
    class _SvgClippableElementBase extends _SvgElementBase {
        private _clipPath;
        constructor(ctx: _ISvgRenderContext, node: SVGElement, defRenderMode?: _SvgRenderMode);
        protected _render(): void;
    }
    class _SvgTransformableElementBase extends _SvgClippableElementBase {
        private _transform;
        constructor(ctx: _ISvgRenderContext, node: SVGElement);
        protected _render(): void;
    }
    class _SvgShapeElementBase extends _SvgTransformableElementBase {
        protected _fill: boolean;
        protected _stroke: boolean;
        protected _renderContent(): void;
        protected _draw(): void;
    }
    class _SvgCircleElementImpl extends _SvgShapeElementBase {
        protected _draw(): void;
    }
    class _SvgEllipseElementImpl extends _SvgShapeElementBase {
        protected _draw(): void;
    }
    class _SvgLineElementImpl extends _SvgShapeElementBase {
        constructor(ctx: _ISvgRenderContext, node: SVGElement);
        protected _draw(): void;
    }
    class _SvgPathElementImpl extends _SvgShapeElementBase {
        private _d;
        constructor(ctx: _ISvgRenderContext, node: SVGElement);
        protected _renderContent(): void;
        protected _draw(): void;
    }
    class _SvgPolylineElementImpl extends _SvgShapeElementBase {
        protected _draw(): boolean;
    }
    class _SvgPolygonElementImpl extends _SvgPolylineElementImpl {
        protected _draw(): boolean;
    }
    class _SvgRectElementImpl extends _SvgShapeElementBase {
        protected _draw(): void;
    }
    class _SvgClipPathElementImpl extends _SvgElementBase {
        constructor(ctx: _ISvgRenderContext, node: SVGElement);
    }
    class _SvgDefsElementImpl extends _SvgClippableElementBase {
        constructor(ctx: _ISvgRenderContext, node: SVGElement);
    }
    class _SvgGElementImpl extends _SvgTransformableElementBase {
    }
    class _SvgLinearGradientElementImpl extends _SvgElementBase {
        private _x1;
        private _x2;
        private _y1;
        private _y2;
        private _gradientUnits;
        constructor(ctx: _ISvgRenderContext, node: SVGElement);
        toBrush(element: _SvgElementBase): PdfLinearGradientBrush;
    }
    class _SvgStopElementImpl extends _SvgElementBase {
        color: _SvgColorAttr;
        opacity: _SvgNumAttr;
        offset: _SvgStrAttr;
        constructor(ctx: _ISvgRenderContext, node: SVGElement);
    }
    class _SvgImageElementImpl extends _SvgTransformableElementBase {
        private _x;
        private _y;
        private _width;
        private _height;
        private _href;
        private _par;
        constructor(ctx: _ISvgRenderContext, node: SVGElement);
        protected _renderContent(): void;
        private _renderSvgImage;
        private _renderRasterImage;
    }
    class _SvgStyleElementImpl extends _SvgElementBase {
        constructor(ctx: _ISvgRenderContext, node: SVGStyleElement);
    }
    class _SvgSvgElementImpl extends _SvgClippableElementBase {
        private _x;
        private _y;
        private _width;
        private _height;
        private _scale;
        private _overflow;
        constructor(ctx: _ISvgRenderContext, node: SVGElement);
        readonly width: _SvgNumAttr;
        readonly height: _SvgNumAttr;
        protected _render(): void;
    }
    class _SvgSymbolElementImpl extends _SvgClippableElementBase {
        constructor(ctx: _ISvgRenderContext, node: SVGElement);
    }
    class _SvgUseElementImpl extends _SvgElementBase {
        private _xlink;
        constructor(ctx: _ISvgRenderContext, node: SVGElement);
        protected _render(): void;
    }
    interface _TextDecorator {
        decoration: _SvgTextDecorationAttr;
        style: _SvgStyleAttributes;
    }
    class _SvgTextElementImpl extends _SvgTransformableElementBase {
        private _x;
        private _y;
        private _dx;
        private _dy;
        private _textDecoration;
        constructor(ctx: _ISvgRenderContext, node: SVGElement);
        protected _render(): void;
        protected _renderContent(): void;
        private _prepareNodes;
    }
    class _SvgTspanElementImpl extends _SvgClippableElementBase {
        _text: string;
        _x: _SvgNumAttr;
        _y: _SvgNumAttr;
        _dx: _SvgNumAttr;
        _dy: _SvgNumAttr;
        _textDecoration: _SvgTextDecorationAttr;
        _decorators: _TextDecorator[];
        _cx: number;
        _cy: number;
        constructor(ctx: _ISvgRenderContext, node: SVGElement, text?: string);
        clone(): _SvgElementBase;
        _setDecorators(value: _TextDecorator[]): void;
        protected _renderContent(): void;
        private _decorate;
    }
}
declare module wijmo.pdf {
    enum _SvgNumConversion {
        Default = 1,
        None = 2,
        Px = 3
    }
    enum _SvgLengthContext {
        Width = 1,
        Height = 2,
        Other = 3
    }
    enum _SvgAttrType {
        Number = 1,
        String = 2
    }
    class _SvgAttr<T> {
        static parseValue(value: any, attrType: _SvgAttrType, viewPort: wijmo.Size, lCtx: _SvgLengthContext, numConv: _SvgNumConversion): any;
        private _owner;
        private _value;
        private _defValue;
        private _propName;
        private _propType;
        private _searchValue;
        private _inheritable;
        private _pCtx;
        private _nc;
        constructor(owner: _SvgElementBase, propName: string, propType: _SvgAttrType, defValue?: any, nc?: _SvgNumConversion, lCtx?: _SvgLengthContext, inheritable?: boolean);
        readonly hasVal: boolean;
        val: T;
        protected readonly _val: any;
        reset(): void;
        protected _parse(value: any, nc?: _SvgNumConversion): any;
    }
    class _SvgNumAttr extends _SvgAttr<number> {
        constructor(owner: _SvgElementBase, propName: string, defValue?: any, nc?: _SvgNumConversion, pCtx?: _SvgLengthContext, inheritable?: boolean);
    }
    class _SvgStrAttr extends _SvgAttr<string> {
        constructor(owner: _SvgElementBase, propName: string, defValue?: any, inheritable?: boolean);
    }
    class _SvgColorAttr extends _SvgAttr<string> {
        constructor(owner: _SvgElementBase, propName: string, defValue?: any, inheritable?: boolean);
        asHref(): string;
        protected _parse(value: any): any;
    }
    class _SvgDashArrayAttr extends _SvgAttr<number[]> {
        constructor(owner: _SvgElementBase);
        protected _parse(value: any): number[];
    }
    class _SvgFillRuleAttr extends _SvgAttr<PdfFillRule> {
        constructor(owner: _SvgElementBase, propName: string);
        protected _parse(value: string): PdfFillRule;
    }
    class _SvgHRefAttr extends _SvgStrAttr {
        constructor(owner: _SvgElementBase, propName: string);
        protected _parse(value: string): string;
    }
    class _SvgIdRefAttr extends _SvgHRefAttr {
        protected _parse(value: string): string;
    }
    class _SvgPointsArrayAttr extends _SvgAttr<wijmo.Point[]> {
        constructor(owner: _SvgElementBase, propName: string);
        protected _parse(value: any): wijmo.Point[];
    }
    class _SvgTransformAttr extends _SvgAttr<((doc: PdfPageArea) => void)[]> {
        constructor(owner: _SvgElementBase);
        apply(element: _SvgElementBase): void;
        protected _parse(value: any): ((doc: PdfPageArea) => void)[];
    }
    class _SvgTextDecorationAttr extends _SvgAttr<string[]> {
        constructor(owner: _SvgElementBase);
        protected _parse(value: any): string[];
    }
    interface _ISvgViewBoxAttr {
        minX: number;
        minY: number;
        width: number;
        height: number;
    }
    class _SvgViewboxAttr extends _SvgAttr<_ISvgViewBoxAttr> {
        constructor(owner: _SvgElementBase);
        protected _parse(value: any): _ISvgViewBoxAttr;
    }
    interface _ISvgPreserveAspectRatioAttr {
        align: string;
        meet: boolean;
    }
    class _SvgPreserveAspectRatioAttr extends _SvgAttr<_ISvgPreserveAspectRatioAttr> {
        constructor(owner: _SvgElementBase);
        protected _parse(value: any): _ISvgPreserveAspectRatioAttr;
    }
    class _SvgScaleAttributes {
        private _owner;
        aspect: _SvgPreserveAspectRatioAttr;
        viewBox: _SvgViewboxAttr;
        constructor(owner: _SvgElementBase);
        apply(element: _SvgElementBase): wijmo.Size;
    }
    class _SvgStrokeAttributes {
        private _owner;
        color: _SvgColorAttr;
        dashArray: _SvgDashArrayAttr;
        dashOffset: _SvgNumAttr;
        lineCap: _SvgStrAttr;
        lineJoin: _SvgStrAttr;
        miterLimit: _SvgNumAttr;
        opacity: _SvgNumAttr;
        width: _SvgNumAttr;
        constructor(owner: _SvgElementBase);
        toPen(element?: _SvgElementBase): PdfPen;
    }
    class _SvgFillAttributes {
        private _owner;
        color: _SvgColorAttr;
        opacity: _SvgNumAttr;
        rule: _SvgFillRuleAttr;
        constructor(owner: _SvgElementBase);
        toBrush(element?: _SvgElementBase): PdfBrush;
    }
    class _SvgFontAttributes {
        private _owner;
        family: _SvgStrAttr;
        size: _SvgAttr<string | number>;
        style: _SvgStrAttr;
        weight: _SvgStrAttr;
        constructor(owner: _SvgElementBase);
        toFont(): PdfFont;
    }
    class _SvgStyleAttributes {
        private _owner;
        fill: _SvgFillAttributes;
        font: _SvgFontAttributes;
        stroke: _SvgStrokeAttributes;
        clipRule: _SvgFillRuleAttr;
        constructor(owner: _SvgElementBase);
        apply(element: _SvgElementBase, fill?: boolean, stroke?: boolean): void;
    }
}

declare module wijmo.pdf.security {
    function Buffer(arg: any, encodingOrOffset?: any, length?: any): void;
}
declare module wijmo.pdf.security {
    function inRange(value: any, rangeGroup: any): boolean;
}
declare module wijmo.pdf.security {
    const isUnassignedCodePoint: (character: any) => boolean;
    const isCommonlyMappedToNothing: (character: any) => boolean;
    const isNonASCIISpaceCharacter: (character: any) => boolean;
    const isProhibitedCharacter: (character: any) => boolean;
    const isBidirectionalRAL: (character: any) => boolean;
    const isBidirectionalL: (character: any) => boolean;
}
declare module wijmo.pdf.security {
    function saslprep(input: any, opts?: any): any;
}
declare module wijmo.pdf.security {
    var CryptoJS: any;
}
declare module wijmo.pdf.security {
    class _PDFSecurity {
        static generateFileID(info?: any): any;
        static generateRandomWordArray(bytes: any): any;
        static create(document: any, options?: any): _PDFSecurity;
        private document;
        private version;
        private dictionary;
        private keyBits;
        private encryptionKey;
        constructor(document: any, options?: any);
        _setupEncryption(options: any): void;
        _setupEncryptionV1V2V4(v: any, encDict: any, options: any): void;
        _setupEncryptionV5(encDict: any, options: any): void;
        getEncryptFn(obj: any, gen: any): (buffer: any) => any;
        end(): void;
    }
}
declare module wijmo.pdf.security {
}

declare module wijmo.grid.pdf {
    function softGrid(): typeof wijmo.grid;
    function softDetail(): typeof wijmo.grid.detail;
    function softMultiRow(): typeof wijmo.grid.multirow;
    function softSheet(): typeof wijmo.grid.sheet;
    function softOlap(): typeof wijmo.olap;
    function softTransposed(): typeof wijmo.grid.transposed;
    function softTransposedMultiRow(): typeof wijmo.grid.transposedmultirow;
}
declare module wijmo.grid.pdf {
    /**
     * Specifies how the grid content should be scaled to fit the page.
     */
    enum ScaleMode {
        /**
         * Render the grid in actual size, breaking into pages as needed.
         */
        ActualSize = 0,
        /**
         * Scale the grid, so that it fits the page width.
         */
        PageWidth = 1,
        /**
         * Scale the grid, so that it fits on a single page.
         */
        SinglePage = 2
    }
    /**
     * Specifies whether the whole grid or just a section should be rendered.
     */
    enum ExportMode {
        /**
         * Exports all the data from grid.
         */
        All = 0,
        /**
         * Exports the current selection only.
         */
        Selection = 1
    }
}
declare module wijmo.grid.pdf {
    /**
     * Represents the look and feel of a cell.
     */
    interface ICellStyle {
        /**
         * Represents the background color of a cell.
         */
        backgroundColor?: string;
        /**
         * Represents the border color of a cell.
         */
        borderColor?: string;
        /**
         * Represents the text color of a cell.
         */
        color?: string;
        /**
         * Represents the font of a cell.
         */
        font?: any;
    }
    /**
     * Represents the look and feel of the {@link FlexGrid} being exported.
     */
    interface IFlexGridStyle {
        /**
         * Specifies the cell style applied to cells within a {@link FlexGrid}.
         */
        cellStyle?: ICellStyle;
        /**
         * Represents the cell style applied to odd-numbered rows of the {@link FlexGrid}.
         */
        altCellStyle?: ICellStyle;
        /**
         * Represents the cell style applied to grouped rows of the {@link FlexGrid}.
         */
        groupCellStyle?: ICellStyle;
        /**
         * Represents the cell style applied to row headers and column headers of
         * the {@link FlexGrid}.
         */
        headerCellStyle?: ICellStyle;
        /**
         * Represents the cell style applied to column footers of the {@link FlexGrid}.
         */
        footerCellStyle?: ICellStyle;
        /**
         * Represents the cell style applied to cells of the {@link FlexGrid} that contain
         * validation errors if the {@link FlexGrid.showErrors} property is enabled.
         */
        errorCellStyle?: ICellStyle;
    }
    /**
     * Represents the settings used by the {@link FlexGridPdfConverter.draw} and
     * {@link FlexGridPdfConverter.drawToPosition} methods.
     */
    interface IFlexGridDrawSettings {
        /**
         * Indicates whether custom cell content and style should be evaluated and exported.
         * If set to true then export logic will retrieve cell content using cell.textContent property,
         * and cell style using getComputedStyle(cell).
         * Default is 'undefined' (i.e. false).
         */
        customCellContent?: boolean;
        /**
         * Indicates whether to draw detail rows.
         * If set to false then the detail rows will be ignored; otherwise the detail rows will be drawn empty
         * and their content should be drawn manually using formatItem event handler.
         * Default is 'undefined' (i.e. false).
         */
        drawDetailRows?: boolean;
        /**
         * Represents an array of custom fonts that will be embedded into the document.
         *
         * This sample illustrates how to setup the FlexGridPdfConverter to use two custom
         * fonts, Cuprum-Bold.ttf and Cuprum-Regular.ttf. The first one is applied to the
         * header cells only, while the second one is applied to all the remaining cells.
         *
         * <pre>
         * wijmo.grid.pdf.FlexGridPdfConverter.export(flex, fileName, {
         *    embeddedFonts: [{
         *       source: 'resources/ttf/Cuprum-Bold.ttf',
         *       name: 'cuprum',
         *       style: 'normal',
         *       weight: 'bold'
         *    }, {
         *       source: 'resources/ttf/Cuprum-Regular.ttf',
         *       name: 'cuprum',
         *       style: 'normal',
         *       weight: 'normal'
         *    }],
         *    styles: {
         *       cellStyle: {
         *          font: {
         *             family: 'cuprum'
         *          }
         *       },
         *       headerCellStyle: {
         *          font: {
         *             weight: 'bold'
         *          }
         *       }
         *    }
         * });
         * </pre>
         */
        embeddedFonts?: wijmo.pdf.IPdfFontFile[];
        /**
         * Determines the export mode.
         */
        exportMode?: ExportMode;
        /**
         * An optional callback function called for every exported cell that allows to perform transformations of exported
         * cell value and style, or perform a custom drawing.
         *
         * The function accepts the {@link PdfFormatItemEventArgs} class instance as the first argument.
         *
         * In case of custom drawing the {@link PdfFormatItemEventArgs.cancel} property should be set to true to cancel the default cell content drawing, and
         * the {@link PdfFormatItemEventArgs.cancelBorders} property should be set to true to cancel the default cell borders drawing.
         *
         * <pre>
         * wijmo.grid.pdf.FlexGridPdfConverter.export(flex, fileName, {
         *    formatItem: function(args) {
         *        // Change the background color of the regular cells of "Country" column.
         *        if (args.panel.cellType === wijmo.grid.CellType.Cell && args.panel.columns[args.col].binding === "country") {
         *            args.style.backgroundColor = 'blue';
         *        }
         *    }
         * });</pre>
         */
        formatItem?: (args: PdfFormatItemEventArgs) => void;
        /**
         * Determines the maximum number of pages to export.
         */
        maxPages?: number;
        /**
         * Indicates whether merged values should be repeated across pages when the merged range
         * is split on multiple pages.
         */
        repeatMergedValuesAcrossPages?: boolean;
        /**
         * Indicates whether star-sized columns widths should be recalculated against the PDF page
         * width instead of using the grid's width.
         */
        recalculateStarWidths?: boolean;
        /**
         * Represents the look and feel of an exported {@link FlexGrid}.
         */
        styles?: IFlexGridStyle;
        /**
         * An optional function that gives feedback about the progress of a task.
         * The function accepts a single argument, a number changing from 0.0 to 1.0, where the value of 0.0 indicates that
         * the operation has just begun and the value of 1.0 indicates that the operation has completed.
         *
         * <pre>
         * wijmo.grid.pdf.FlexGridPdfConverter.export(flex, fileName, {
         *    progress: function(value) {
         *        // Handle the progress here.
         *    }
         * });</pre>
         */
        progress?: (value: number) => void;
        /**
         * When turned on, decreases the drawing time by activating the cell styles caching if {@link IFlexGridDrawSettings.customCellContent} property is enabled.
         *
         * The combination of cell's inline style specific properties, own CSS classes and CSS classes of row containing the cell is used as
         * the cache tag. Before the cell style is calculated, the cache is checked first, and if the style associated with the tag is found there,
         * it's taken from there and doesn't get recalculated.
         *
         * Using this mode can make the drawing slower when considerable amount of cells have the unique set of CSS classes and inline styles.
         * Also, when pseudo classes like :first-child and :nth-child are used to style the cells and rows, the cell styles can be determined
         * incorrectly.
         *
         * The default value is <b>true</b>.
         */
        quickCellStyles?: boolean;
        _progressMax?: number;
    }
    /**
     * Represents the settings used by the {@link FlexGridPdfConverter.export} method.
     */
    interface IFlexGridExportSettings extends IFlexGridDrawSettings {
        /**
         * Determines the scale mode.
         */
        scaleMode?: ScaleMode;
        /**
         * Represents the options of the underlying {@link PdfDocument}.
         */
        documentOptions?: wijmo.pdf.IPdfDocumentOptions;
    }
}
declare module wijmo.grid.pdf {
    interface _IFlexGridAdapter {
        columns: _IColumnCollection;
        rows: _IRowCollection;
        bottomLeftCells: _IGridPanel;
        cells: _IGridPanel;
        columnFooters: _IGridPanel;
        columnHeaders: _IGridPanel;
        rowHeaders: _IGridPanel;
        topLeftCells: _IGridPanel;
        treeIndent: number;
        getSelection(): _ICellRange[];
        getComputedStyle(panel: _IGridPanel, cell: HTMLElement): CSSStyleDeclaration;
        getComputedDefBorderColor(): string;
        getMergedRange(p: _IGridPanel, r: number, c: number): _ICellRange;
        showColumnHeader: boolean;
        showRowHeader: boolean;
        showColumnFooter: boolean;
        alignMergedTextToTheTopRow(panel: _IGridPanel): boolean;
        getCell(panel: _IGridPanel, row: number, column: number, updateContent: boolean): HTMLElement;
        getCellContent(panel: _IGridPanel, row: _IRow, col: _IColumn, colIdx: number): string;
        getCellStyle(panel: _IGridPanel, row: _IRow, col: _IColumn): ICellStyle;
        getColumn(panel: _IGridPanel, row: number, col: number): _IColumn;
        isAlternatingRow(row: _IRow): boolean;
        isBooleanCell(panel: _IGridPanel, row: _IRow, col: _IColumn): boolean;
        isGroupRow(row: _IRow): boolean;
        isNewRow(row: _IRow): boolean;
        isDetailRow(row: _IRow): boolean;
        isExpandableGroupRow(row: _IRow): boolean;
    }
    interface _IGridPanel {
        columns: _IColumnCollection;
        cellType: number;
        rows: _IRowCollection;
        height: number;
        width: number;
    }
    interface _IColumnCollection {
        [index: number]: _IColumn;
        firstVisibleIndex: number;
        length: number;
    }
    interface _IRowCol {
        dataType?: number;
        binding?: string;
        index: number;
        isVisible: boolean;
    }
    interface _IColumn extends _IRowCol {
        aggregate: number;
        name?: string;
        visibleIndex: number;
        renderWidth: number;
        wordWrap: boolean;
        getAlignment(row?: _IRow): string;
    }
    interface _ICellRange {
        row: number;
        col: number;
        row2: number;
        col2: number;
        bottomRow: number;
        rightCol: number;
        leftCol: number;
        topRow: number;
        isValid: boolean;
        rowSpan: number;
        columnSpan: number;
        isSingleCell: boolean;
        getRenderSize(panel: _IGridPanel): wijmo.Size;
        clone(): _ICellRange;
    }
    interface _IRowCollection {
        [index: number]: _IRow;
        length: number;
        maxGroupLevel: number;
    }
    interface _IRow extends _IRowCol {
        level?: number;
        renderHeight: number;
        wordWrap: boolean;
    }
    enum _CellType {
        None = 0,
        Cell = 1,
        ColumnHeader = 2,
        RowHeader = 3,
        TopLeft = 4,
        ColumnFooter = 5,
        BottomLeft = 6
    }
}
declare module wijmo.grid.pdf {
    function _merge(dst: any, src: any, overwrite?: boolean): any;
    function _combineColumns(regCol: _IColumn, bndCol: _IColumn): _IColumn;
}
declare module wijmo.grid.pdf {
    /**
     * Represents arguments of the IFlexGridDrawSettings.formatItem callback.
     */
    class PdfFormatItemEventArgs extends /*wijmo.grid.CellRangeEventArgs*/ wijmo.CancelEventArgs {
        private _p;
        private _rng;
        private _data;
        private _canvas;
        private _cell;
        private _clientRect;
        private _contentRect;
        private _textRect;
        private _style;
        private _getFormattedCell;
        private _getTextRect;
        /**
         * Initializes a new instance of the {@link PdfFormatItemEventArgs} class.
         *
         * @param p {@link GridPanel} that contains the range.
         * @param rng Range of cells affected by the event.
         * @param cell Element that represents the grid cell to be rendered.
         * @param canvas Canvas to perform the custom painting on.
         * @param clientRect    Object that represents the client rectangle of the grid cell to be rendered in canvas coordinates.
         * @param contentRect Object that represents the content rectangle of the grid cell to be rendered in canvas coordinates.
         * @param style Object that represents the style of the grid cell to be rendered.
         * @param getFormattedCell Callback function that should return the grid cell when the getFormattedCell method is called.
             * @param getTextRect Callback function that should return the text rectangle of the grid cell to be rendered in canvas coordinates.
         */
        constructor(p: any, rng: any, cell: HTMLElement, canvas: wijmo.pdf.PdfPageArea, clientRect: wijmo.Rect, contentRect: wijmo.Rect, style: ICellStyle, getFormattedCell: () => HTMLElement, getTextRect: () => wijmo.Rect);
        /**
         * Gets the {@link GridPanel} affected by this event.
         */
        readonly panel: wijmo.grid.GridPanel;
        /**
         * Gets the {@link CellRange} affected by this event.
         */
        readonly range: wijmo.grid.CellRange;
        /**
         * Gets the row affected by this event.
         */
        readonly row: number;
        /**
         * Gets the column affected by this event.
         */
        readonly col: number;
        /**
         * Gets or sets the data associated with the event.
         */
        data: any;
        /**
        * Gets or sets a value that indicates that default cell borders drawing should be canceled.
        */
        cancelBorders: boolean;
        /**
        * Gets the canvas to perform the custom painting on.
        */
        readonly canvas: wijmo.pdf.PdfPageArea;
        /**
         * Gets a reference to the element that represents the grid cell being rendered.
         * If IFlexGridDrawSettings.customCellContent is set to true then contains
         * reference to the element that represents the formatted grid cell; otherwise, a null value.
         */
        readonly cell: HTMLElement;
        /**
         * Gets the client rectangle of the cell being rendered in canvas coordinates.
         */
        readonly clientRect: wijmo.Rect;
        /**
         * Gets the content rectangle of the cell being rendered in canvas coordinates.
         */
        readonly contentRect: wijmo.Rect;
        /**
         * Draws the background of the cell with the specified brush or color, or, if it is not specified, with the value of the {@link style.backgroundColor} property.
         * @param brushOrColor The brush or color to use.
         */
        drawBackground(brushOrColor?: wijmo.pdf.PdfBrush | wijmo.Color | string): void;
        /**
         * Returns a reference to the element that represents the grid cell being rendered.
         * This method is useful when export of custom formatting is disabled, but you need
         * to export custom content for certain cells.
         */
        getFormattedCell(): HTMLElement;
        /**
         * Gets an object that represents the style of the cell being rendered.
         * If IFlexGridDrawSettings.customCellContent is set to true then the style is inferred
         * from the cell style; othwerwise it contains a combination of the IFlexGridDrawSettings.styles export
         * setting, according to the row type of exported cell.
         */
        readonly style: ICellStyle;
        /**
         * Gets the value that represents the top position of the text of the cell being rendered in canvas coordinates.
         */
        readonly textTop: number;
    }
}
declare module wijmo.grid.pdf {
    /**
     * Provides a functionality to export the {@link FlexGrid} to PDF.
     */
    class _FlexGridPdfCoreConverter {
        private static BorderWidth;
        private static DefFont;
        static DefaultDrawSettings: IFlexGridDrawSettings;
        /**
         * Draws the {@link FlexGrid} to an existing {@link PdfDocument} instance at the
         * specified coordinates.
         *
         * If width is not specified, then grid will be rendered in actual size
         * without any page breaks.
         * If height is not specified, then grid will be scaled to fit the width
         * without any page breaks.
         * If both, width and height are determined, then grid will be scaled to fit
         * the specified rectangle without any page breaks.
         *
         * <pre>
         * var doc = new wijmo.pdf.PdfDocument({
         *    ended: function (sender, args) {
         *       wijmo.pdf.saveBlob(args.blob, 'FlexGrid.pdf');
         *    }
         * });
         *
         * wijmo.grid.pdf.FlexGridPdfConverter.drawToPosition(grid, doc, new wijmo.Point(0, 0), null, null, {
         *    maxPages: 10,
         *    styles: {
         *       cellStyle: {
         *          backgroundColor: '#ffffff',
         *          borderColor: '#c6c6c6'
         *       },
         *       headerCellStyle: {
         *          backgroundColor: '#eaeaea'
         *       }
         *    }
         * });
         * </pre>
         *
         * @param flex The {@link FlexGrid} instance to export.
         * @param doc The {@link PdfDocument} instance to draw in.
         * @param point The position to draw at, in points.
         * @param width The width of the drawing area in points.
         * @param height The height of the drawing area in points.
         * @param settings The draw settings.
         */
        static draw(flex: _IFlexGridAdapter, doc: wijmo.pdf.PdfDocument, point?: wijmo.Point, width?: number, height?: number, settings?: IFlexGridExportSettings): void;
        static _applyDefaultDrawSettings(settings: any): IFlexGridDrawSettings;
        private static _drawInternal;
        private static _getCellsCount;
        private static _getRowsToRender;
        private static _getScaleFactor;
        private static _getPages;
    }
    class FlexGridRenderer {
        private _flex;
        private _borderWidth;
        private _lastPage;
        private _topLeft;
        private _rowHeader;
        private _columnHeader;
        private _cells;
        private _bottomLeft;
        private _columnFooter;
        private _settings;
        constructor(flex: _IFlexGridAdapter, settings: IFlexGridExportSettings, range: RowRange, borderWidth: number, lastPage: boolean);
        readonly settings: IFlexGridExportSettings;
        isRenderableRow(row: _IRow): boolean;
        getCellsCount(): number;
        render(doc: wijmo.pdf.PdfDocument, cellRendered?: () => void): void;
        readonly flex: _IFlexGridAdapter;
        readonly renderSize: wijmo.Size;
        readonly showColumnHeader: boolean;
        readonly showRowHeader: boolean;
        readonly showColumnFooter: boolean;
        alignMergedTextToTheTopRow(panel: _IGridPanel): boolean;
        getColumn(panel: _IGridPanel, row: number, col: number): _IColumn;
        isAlternatingRow(row: _IRow): boolean;
        isGroupRow(row: _IRow): boolean;
        isNewRow(row: _IRow): boolean;
        isExpandableGroupRow(row: _IRow): boolean;
        isBooleanCell(panel: _IGridPanel, row: _IRow, col: _IColumn): boolean;
        getCellStyle(panel: _IGridPanel, row: _IRow, col: _IColumn): ICellStyle;
    }
    class PanelSection {
        private _range;
        private _panel;
        private _flex;
        private _visibleRows;
        private _visibleColumns;
        private _size;
        constructor(panel: _IGridPanel, range: RowRange);
        readonly visibleRows: number;
        readonly visibleColumns: number;
        readonly size: wijmo.Size;
        readonly range: RowRange;
        readonly panel: _IGridPanel;
        protected isRenderableRow(row: _IRow): boolean;
    }
    class PanelSectionRenderer extends PanelSection {
        private _borderWidth;
        private _gr;
        private _renderSize;
        private _cvtHtml;
        constructor(gr: FlexGridRenderer, panel: _IGridPanel, range: RowRange, borderWidth: number);
        readonly gr: FlexGridRenderer;
        readonly renderSize: wijmo.Size;
        getRangeWidth(leftCol: number, rightCol: number): number;
        getRangeHeight(topRow: number, bottomRow: number): number;
        getCellsCount(): number;
        render(doc: wijmo.pdf.PdfDocument, x: number, y: number, cellRendered?: () => void): void;
        protected isRenderableRow(row: _IRow): boolean;
    }
    class _CellRenderer {
        private _pr;
        private _area;
        private _borderWidth;
        static _drawBackground(area: wijmo.pdf.PdfPageArea, clientRect: wijmo.Rect, brushOrColor: wijmo.pdf.PdfBrush | wijmo.Color | string): void;
        constructor(panelRenderer: PanelSectionRenderer, area: wijmo.pdf.PdfPageArea, borderWidth: number);
        renderCell(value: string, row: _IRow, column: _IColumn, rng: _CellRangeExt, r: wijmo.Rect): void;
        private _renderCell;
        private _isBooleanCellAndValue;
        private _isBoolean;
        private _measureCell;
        private _decompositeStyle;
        private _parseBorder;
        private _parsePadding;
        private _renderEmptyCell;
        private _renderBooleanCell;
        private _renderTextCell;
        private _calculateTextRect;
        private _getTextLineHeight;
    }
    class _CellRange implements _ICellRange {
        private _row;
        private _col;
        private _row2;
        private _col2;
        constructor(cr: _ICellRange);
        constructor(row: number, col: number, row2: number, col2: number);
        row: number;
        col: number;
        row2: number;
        col2: number;
        readonly topRow: number;
        readonly bottomRow: number;
        readonly leftCol: number;
        readonly rightCol: number;
        readonly columnSpan: number;
        readonly rowSpan: number;
        readonly isValid: boolean;
        readonly isSingleCell: boolean;
        copyFrom(cr: _CellRange): void;
        clone(): _CellRange;
        getRenderSize(p: _IGridPanel): wijmo.Size;
        setRange(r?: number, c?: number, r2?: number, c2?: number): void;
    }
    class _CellRangeExt extends _CellRange {
        firstVisibleRow: number;
        visibleRowsCount: number;
        constructor(panel: _IGridPanel, cr: _ICellRange);
        constructor(panel: _IGridPanel, row: number, col: number, row2: number, col2: number);
        copyFrom(cr: _CellRangeExt): void;
        clone(): _CellRangeExt;
    }
    class RowRange {
        private _ranges;
        constructor(ranges: _ICellRange[]);
        length(): number;
        readonly isValid: boolean;
        readonly leftCol: number;
        readonly rightCol: number;
        clone(leftCol?: number, rightCol?: number): RowRange;
        getRenderSize(panel: _IGridPanel): wijmo.Size;
        forEach(panel: _IGridPanel, fn: (row: _IRow, range?: _ICellRange, rowIdx?: number, seqIdx?: number) => void): void;
        subrange(from: number, count: number, leftCol?: number, rightCol?: number): RowRange;
    }
}
declare module wijmo.grid.pdf {
    function _removeFakeCell(): void;
    /**
    * Provides a functionality to export the {@link FlexGrid} to PDF.
    *
    * The example below shows how you can use a {@link FlexGridPdfConverter} to
    * export a {@link FlexGrid} to PDF:
    *
    * {@sample Grid/ImportExportPrint/PDF/ExportToFile/purejs Example}
    */
    class FlexGridPdfConverter {
        static _DefaultExportSettings: IFlexGridExportSettings;
        /**
        * Draws the {@link FlexGrid} to an existing {@link PdfDocument} at the
        * (0, @wijmo.pdf.PdfDocument.y) coordinates.
        *
        * If width is not specified, then grid will be rendered in actual size,
        * breaking into pages as needed. If height is not specified, then grid will be
        * scaled to fit the width, breaking into pages vertically as needed.
        * If both, width and height are determined, then grid will be scaled to fit
        * the specified rectangle without any page breaks.
        *
        * <pre>
        * var doc = new wijmo.pdf.PdfDocument({
        *    ended: function (sender, args) {
        *       wijmo.pdf.saveBlob(args.blob, 'FlexGrid.pdf');
        *    }
        * });
        *
        * wijmo.grid.pdf.FlexGridPdfConverter.draw(grid, doc, null, null, {
        *    maxPages: 10,
        *    styles: {
        *       cellStyle: {
        *          backgroundColor: '#ffffff',
        *          borderColor: '#c6c6c6'
        *       },
        *       headerCellStyle: {
        *          backgroundColor: '#eaeaea'
        *       }
        *    }
        * });
        * </pre>
        *
        * @param flex The {@link FlexGrid} instance to export.
        * @param doc The {@link PdfDocument} instance to draw in.
        * @param width The width of the drawing area in points.
        * @param height The height of the drawing area in points.
        * @param settings The draw settings.
        */
        static draw(flex: any, doc: wijmo.pdf.PdfDocument, width?: number, height?: number, settings?: IFlexGridDrawSettings): void;
        /**
        * Draws the {@link FlexGrid} to an existing {@link PdfDocument} instance at the
        * specified coordinates.
        *
        * If width is not specified, then grid will be rendered in actual size
        * without any page breaks.
        * If height is not specified, then grid will be scaled to fit the width
        * without any page breaks.
        * If both, width and height are determined, then grid will be scaled to fit
        * the specified rectangle without any page breaks.
        *
        * <pre>
        * var doc = new wijmo.pdf.PdfDocument({
        *    ended: function (sender, args) {
        *       wijmo.pdf.saveBlob(args.blob, 'FlexGrid.pdf');
        *    }
        * });
        *
        * wijmo.grid.pdf.FlexGridPdfConverter.drawToPosition(grid, doc, new wijmo.Point(0, 0), null, null, {
        *    maxPages: 10,
        *    styles: {
        *       cellStyle: {
        *          backgroundColor: '#ffffff',
        *          borderColor: '#c6c6c6'
        *       },
        *       headerCellStyle: {
        *          backgroundColor: '#eaeaea'
        *       }
        *    }
        * });
        * </pre>
        *
        * @param flex The {@link FlexGrid} instance to export.
        * @param doc The {@link PdfDocument} instance to draw in.
        * @param point The position to draw at, in points.
        * @param width The width of the drawing area in points.
        * @param height The height of the drawing area in points.
        * @param settings The draw settings.
        */
        static drawToPosition(flex: any, doc: wijmo.pdf.PdfDocument, point: wijmo.Point, width?: number, height?: number, settings?: IFlexGridDrawSettings): void;
        /**
        * Exports the {@link FlexGrid} to PDF.
        *
        * <pre>
        * wijmo.grid.pdf.FlexGridPdfConverter.export(grid, 'FlexGrid.pdf', {
        *    scaleMode: wijmo.grid.pdf.ScaleMode.PageWidth,
        *    maxPages: 10,
        *    styles: {
        *       cellStyle: {
        *          backgroundColor: '#ffffff',
        *          borderColor: '#c6c6c6'
        *       },
        *       headerCellStyle: {
        *          backgroundColor: '#eaeaea'
        *       }
        *    },
        *    documentOptions: {
        *       info: {
        *          title: 'Sample'
        *       }
        *    }
        * });
        * </pre>
        *
        * @param flex The {@link FlexGrid} instance to export.
        * @param fileName Name of the file to export.
        * @param settings The export settings.
        */
        static export(flex: wijmo.grid.FlexGrid, fileName: string, settings?: IFlexGridExportSettings): void;
        static _getFlexGridAdapter(flex: wijmo.grid.FlexGrid, settings: IFlexGridDrawSettings): _IFlexGridAdapter;
        static _applyDefaultExportSettings(settings: any): IFlexGridExportSettings;
    }
    class FlexGridAdapter<G extends wijmo.grid.FlexGrid> implements _IFlexGridAdapter {
        private _flex;
        private _settings;
        private _styleCache;
        constructor(flex: G, settings: IFlexGridDrawSettings);
        protected readonly flex: G;
        protected readonly settings: IFlexGridDrawSettings;
        readonly columns: ColumnCollection;
        readonly rows: RowCollection;
        readonly bottomLeftCells: GridPanel;
        readonly cells: GridPanel;
        readonly columnFooters: GridPanel;
        readonly columnHeaders: GridPanel;
        readonly rowHeaders: GridPanel;
        readonly topLeftCells: GridPanel;
        readonly treeIndent: number;
        getSelection(): _ICellRange[];
        getCell(panel: _IGridPanel, row: number, column: number, updateContent: boolean): HTMLElement;
        private _defBorderColor;
        getComputedDefBorderColor(): string;
        getComputedStyle(panel: _IGridPanel, cell: HTMLElement): CSSStyleDeclaration;
        getMergedRange(p: _IGridPanel, r: number, c: number): CellRange;
        readonly showColumnHeader: boolean;
        readonly showRowHeader: boolean;
        readonly showColumnFooter: boolean;
        alignMergedTextToTheTopRow(panel: _IGridPanel): boolean;
        getCellData(panel: _IGridPanel, row: number, col: number): any;
        getCellContent(panel: _IGridPanel, row: _IRow, col: _IColumn, colIdx: number): string;
        isBooleanCell(panel: _IGridPanel, row: _IRow, col: _IColumn): boolean;
        getColumn(panel: _IGridPanel, row: number, col: number): _IColumn;
        isAlternatingRow(row: _IRow): boolean;
        isGroupRow(row: _IRow): boolean;
        isNewRow(row: _IRow): boolean;
        isDetailRow(row: _IRow): boolean;
        isExpandableGroupRow(row: _IRow): boolean;
        getCellStyle(panel: _IGridPanel, row: _IRow, column: _IColumn): ICellStyle;
        private _extractCheckboxValue;
    }
    class _TransposedGridAdapter extends FlexGridAdapter<wijmo.grid.transposed.TransposedGrid> {
        static getBindingColumn(panel: wijmo.grid.GridPanel, row: number): wijmo.grid.Column;
        getColumn(panel: wijmo.grid.GridPanel, row: number, col: number): _IColumn;
    }
}
declare module wijmo.grid.pdf {
    /**
    * Represents a single item of the {@link IClientData} dictionary.
    */
    interface IClientDataItem {
        /**
        * Gets or sets the content for the data item.
        */
        content: any;
        /**
        * Gets or sets the settings for the data item.
        */
        settings: any;
    }
    /**
    * Represents a dictionary of {name: value} pairs which contains client data.
    */
    interface IClientData {
        [name: string]: IClientDataItem;
    }
    /**
     * Provides arguments for the callback parameter of the {@link PdfWebWorkerClient.exportGrid} and {@link PdfWebWorkerClient.export} methods.
     */
    class PdfWebWorkerExportDoneEventArgs extends wijmo.EventArgs {
        private _blob;
        private _buf;
        /**
        * Initializes a new instance of the {@link PdfWebWorkerExportDoneEventArgs} class.
        *
        * @param buffer An ArrayBuffer.
        */
        constructor(buffer: ArrayBuffer);
        /**
        * Gets a Blob object that contains the document data.
        */
        readonly blob: Blob;
        /**
        * Gets an ArrayBuffer that contains the document data.
        */
        readonly buffer: ArrayBuffer;
    }
    /**
     * Represents client-side methods for exporting FlexGrid to PDF/generating PDF, for use with Web Worker.
     */
    class PdfWebWorkerClient {
        /**
         * Exports the {@link FlexGrid} to PDF in a background thread.
         *
         * @param worker The Web Worker instance to run the exporting code in.
         * @param grid The {@link FlexGrid} instance to export.
         * @param fileName The name of the file to export.
         * @param settings The export settings.
         * @param done An optional callback function to call when exporting is done. The function takes a single parameter, an instance of the {@link PdfWebWorkerExportDoneEventArgs} class.
         * To prevent the creation of a file the function should return False.
         * @param progress An optional function that gives feedback about the progress of the export. The function takes a single parameter, a number changing from 0.0 to 1.0,
         * where the value of 0.0 indicates that the operation has just begun and the value of 1.0 indicates that the operation has completed.
         */
        static exportGrid(worker: Worker, grid: wijmo.grid.FlexGrid, fileName: string, settings?: IFlexGridExportSettings, done?: (args: PdfWebWorkerExportDoneEventArgs) => false | void, progress?: (value: number) => void): void;
        /**
         * Exports PDF in a background thread.
         *
         * @param worker The Web Worker instance to run the exporting code in.
         * @param settings An object containing {@link PdfDocument}'s initialization settings.
         * @param done The callback function to call when drawing is done. The function takes a single parameter, an instance of the {@link PdfWebWorkerExportDoneEventArgs} class.
         * @param progress An optional function that gives feedback about the progress of the export. The function takes a single parameter, a number changing from 0.0 to 1.0,
         * where the value of 0.0 indicates that the operation has just begun and the value of 1.0 indicates that the operation has completed.
         */
        static export(worker: Worker, settings: any, done: (args: PdfWebWorkerExportDoneEventArgs) => void, progress?: (value: number) => void): void;
        /**
         * Adds named FlexGrid with settings, which will be used in a Web Worker to generate a PDF document.
         * This method should be used in conjunction with the {@link PdfWebWorkerClient.export} method.
         *
         * @param worker The Web Worker instance to send the data to.
         * @param grid The grid
         * @param name The name associated with the grid.
         * @param settings The draw settings.
         */
        static addGrid(worker: Worker, grid: wijmo.grid.FlexGrid, name: string, settings?: IFlexGridDrawSettings): void;
        /**
         * Adds named image with settings, which will be used in a Web Worker to generate a PDF document.
         * This method should be used in conjunction with the {@link PdfWebWorkerClient.export} method.
         *
         * @param worker The Web Worker instance to send the data to.
         * @param image A string containing the URL to get the image from or the data URI containing a base64 encoded image.
         * @param name The name associated with the image.
         * @param settings The image drawing settings.
         */
        static addImage(worker: Worker, image: string, name: string, settings?: wijmo.pdf.IPdfImageDrawSettings): void;
        /**
         * Adds named string which will be used in a Web Worker code to generate a PDF document.
         * This method should be used in conjunction with the {@link PdfWebWorkerClient.export} method.
         *
         * @param worker The Web Worker instance to send the data to.
         * @param value The value.
         * @param name The name associated with the string.
         */
        static addString(worker: Worker, value: string, name: string): void;
        /**
        * Serializes the {@link FlexGrid} to ArrayBuffer. The serialized data can be send to a Web Worker using the postMessage method.
        *
        * @param grid The {@link FlexGrid} instance to serialize.
        * @param settings The export settings used to serialize the grid.
        */
        static serializeGrid(grid: wijmo.grid.FlexGrid, settings?: IFlexGridExportSettings): ArrayBuffer;
        private static _addClientData;
        private static _clearClientData;
        private static _clientDataToArrayBuffer;
        private static _gridToJson;
        private static _getJsonConverter;
    }
    /**
     * Represents server-side methods for exporting FlexGrid to PDF/generating PDF, for use with Web Worker.
     */
    class PdfWebWorker {
        /**
         * Performs the export started in a UI thread by calling the {@link PdfWebWorkerClient.exportGrid} method.
         */
        static initExportGrid(): void;
        /**
         * Performs the PDF document generation started in a UI thread by calling the {@link PdfWebWorkerClient.export} method.
         *
         * @param draw The callback function to draw PDF.
         * The function takes two parameters:
         * <ul>
         *     <li><b>doc</b>: An instance of the {@link wijmo.pdf.PdfDocument} class.</li>
         *     <li><b>clientData</b>: A dictionary of {name: value} pairs that contains the data added on the client side.</li>
         * </ul>
         */
        static initExport(draw: (doc: wijmo.pdf.PdfDocument, clientData: IClientData) => void): void;
        /**
         * Sends the progress value to a client, where it will be handled by the {@link PdfWebWorkerClient.export}'s progress callback function.
         * Should be used in conjunction with the {@link PdfWebWorkerClient.export} method to inform client about the progress of the export.
         *
         * @param value The progress value, in the range of [0.0..1.0].
         */
        static sendExportProgress(value: number): void;
        /**
        * Deserializes the {@link FlexGrid} from ArrayBuffer to its internal representation that can be used in a Web Worker and passed to the {@link FlexGridPdfConverter.draw} and {@link FlexGridPdfConverter.drawToPosition} methods.
        *
        * @param data The data to deserialize.
        * @param settings The draw settings used to deserialize the grid.
        */
        static deserializeGrid(data: ArrayBuffer, settings?: IFlexGridDrawSettings): any;
        private static _deserializeGridFromString;
        private static _disableUnsupportedFeatures;
        private static _getJsonAdapter;
    }
}
declare module wijmo.grid.pdf {
}

declare module wijmo.nav {
    /**
     * The {@link TabPanel} enables content organization at a high level,
     * such as switching between views, data sets, or functional aspects
     * of an application.
     *
     * Tabs are presented as a single row above their associated content.
     * Tab headers succinctly describe the content within.
     *
     * Tabs can be selected with the mouse or keyboard, and automatically
     * update the content to reflect the current selection.
     *
     * The example below shows how you can use a {@link TabPanel} to organize
     * content into pages:
     *
     * {@sample Nav/TabPanel/Overview Example}
     */
    class TabPanel extends wijmo.Control {
        private _tabs;
        private _selectedIndex;
        private _toAnim;
        private _eAnim;
        private _animated;
        private _autoSwitch;
        private _dRoot;
        private _dTabHeaders;
        private _dTabPanes;
        /**
         * Gets or sets the template used to instantiate {@link TabPanel} controls.
         */
        static controlTemplate: string;
        /**
         * Initializes a new instance of the {@link TabPanel} class.
         *
         * @param element The DOM element that hosts the control, or a CSS selector for the host element (e.g. '#theCtrl').
         * @param options The JavaScript object containing initialization data for the control.
         * @param keepChildren Whether to keep child elements. If set to true, the caller becomes responsible for
         * populating the {@link tabs} array based on the DOM).
         */
        constructor(element: any, options?: any, keepChildren?: boolean);
        /**
         * Gets an array of {@link Tab} objects whose {@link Tab.header} and
         * {@link Tab.pane} properties determine the content of the
         * {@link TabPanel} control.
         */
        readonly tabs: wijmo.collections.ObservableArray<Tab>;
        /**
         * Gets or sets the index of the currently selected (active) tab.
         */
        selectedIndex: number;
        /**
         * Gets or sets the {@link Tab} object that is currently selected.
         */
        selectedTab: Tab;
        /**
         * Gets or sets a value that determines whether tab changes should be animated
         * with a fade-in effect.
         *
         * The default value for this property is <b>true</b>.
         */
        isAnimated: boolean;
        /**
         * Gets or sets a value that determines whether the control should switch
         * tabs automatically when the user selects a tab using the arrow keys.
         *
         * When {@link autoSwitch} is set to true (the default value), pressing the
         * arrow keys automatically switches tabs. Pressing the tab key selects
         * the next element in the tab sequence, which excludes non-selected
         * tab headers.
         *
         * When {@link autoSwitch} is set to false, pressing the arrow keys or the
         * tab key moves the focus to the next or previous tab header, but does
         * not switch tabs. Pressing the Enter or Space keys is required to
         * activate the tab that has the focus.
         *
         * In most cases, the default value provides adequate (accessible)
         * behavior, but some users may prefer to set {@link autoSwitch} to false.
         * For a more detailed discussion of this topic, please see the
         * <a href="https://www.w3.org/TR/wai-aria-practices/#kbd_selection_follows_focus" target="_blank">W3C ARIA practices</a>
         * and
         * <a href="http://simplyaccessible.com/article/danger-aria-tabs/" target="_blank">SimplyAccessible</a> articles.
         */
        autoSwitch: boolean;
        /**
         * Gets a {@link Tab} by id or by header content.
         *
         * @param id Id of the {@link Tab} to retrieve.
         */
        getTab(id: string): Tab;
        /**
         * Occurs when the value of the {@link selectedIndex} property changes.
         */
        readonly selectedIndexChanged: Event<TabPanel, EventArgs>;
        /**
         * Raises the {@link selectedIndexChanged} event.
         */
        onSelectedIndexChanged(e?: wijmo.EventArgs): void;
        _populateControl(): void;
        _validateSelection(): void;
        private _updateContent;
        private _removeChildren;
        private _click;
        private _keydown;
        private _getTabIndex;
        private _getNextIndex;
    }
    /**
     * Represents a tab within a {@link TabPanel} control.
     *
     * Tabs have two elements: a header and a pane. The header displays
     * the tab title and the pane represents the tab content.
     */
    class Tab {
        private _hdr;
        private _pane;
        private _p;
        /**
         * Initializes a new instance of the {@link Tab} class.
         *
         * @param header Element or CSS selector for the element that contains the Tab header.
         * @param pane Element or CSS selector for the element that contains the Tab content.
         */
        constructor(header: any, pane: any);
        /**
         * Gets a reference to the {@link TabPanel} that contains this Tab.
         */
        readonly tabPanel: TabPanel;
        /**
         * Gets the tab's header element.
         */
        readonly header: HTMLElement;
        /**
         * Gets the tab's content element.
         */
        readonly pane: HTMLElement;
        /**
         * Gets or sets a value that determines whether this {@link Tab} is disabled.
         */
        isDisabled: boolean;
        /**
         * Gets or sets a value that determines whether this {@link Tab} is visible.
         */
        isVisible: boolean;
        _setParts(header: HTMLElement, pane: HTMLElement): void;
        _setPanel(panel: TabPanel): void;
    }
}
declare module wijmo.nav {
    /**
     * The {@link Accordion} control is a vertically stacked set of
     * interactive headings that each contain a title.
     *
     * The headings function as controls that enable users to reveal
     * or hide their associated sections of content.
     *
     * Accordions are commonly used to reduce the need to scroll when
     * presenting multiple sections of content on a single page.
     */
    class Accordion extends wijmo.Control {
        private _panes;
        private _selectedIndex;
        private _animated;
        private _autoSwitch;
        private _alCollapseAll;
        private _alExpandMany;
        private _autoSwitching;
        private _hidePane;
        /**
         * Initializes a new instance of the {@link Accordion} class.
         *
         * @param element The DOM element that hosts the control, or a CSS selector for the host element (e.g. '#theCtrl').
         * @param options The JavaScript object containing initialization data for the control.
         * @param keepChildren Whether to keep child elements. If set to true, the caller becomes responsible for
         * populating the {@link tabs} array based on the DOM).
         */
        constructor(element: any, options?: any, keepChildren?: boolean);
        /**
         * Gets an array of {@link AccordionPane} objects whose {@link AccordionPane.header} and
         * {@link AccordionPane.content} properties determine the content of the
         * {@link Accordion} control.
         */
        readonly panes: wijmo.collections.ObservableArray<AccordionPane>;
        /**
         * Gets or sets the index of the currently selected (active) pane.
         */
        selectedIndex: number;
        /**
         * Gets or sets the {@link AccordionPane} object that is currently selected.
         */
        selectedPane: AccordionPane;
        /**
         * Gets or sets a value that determines whether collapsing or
         * expanding panes should be animated.
         *
         * The default value for this property is <b>true</b>.
         */
        isAnimated: boolean;
        /**
         * Gets or sets a value that determines whether the {@link Accordion}
         * shows collapsed/expanded icons in the pane headers.
         *
         * The default value for this property is <b>true</b>.
         */
        showIcons: boolean;
        /**
         * Gets or sets a value that determines whether the control should switch
         * panes automatically when the user selects a tab using the arrow keys.
         *
         * When {@link autoSwitch} is set to true (the default value), pressing the
         * arrow keys automatically switches panes. Pressing the tab key selects
         * the next element in the tab sequence, which excludes non-selected
         * pane headers.
         *
         * When {@link autoSwitch} is set to false, pressing the arrow keys or the
         * tab key moves the focus to the next or previous pane header, but does
         * not switch panes. Pressing the Enter or Space keys is required to
         * activate the pane that has the focus.
         *
         * In most cases, the default value provides adequate (accessible)
         * behavior, but some users may prefer to set {@link autoSwitch} to false.
         * For a more detailed discussion of this topic, please see the
         * <a href="https://www.w3.org/TR/wai-aria-practices/#kbd_selection_follows_focus" target="_blank">W3C ARIA practices</a>
         * and
         * <a href="http://simplyaccessible.com/article/danger-aria-tabs/" target="_blank">SimplyAccessible</a> articles.
         */
        autoSwitch: boolean;
        /**
         * Gets or sets a value that determines whether users should be allowed
         * to collapse all the items.
         *
         * The default value for this property is <b>false</b>, which ensures
         * one item is always expanded.
         */
        allowCollapseAll: boolean;
        /**
         * Gets or sets a value that determines whether users should be allowed
         * to expand multiple panes at a time.
         *
         * The default value for this property is <b>false</b>, which ensures
         * only one pane is expanded at a time.
         */
        allowExpandMany: boolean;
        /**
         * Gets an {@link AccordionPane} by id or by header content.
         *
         * @param id Id of the {@link AccordionPane} to retrieve.
         */
        getPane(id: string): AccordionPane;
        /**
         * Occurs when the value of the {@link selectedIndex} property changes.
         */
        readonly selectedIndexChanged: Event<Accordion, EventArgs>;
        /**
         * Raises the {@link selectedIndexChanged} event.
         */
        onSelectedIndexChanged(e?: wijmo.EventArgs): void;
        _populateControl(): void;
        _validateSelection(): void;
        private _updateContent;
        private _click;
        private _keydown;
        private _getPaneIndex;
        private _getNextIndex;
    }
    /**
     * Represents a pane in an {@link Accordion} control.
     *
     * Panes have two elements: header and content.
     * The header displays the pane title and the content is a
     * collapsible element that shows the pane content.
     */
    class AccordionPane {
        private _hdr;
        private _content;
        private _acc;
        /**
         * Initializes a new instance of the {@link AccordionPane} class.
         *
         * @param header Element or CSS selector for the element that contains the pane header.
         * @param content Element or CSS selector for the element that contains the pane content.
         */
        constructor(header: any, content: any);
        /**
         * Gets a reference to the {@link Accordion} that contains this Tab.
         */
        readonly accordion: Accordion;
        /**
         * Gets the pane's header element.
         */
        readonly header: HTMLElement;
        /**
         * Gets the panes's content element.
         */
        readonly content: HTMLElement;
        /**
         * Gets or sets a value that determines whether this {@link AccordionPane} is disabled.
         */
        isDisabled: boolean;
        /**
         * Gets or sets a value that determines whether this {@link AccordionPane} is visible.
         */
        isVisible: boolean;
        _setParts(header: HTMLElement, content: HTMLElement): void;
        _setAccordion(accordion: Accordion): void;
    }
}
declare module wijmo.nav {
    /**
     * Provides arguments for the {@link TreeView.formatItem} event.
     */
    class FormatNodeEventArgs extends wijmo.EventArgs {
        _data: any;
        _e: HTMLElement;
        _level: number;
        /**
         * Initializes a new instance of the {@link FormatNodeEventArgs} class.
         *
         * @param dataItem Data item represented by the node.
         * @param element Element that represents the node being formatted.
         * @param level The outline level of the node being formatted.
         */
        constructor(dataItem: any, element: HTMLElement, level: number);
        /**
         * Gets the data item being formatted.
         */
        readonly dataItem: any;
        /**
         * Gets a reference to the element that represents the node being formatted.
         */
        readonly element: HTMLElement;
        /**
         * Gets the outline level of the node being formatted.
         */
        readonly level: number;
    }
    /**
     * Provides arguments for {@link TreeNode}-related events.
     */
    class TreeNodeEventArgs extends wijmo.CancelEventArgs {
        _node: TreeNode;
        /**
         * Initializes a new instance of the {@link TreeNodeEventArgs} class.
         *
         * @param node {@link TreeNode} that this event refers to.
         */
        constructor(node: TreeNode);
        /**
         * Gets the {@link TreeNode} that this event refers to.
         */
        readonly node: TreeNode;
    }
    /**
     * Provides arguments for {@link TreeNode} drag-drop events.
     */
    class TreeNodeDragDropEventArgs extends wijmo.CancelEventArgs {
        _src: TreeNode;
        _tgt: TreeNode;
        _pos: DropPosition;
        /**
         * Initializes a new instance of the {@link TreeNodeEventArgs} class.
         *
         * @param dragSource {@link TreeNode} being dragged.
         * @param dropTarget {@link TreeNode} where the source is being dropped.
         * @param position {@link DropPosition} that this event refers to.
         */
        constructor(dragSource: TreeNode, dropTarget: TreeNode, position: DropPosition);
        /**
         * Gets a reference to the {@link TreeNode} being dragged.
         */
        readonly dragSource: TreeNode;
        /**
         * Gets a reference to the current {@link TreeNode} target.
         */
        readonly dropTarget: TreeNode;
        /**
         * Gets or sets the {@link DropPosition} value that specifies where
         * the {@link TreeNode} will be dropped.
         */
        position: DropPosition;
    }
    /**
     * Specifies the position where a {@link TreeNode} is being dropped during
     * a drag and drop operation.
     */
    enum DropPosition {
        /** The node will become the previous sibling of the target node. */
        Before = 0,
        /** The node will become the next sibling of the target node. */
        After = 1,
        /** The node will become the last child of the target node. */
        Into = 2
    }
}
declare module wijmo.nav {
    /**
     * Class that represents a node in a {@link TreeView}.
     */
    class TreeNode {
        _t: TreeView;
        _e: HTMLElement;
        /**
         * Initializes a new instance of a {@link TreeNode}.
         *
         * @param treeView {@link TreeView} that contains the node.
         * @param nodeElement HTML element that represents the node on the {@link TreeView}.
         */
        constructor(treeView: TreeView, nodeElement: HTMLElement);
        /**
         * Gets the data item that this node represents.
         */
        readonly dataItem: any;
        /**
         * Gets the HTML element that represents this node on the {@link TreeView}.
         */
        readonly element: HTMLElement;
        /**
         * Gets a reference to the {@link TreeView} that contains this node.
         */
        readonly treeView: TreeView;
        /**
         * Ensures that a node is visible by expanding any collapsed
         * ancestors and scrolling the element into view.
         */
        ensureVisible(): void;
        /**
         * Checks whether this node refers to the same element as another node.
         *
         * @param node @TreeNode to compare with this one.
         */
        equals(node: TreeNode): boolean;
        /**
         * Selects this node.
         */
        select(): void;
        /**
         * Gets this node's index within the parent's node collection.
         */
        readonly index: number;
        /**
         * Gets this node's parent node.
         *
         * This property returns null for top-level nodes.
         */
        readonly parentNode: TreeNode;
        /**
         * Gets this node's level.
         *
         * Top-level nodes have level zero.
         */
        readonly level: number;
        /**
         * Gets a value that indicates whether this node has child nodes.
         */
        readonly hasChildren: boolean;
        /**
         * Gets a value that indicates whether this node has pending child nodes
         * that will be lazy-loaded when the node is expanded.
         */
        readonly hasPendingChildren: boolean;
        /**
         * Gets an array containing this node's child nodes.
         *
         * This property returns null if the node has no children.
         */
        readonly nodes: TreeNode[];
        /**
         * Gets the HTMLInputElement that represents the checkbox associated
         * with this node.
         */
        readonly checkBox: HTMLInputElement;
        /**
         * Gets or sets a value that determines whether this node is expanded or collapsed.
         */
        isCollapsed: boolean;
        /**
         * Gets or sets a value that determines whether this node is checked.
         *
         * When the value of this property changes, child and ancestor nodes
         * are automatically updated, and the parent {@link TreeView}'s
         * {@link TreeView.checkedItemsChanged} event is raised.
         */
        isChecked: boolean;
        /**
         * Gets or sets a value that determines whether this node is disabled.
         *
         * Disabled nodes cannot get mouse or keyboard events.
         */
        isDisabled: boolean;
        /**
         * Gets a reference to the previous node in the view.
         *
         * @param visible Whether to return only visible nodes (whose ancestors are not collapsed).
         * @param enabled Whether to return only enabled nodes (whose ancestors are not disabled).
         */
        previous(visible?: boolean, enabled?: boolean): TreeNode;
        /**
         * Gets a reference to the next node in the view.
         *
         * @param visible Whether to return only visible nodes (whose ancestors are not collapsed).
         * @param enabled Whether to return only enabled nodes (whose ancestors are not disabled).
         */
        next(visible?: boolean, enabled?: boolean): TreeNode;
        /**
         * Gets a reference to the previous sibling node in the view.
         */
        previousSibling(): TreeNode;
        /**
         * Gets a reference to the next sibling node in the view.
         */
        nextSibling(): TreeNode;
        /**
         * Sets the collapsed state of the node.
         *
         * @param collapsed Whether to collapse or expand the node.
         * @param animate Whether to use animation when applying the new state.
         * @param collapseSiblings Whether to collapse sibling nodes when expanding
         * this node.
         */
        setCollapsed(collapsed: boolean, animate?: boolean, collapseSiblings?: boolean): void;
        /**
         * Sets the checked state of this node and its children.
         *
         * @param checked Whether to check or uncheck the node and its children.
         * @param updateParent Whether to update the checked state of this node's
         * ancestor nodes.
         */
        setChecked(checked: boolean, updateParent?: boolean): void;
        /**
         * Removes this {@link TreeNode} from a {@link TreeView}.
         */
        remove(): void;
        /**
         * Adds a child node at a specific position.
         *
         * @param index Index of the new child node.
         * @param dataItem Data item used to create the new node.
         * @return The {@link TreeNode} that was added.
         */
        addChildNode(index: number, dataItem: any): TreeNode;
        /**
         * Refreshes a node to reflect data changes.
         *
         * @param dataItem New node data. If not provided, the node is refreshed
         * based on its original data item (which presumably has been updated).
         */
        refresh(dataItem?: any): void;
        /**
         * Moves this {@link TreeNode} to a new position on the {@link TreeView}.
         *
         * @param refNode Reference {@link TreeNode} that defines the location
         * where the node will be moved.
         * @param position Whether to move the node before, after, or into
         * the reference node.
         * @return True if the node was moved successfully.
         */
        move(refNode: any, position: DropPosition): boolean;
        /**
         * Gets the array that contains the items for this {@link TreeNode}.
         *
         * This property is read-only. It returns an array that is a
         * member of the parent {@link TreeView}'s {@link TreeView.itemsSource} array.
         */
        readonly itemsSource: any[];
        _pse(e: HTMLElement): HTMLElement;
        _contains(node: TreeNode): boolean;
        _getArray(): any[];
        _moveElements(refNode: any, position: DropPosition): void;
        _updateState(): void;
        _updateEmptyState(): void;
        _updateCheckedState(): void;
        static _getChildNodes(treeView: TreeView, nodeList: HTMLElement): TreeNode[];
        static _isNode(e: HTMLElement): boolean;
        static _isNodeList(e: HTMLElement): boolean;
        static _isEmpty(node: HTMLElement): boolean;
        static _isCollapsed(node: HTMLElement): boolean;
        static _assertNode(node: HTMLElement): void;
        static _assertNodeList(nodeList: HTMLElement): void;
    }
}
declare module wijmo.nav {
    /**
     * Class that handles hierarchical (multi-level) bindings.
     */
    class _BindingArray {
        _path: any;
        _bindings: wijmo.Binding[];
        _maxLevel: number;
        /**
         * Initializes a new instance of a _BindingArray.
         *
         * @param path String or array of strings to create bindings from.
         */
        constructor(path?: any);
        /**
         * Gets or sets the names of the properties used for binding.
         */
        path: any;
        /**
         * Gets the binding value for a given data item at a given level.
         *
         * @param dataItem Object that contains the data.
         * @param level Binding level to use for retrieving the data.
         */
        getValue(dataItem: any, level: number): any;
        /**
         * Sets the binding value on a given data item at a given level.
         *
         * @param dataItem Object that contains the data.
         * @param level Binding level to use for retrieving the data.
         * @param value Value to apply to the data item.
         */
        setValue(dataItem: any, level: number, value: any): void;
    }
}
declare module wijmo.nav {
    /**
     * Represents a function used to load child nodes asynchronously (lazy-load).
     */
    interface ILazyLoad {
        /**
         * @param node {@link TreeNode} being opened and populated.
         * @param callback {@link ILazyLoadCallback} to be invoked when the node data becomes available.
         */
        (node: TreeNode, callback: ILazyLoadCallback): void;
    }
    /**
     * Represents a callback method used to add lazy-loaded nodes to a {@link TreeNode}.
     */
    interface ILazyLoadCallback {
        /**
         * @param items Array containing child items for the node being lazy-loaded.
         */
        (items: any[]): void;
    }
    /**
     * The {@link TreeView} control displays a hierarchical list of {@link TreeNode}
     * objects which may contain text, checkboxes, images, or arbitrary HTML
     * content.
     *
     * A {@link TreeView} is typically used to display the headings in a document,
     * the entries in an index, the files and directories on a disk, or any other
     * kind of information that might usefully be displayed as a hierarchy.
     *
     * After creating a {@link TreeView}, you will typically set the following
     * properties:
     *
     * <ol>
     *  <li>
     *      {@link itemsSource}: an array that contains the data to be displayed on the
     *      tree.</li>
     *  <li>
     *      {@link displayMemberPath}: the name of the data item property that contains
     *      the text to display on the nodes (defaults to 'header'), and</li>
     *  <li>
     *      {@link childItemsPath}: the name of the data item property that contains the
     *      node's child items (defaults to 'items').</li>
     * </ol>
     *
     * The {@link TreeView} control supports the following keyboard commands:
     *
     * <table>
     *   <thead>
     *     <tr><th>Key Combination</th><th>Action</th></tr>
     *   </thead>
     *   <tbody>
     *     <tr><td>Up/Down</td><td>Select the previous/next visible node</td></tr>
     *     <tr><td>Left</td><td>Collapse the selected node if it has child nodes, select the parent node otherwise</td></tr>
     *     <tr><td>Right</td><td>Expand the selected node if it has child nodes</td></tr>
     *     <tr><td>Home/End</td><td>Select the first/last visible nodes</td></tr>
     *     <tr><td>Space</td><td>Toggle the checkbox in the current node (see the {@link showCheckboxes} property)</td></tr>
     *     <tr><td>Other characters</td><td>Search for nodes that contain the text typed (multi-character auto-search)</td></tr>
     *   </tbody>
     * </table>
     *
     * The example below builds a simple tree and allows you to see the effect
     * of the TreeView's main properties:
     *
     * {@sample Nav/TreeView/Behavior/purejs Example}
     */
    class TreeView extends wijmo.Control {
        static _DATAITEM_KEY: string;
        static _AS_DLY: number;
        static _AN_DLY: number;
        static _CND: string;
        static _CNDL: string;
        static _CEMP: string;
        static _CNDT: string;
        static _CNDC: string;
        static _CSEL: string;
        static _CCLD: string;
        static _CCLG: string;
        static _CLDG: string;
        _root: HTMLElement;
        private _items;
        _selNode: TreeNode;
        _itmPath: _BindingArray;
        _chkPath: _BindingArray;
        private _prevSel;
        private _dspPath;
        private _imgPath;
        private _dd;
        private _html;
        private _animated;
        private _chkOnClick;
        private _xpndOnClick;
        private _xpndOnLoad;
        private _autoColl;
        private _showChk;
        private _chkItems;
        private _ldLvl;
        private _srch;
        private _toSrch;
        private _lazyLoad;
        private _isDirty;
        private _isReadOnly;
        private _edtNode;
        private _toItemsChanged;
        /**
         * Gets or sets the template used to instantiate {@link TreeView} controls.
         */
        static controlTemplate: string;
        /**
         * Initializes a new instance of the {@link TreeView} class.
         *
         * @param element The DOM element that hosts the control, or a CSS selector for the host element (e.g. '#theCtrl').
         * @param options The JavaScript object containing initialization data for the control.
         */
        constructor(element: any, options?: any);
        /**
         * Gets or sets the array that contains the {@link TreeView} items.
         *
         * {@link TreeView} #see:itemsSource arrays usually have a hierarchical
         * structure with items that contain child items. There is no fixed
         * limit to the depth of the items.
         *
         * For example, the array below would generate a tree with three
         * top-level nodes, each with two child nodes:
         *
         * ```typescript
         * import { TreeView } from '@grapecity/wijmo.nav';
         * var tree = new TreeView('#treeView', {
         *     displayMemberPath: 'header',
         *     childItemsPath: 'items',
         *     itemsSource: [
         *         { header: '1 first', items: [
         *             { header: '1.1 first child' },
         *             { header: '1.2 second child' },
         *         ] },
         *         { header: '2 second', items: [
         *             { header: '3.1 first child' },
         *             { header: '3.2 second child' },
         *         ] },
         *         { header: '3 third', items: [
         *             { header: '3.1 first child' },
         *             { header: '3.2 second child' },
         *         ] }
         *     ]
         * });
         * ```
         */
        itemsSource: any[];
        /**
         * Gets or sets the name of the property (or properties) that contains
         * the child items for each node.
         *
         * The default value for this property is the string <b>'items'</b>.
         *
         * In most cases, the property that contains the child items is the
         * same for all data items on the tree. In these cases, set the
         * {@link childItemsPath} to that name.
         *
         * In some cases, however, items at different levels use different
         * properties to store their child items. For example, you could have
         * a tree with categories, products, and orders. In that case, you
         * would set the {@link childItemsPath} to an array such as this:
         *
         * <pre>// categories have products, products have orders:
         * tree.childItemsPath = [ 'Products', 'Orders' ];</pre>
         */
        childItemsPath: string | string[];
        /**
         * Gets or sets the name of the property (or properties) to use as
         * the visual representation of the nodes.
         *
         * The default value for this property is the string <b>'header'</b>.
         *
         * In most cases, the property that contains the node text is the
         * same for all data items on the tree. In these cases, set the
         * {@link displayMemberPath} to that name.
         *
         * In some cases, however, items at different levels use different
         * properties to represent them. For example, you could have
         * a tree with categories, products, and orders. In that case, you
         * might set the {@link displayMemberPath} to an array such as this:
         *
         * <pre>// categories, products, and orders have different headers:
         * tree.displayMemberPath = [ 'CategoryName', 'ProductName', 'OrderID' ];</pre>
         */
        displayMemberPath: string | string[];
        /**
         * Gets or sets the name of the property (or properties) to use as a
         * source of images for the nodes.
         *
         * The default value for this property is an empty string, which
         * means no images are added to the nodes.
         */
        imageMemberPath: string | string[];
        /**
         * Gets or sets the name of the property (or properties) to bind
         * to the node's checked state.
         *
         * See also the {@link showCheckboxes} property and the
         * {@link checkedItemsChanged} event.
         */
        checkedMemberPath: string | string[];
        /**
         * Gets or sets a value indicating whether items are bound to
         * plain text or HTML.
         *
         * The default value for this property is <b>false</b>.
         */
        isContentHtml: boolean;
        /**
         * Gets or sets a value that determines whether the {@link TreeView}
         * should add checkboxes to nodes and manage their state.
         *
         * This property can be used only on trees without lazy-loaded
         * nodes (see the {@link lazyLoadFunction} property).
         *
         * See also the {@link checkedItems} property and {@link checkedItemsChanged}
         * event.
         *
         * The default value for this property is <b>false</b>.
         */
        showCheckboxes: boolean;
        /**
         * Gets or sets a value that determines if sibling nodes should be
         * collapsed when a node is expanded.
         *
         * The default value for this property is <b>true</b>, because in
         * most cases  collapsing nodes that are not in use helps keep the
         * UI clean.
         */
        autoCollapse: boolean;
        /**
         * Gets or sets a value that indicates whether to use animations when
         * expanding or collapsing nodes.
         *
         * The default value for this property is <b>true</b>.
         */
        isAnimated: boolean;
        /**
         * Gets or sets a value that determines whether users can edit the
         * text in the nodes.
         *
         * When the {@link isReadOnly} property is set to false, users may
         * edit the content of the tree nodes by typing directly into the nodes.
         * The F2 key can also be used to enter edit mode with the whole node
         * content selected.
         *
         * You may customize the editing behavior using the following methods
         * and events:
         *
         * <b>Methods</b>: {@link startEditing}, {@link finishEditing}.
         *
         * <b>Events</b>: {@link nodeEditStarting}, {@link nodeEditStarted},
         * {@link nodeEditEnding}, {@link nodeEditEnded}.
         *
         * The default value for this property is <b>true</b>.
         */
        isReadOnly: boolean;
        /**
         * Starts editing a given {@link TreeNode}.
         *
         * @param node {@link TreeNode} to edit. If not provided, the currently
         * selected node is used.
         *
         * @return True if the edit operation started successfully.
         */
        startEditing(node?: TreeNode): boolean;
        /**
         * Commits any pending edits and exits edit mode.
         *
         * @param cancel Whether pending edits should be canceled or committed.
         * @return True if the edit operation finished successfully.
         */
        finishEditing(cancel?: boolean): boolean;
        /**
         * Gets or sets a value that determines whether users can drag and drop nodes
         * within the {@link TreeView}.
         */
        allowDragging: boolean;
        /**
         * Gets or sets a value that determines whether to toggle checkboxes when the
         * user clicks the node header.
         *
         * The default value for this property is <b>false</b>, which causes checkboxes
         * to be toggled only when the user clicks the checkbox itself (not the node header).
         *
         * See also the {@link showCheckboxes} property and the {@link checkedItemsChanged} event.
         */
        checkOnClick: boolean;
        /**
         * Gets or sets a value that determines whether to expand collapsed nodes when
         * the user clicks the node header.
         *
         * The default value for this property is <b>true</b>.
         */
        expandOnClick: boolean;
        /**
         * Gets or sets a value that determines whether to automatically expand the
         * first node when the tree is loaded.
         *
         * The default value for this property is <b>true</b>. If you set it to false,
         * all nodes will be initially collapsed.
         */
        expandOnLoad: boolean;
        /**
         * Gets or sets the data item that is currently selected.
         */
        selectedItem: any;
        /**
         * Gets or sets the {@link TreeNode} that is currently selected.
         */
        selectedNode: TreeNode;
        /**
         * Gets an array containing the text of all nodes from the root
         * to the currently selected node.
         */
        readonly selectedPath: string[];
        /**
         * Gets an array containing the items that are currently checked.
         *
         * The array returned includes only items that have no children.
         * This is because checkboxes in parent items are used to check
         * or uncheck the child items.
         *
         * See also the {@link showCheckboxes} property and the
         * {@link checkedItemsChanged} event.
         *
         * For example:
         *
         * ```typescript
         * import { TreeView } from '@grapecity/wijmo.nav';
         * var treeViewChk = new TreeView('#gsTreeViewChk', {
         *    displayMemberPath: 'header',
         *    childItemsPath: 'items',
         *    showCheckboxes: true,
         *    itemsSource: items,
         *    checkedItemsChanged: function (s, e) {
         *        var items = s.checkedItems,
         *            msg = '';
         *        if (items.length) {
         *            msg = '&lt;p&gt;&lt;b&gt;Selected Items:&lt;/b&gt;&lt;/p&gt;&lt;ol&gt;\r\n';
         *            for (var i = 0; i &lt; items.length; i++) {
         *                msg += '&lt;li&gt;' + items[i].header + '&lt;/li&gt;\r\n';
         *            }
         *            msg += '&lt;/ol&gt;';
         *        }
         *        document.getElementById('gsTreeViewChkStatus').innerHTML = msg;
         *    }
         * });
         * ```
         */
        checkedItems: any[];
        /**
         * Checks or unchecks all checkboxes on the tree.
         *
         * @param check Whether to check or uncheck all checkboxes.
         */
        checkAllItems(check: boolean): void;
        /**
         * Gets the total number of items in the tree.
         */
        readonly totalItemCount: number;
        /**
         * Gets or sets a function that loads child nodes on demand.
         *
         * The {@link lazyLoadFunction} takes two parameters: the node being
         * expanded and a callback to be invoked when the data becomes
         * available.
         *
         * The callback function tells the {@link TreeView} that the node
         * loading process has been completed. It should always be called,
         * even if there are errors when loading the data.
         *
         * For example:
         *
         * ```typescript
         * import { TreeView } from '@grapecity/wijmo.nav';
         * var treeViewLazyLoad = new TreeView('#treeViewLazyLoad', {
         *    displayMemberPath: 'header',
         *    childItemsPath: 'items',
         *    itemsSource: [ // start with three lazy-loaded nodes
         *        { header: 'Lazy Node 1', items: []},
         *        { header: 'Lazy Node 2', items: [] },
         *        { header: 'Lazy Node 3', items: [] }
         *    ],
         *    lazyLoadFunction: function (node, callback) {
         *        setTimeout(function () { // simulate http delay
         *            var result = [ // simulate result
         *                { header: 'Another lazy node...', items: [] },
         *                { header: 'A non-lazy node without children' },
         *                { header: 'A non-lazy node with child nodes', items: [
         *                  { header: 'hello' },
         *                  { header: 'world' }
         *                ]}
         *            ];
         *            callback(result); // return result to control
         *        }, 2500); // simulated 2.5 sec http delay
         *    }
         *});
         * ```
         *
         * Trees with lazy-loaded nodes have some restrictions: their nodes
         * may not have checkboxes (see the {@link showCheckboxes} property) and
         * the {@link collapseToLevel} method will not expand collapsed nodes
         * that have not been loaded yet.
         */
        lazyLoadFunction: ILazyLoad;
        /**
         * Gets a reference to the first {@link TreeNode} in the {@link TreeView}.
         *
         * @param visible Whether to return only visible nodes (whose ancestors are not collapsed).
         * @param enabled Whether to return only enabled nodes (whose ancestors are not disabled).
         */
        getFirstNode(visible?: boolean, enabled?: boolean): TreeNode;
        /**
         * Gets a reference to the last {@link TreeNode} in the {@link TreeView}.
         *
         * @param visible Whether to return only visible nodes (whose ancestors are not collapsed).
         * @param enabled Whether to return only enabled nodes (whose ancestors are not disabled).
         */
        getLastNode(visible?: boolean, enabled?: boolean): TreeNode;
        /**
         * Gets an array of {@link TreeNode} objects representing the nodes
         * currently loaded.
         */
        readonly nodes: TreeNode[];
        /**
         * Gets the {@link TreeNode} object representing a given data item.
         *
         * @param item The data item to look for.
         */
        getNode(item: any): TreeNode;
        /**
         * Adds a child node at a specific position.
         *
         * @param index Index of the new child node.
         * @param dataItem Data item used to create the new node.
         * @return The {@link TreeNode} that was added.
         */
        addChildNode(index: number, dataItem: any): TreeNode;
        /**
         * Collapses all the tree items to a given level.
         *
         * This method will typically expand or collapse multiple nodes
         * at once. But it will not perform lazy-loading on any nodes,
         * so collapsed nodes that must be lazy-loaded will not be
         * expanded.
         *
         * @param level Maximum node level to show.
         */
        collapseToLevel(level: number): void;
        /**
         * Loads the tree using data from the current {@link itemsSource}.
         *
         * @param preserveOutlineState Whether to preserve the outline state when loading the
         * tree data. Defaults to false.
         */
        loadTree(preserveOutlineState?: boolean): void;
        /**
         * Occurs when the value of the {@link itemsSource} property changes.
         */
        readonly itemsSourceChanged: Event<TreeView, EventArgs>;
        /**
         * Raises the {@link itemsSourceChanged} event.
         */
        onItemsSourceChanged(e?: wijmo.EventArgs): void;
        /**
         * Occurs before the tree items are generated.
         */
        readonly loadingItems: Event<TreeView, CancelEventArgs>;
        /**
         * Raises the {@link loadingItems} event.
         * @return True if the event was not canceled.
         */
        onLoadingItems(e?: wijmo.CancelEventArgs): boolean;
        /**
         * Occurs after the tree items have been generated.
         */
        readonly loadedItems: Event<TreeView, EventArgs>;
        /**
         * Raises the {@link loadedItems} event.
         */
        onLoadedItems(e?: wijmo.EventArgs): void;
        /**
         * Occurs when the user clicks an item or presses the Enter key and an item is selected.
         *
         * This event is typically used in navigation trees. Use the {@link selectedItem} property
         * to get the item that was clicked.
         */
        readonly itemClicked: Event<TreeView, EventArgs>;
        /**
         * Raises the {@link itemClicked} event.
         */
        onItemClicked(e?: wijmo.EventArgs): void;
        /**
         * Occurs when the value of the {@link selectedItem} property changes.
         */
        readonly selectedItemChanged: Event<TreeView, EventArgs>;
        /**
         * Raises the {@link selectedItemChanged} event.
         */
        onSelectedItemChanged(e?: wijmo.EventArgs): void;
        /**
         * Occurs when the value of the {@link checkedItems} property changes.
         *
         * See also the {@link showCheckboxes} and {@link checkOnClick}
         * properties.
         */
        readonly checkedItemsChanged: Event<TreeView, EventArgs>;
        /**
         * Raises the {@link checkedItemsChanged} event.
         */
        onCheckedItemsChanged(e?: wijmo.EventArgs): void;
        /**
         * Occurs before the value of the {@link TreeNode.isCollapsed} property changes.
         */
        readonly isCollapsedChanging: Event<TreeView, TreeNodeEventArgs>;
        /**
         * Raises the {@link isCollapsedChanging} event.
         *
         * @param e {@link TreeNodeEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onIsCollapsedChanging(e: TreeNodeEventArgs): boolean;
        /**
         * Occurs after the value of the {@link TreeNode.isCollapsed} property changes.
         */
        readonly isCollapsedChanged: Event<TreeView, TreeNodeEventArgs>;
        /**
         * Raises the {@link isCollapsedChanged} event.
         *
         * @param e {@link TreeNodeEventArgs} that contains the event data.
         */
        onIsCollapsedChanged(e: TreeNodeEventArgs): void;
        /**
         * Occurs before the value of the {@link TreeNode.isChecked} property changes.
         */
        readonly isCheckedChanging: Event<TreeView, TreeNodeEventArgs>;
        /**
         * Raises the {@link isCheckedChanging} event.
         *
         * @param e {@link TreeNodeEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onIsCheckedChanging(e: TreeNodeEventArgs): boolean;
        /**
         * Occurs after the value of the {@link TreeNode.isChecked} property changes.
         */
        readonly isCheckedChanged: Event<TreeView, TreeNodeEventArgs>;
        /**
         * Raises the {@link isCheckedChanged} event.
         *
         * @param e {@link TreeNodeEventArgs} that contains the event data.
         */
        onIsCheckedChanged(e: TreeNodeEventArgs): void;
        /**
         * Occurs when an element representing a node has been created.
         *
         * This event can be used to format nodes for display.
         *
         * The example below uses the <b>formatItem</b> event to add a "new" badge to the
         * right of new items on the tree.
         *
         * ```typescript
         * import { TreeView } from '@grapecity/wijmo.nav';
         * var treeViewFmtItem = new TreeView('#treeViewFmtItem', {
         *     displayMemberPath: 'header',
         *     childItemsPath: 'items',
         *     itemsSource: items,
         *     formatItem: function (s, e) {
         *         if (e.dataItem.newItem) {
         *             e.element.innerHTML +=
         *                 '&lt;img style="margin-left:6px" src="resources/new.png"/&gt;';
         *         }
         *     }
         * });
         * ```
         */
        readonly formatItem: Event<TreeView, FormatNodeEventArgs>;
        /**
         * Raises the {@link formatItem} event.
         *
         * @param e {@link FormatNodeEventArgs} that contains the event data.
         */
        onFormatItem(e: FormatNodeEventArgs): void;
        /**
         * Occurs when the user starts dragging a node.
         *
         * This event only occurs if the {@link allowDragging} property is set to true.
         *
         * You may prevent nodes from being dragged by setting the event's
         * <b>cancel</b> parameter to true.
         */
        readonly dragStart: Event<TreeView, TreeNodeEventArgs>;
        /**
         * Raises the {@link dragStart} event.
         *
         * @param e {@link TreeNodeEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onDragStart(e: TreeNodeEventArgs): boolean;
        /**
         * Occurs while the user drags a node over other nodes on the {@link TreeView}.
         *
         * This event only occurs if the {@link allowDragging} property is set to true.
         *
         * You may prevent drop operations over certain nodes and/or positions by
         * setting the event's <b>cancel</b> parameter to true.
         */
        readonly dragOver: Event<TreeView, TreeNodeDragDropEventArgs>;
        /**
         * Raises the {@link dragOver} event.
         *
         * @param e {@link TreeNodeDragDropEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onDragOver(e: TreeNodeDragDropEventArgs): boolean;
        /**
         * Occurs when the user drops a on the {@link TreeView}.
         * @return True if the event was not canceled.
         */
        readonly drop: Event<TreeView, TreeNodeDragDropEventArgs>;
        /**
         * Raises the {@link drop} event.
         *
         * @param e {@link TreeNodeDragDropEventArgs} that contains the event data.
         */
        onDrop(e: TreeNodeDragDropEventArgs): boolean;
        /**
         * Occurs when the user finishes a drag/drop operation, either by dropping
         * a node into a new location or by canceling the operation with the mouse
         * or keyboard.
         */
        readonly dragEnd: Event<TreeView, EventArgs>;
        /**
         * Raises the {@link dragEnd} event.
         */
        onDragEnd(e?: wijmo.EventArgs): void;
        /**
         * Occurs before a {@link TreeNode} enters edit mode.
         */
        readonly nodeEditStarting: Event<TreeView, TreeNodeEventArgs>;
        /**
         * Raises the {@link nodeEditStarting} event.
         *
         * @param e {@link TreeNodeEventArgs} that contains the event data.
         * @return True if the event was not canceled.
        */
        onNodeEditStarting(e: TreeNodeEventArgs): boolean;
        /**
         * Occurs after a {@link TreeNode} has entered edit mode.
         */
        readonly nodeEditStarted: Event<TreeView, TreeNodeEventArgs>;
        /**
         * Raises the {@link nodeEditStarted} event.
         *
         * @param e {@link TreeNodeEventArgs} that contains the event data.
         */
        onNodeEditStarted(e: TreeNodeEventArgs): void;
        /**
         * Occurs before a {@link TreeNode} exits edit mode.
         */
        readonly nodeEditEnding: Event<TreeView, TreeNodeEventArgs>;
        /**
         * Raises the {@link nodeEditEnding} event.
         *
         * @param e {@link TreeNodeEventArgs} that contains the event data.
         * @return True if the event was not canceled.
         */
        onNodeEditEnding(e: TreeNodeEventArgs): boolean;
        /**
         * Occurs after a {@link TreeNode} has exited edit mode.
         */
        readonly nodeEditEnded: Event<TreeView, TreeNodeEventArgs>;
        /**
        * Raises the {@link nodeEditEnded} event.
        *
        * @param e {@link TreeNodeEventArgs} that contains the event data.
        */
        onNodeEditEnded(e: TreeNodeEventArgs): void;
        /**
         * Overridden to re-populate the tree.
         *
         * @param fullUpdate Indicates whether to update the control layout as well as the content.
         */
        refresh(fullUpdate?: boolean): void;
        _updateFocus(oldNode: TreeNode): void;
        _raiseCheckedItemsChanged(): void;
        _reload(): void;
        _createNode(dataItem: any): TreeNode;
        private _mousedown;
        private _click;
        private _keydown;
        private _keypress;
        private _findNext;
        private _loadTree;
        private _addItem;
        private _collapseToLevel;
        _lazyLoadNode(node: TreeNode): void;
        private _lazyLoadCallback;
        private _lazyLoadNodeDone;
    }
}
declare module wijmo.nav {
    /**
     * Class that handles drag/drop operations for a {@link TreeView}.
     */
    class _TreeDragDropManager {
        private _tree;
        private _dragstartBnd;
        private _dragoverBnd;
        private _dragendBnd;
        private _dropBnd;
        private static _dMarker;
        private static _drgSrc;
        /**
         * Initializes a new instance of a {@link _TreeViewDragDropManager}.
         *
         * @param treeView {@link TreeView} managed by this {@link _TreeViewDragDropManager}.
         */
        constructor(treeView: TreeView);
        /**
         * Disposes of this {@link _TreeViewDragDropManager}
         */
        dispose(): void;
        private _dragstart;
        private _dragover;
        private _drop;
        private _dragend;
        private _keydown;
        private _handleDragDrop;
        private _showDragMarker;
    }
}
declare module wijmo.nav {
}

/// <reference path="../../../../Shared/WijmoMVC/dist/controls/wijmo.d.ts" />
/**
 * Defines the C1 controls, associated functions and classes.
 */
declare module c1 {
    /**
     * Gets the extender with specified owner and id.
     *
     * @param owner The @see:wijmo.Control who has the extender.
     * @param id The extender's id.
     */
    function getExtender(owner: wijmo.Control, id: string): Object;
    /**
     * Gets the extenders with specified owner and type.
     *
     * For example, below code is used for getting all LineMarker extenders
     * from the chart1 which is an instance of FlexChart.
     * <pre>
     * var lineMarkers = c1.getExtenders(chart1, wijmo.chart.LineMarker);
     * </pre>
     *
     * Note: if type is not passed, this returns all extenders under the owner.
     *
     * @param owner The @see:wijmo.Control who has the extender.
     * @param type The extender's type. It is optional.
     */
    function getExtenders(owner: wijmo.Control, type?: any): Object[];
    function _addExtender(owner: wijmo.Control, id: string, extender: Object): void;
    function _addEvent(prop: any, value: any): boolean;
    function _findFunction(name: string): Window & typeof globalThis;
    /**
     * Specify a function to execute when the DOM is fully loaded.
     *
     * @param callback A function to execute after the DOM is ready.
     */
    function documentReady(callback: Function): void;
    function _getExtension(owner: wijmo.Control, extensionType: any): any;
    class _Initializer {
        private _control;
        constructor(control: Object);
        get control(): Object;
        _override(): void;
        private static _overrideCopy;
    }
    class _ControlWrapper {
        private _control;
        static _DATA_KEY: string;
        constructor(element: any, options?: any);
        _beforeCreateControl(options?: any): void;
        private _createControl;
        private _bindControl;
        static setWrapper(control: wijmo.Control, wrapper: _ControlWrapper): void;
        static getWrapper(control: wijmo.Control): _ControlWrapper;
        private _initExtensions;
        initialize(): void;
        _getExtensionTypes(): any[];
        get _initializerType(): any;
        get _controlType(): any;
        get control(): wijmo.Control;
    }
}

declare module c1 {
    function _registerService(key: string, serviceCtor?: any, opts?: any): any;
    function _disposeService(key: string): void;
    /**
     * Gets the service instance according to the specified key.
     * Till now two kinds of services could be returned:
     * @see:c1.mvc.collections.RemoteCollectionView and @see:wijmo.olap.PivotEngine.
     *
     * For example:
     *
     * <pre>// gets the CollectionView object which id is 'collectionview1'.
     * var cv = c1.getService('collectionview1');
     * </pre>
     *
     * @param id The service id.
     * @return A service object with the specified id.
     */
    function getService(id: string): Object;
}

/// <reference path="../../../../Shared/WijmoMVC/dist/controls/wijmo.d.ts" />
/**
 * Defines common types in c1.mvc module.
 */
declare module c1.mvc {
    /**
         * Specifies whether a Date object represents a local time, a Coordinated
         * Universal Time (UTC), or is not specified as either local time or UTC.
         */
    enum DateKind {
        /** The time represented is not specified as either local time or Coordinated Universal Time (UTC). */
        Unspecified = 1,
        /** The time represented is local time. */
        Local = 2,
        /** The time represented is UTC. */
        Utc = 3
    }
    /**
     * Provides arguments for json operation events.
     */
    class JSONOperationEventArgs extends wijmo.CancelEventArgs {
        private _parent;
        private _key;
        private _value;
        private _result;
        /**
         * Casts the specified object to @see:c1.mvc.JSONOperationEventArgs type.
         * @param obj The object to cast.
         * @return The object passed in.
         */
        static cast(obj: any): JSONOperationEventArgs;
        /**
         * Initializes a new instance of the @see:JSONOperationEventArgs class.
         *
         * @param key The name of the item.
         * @param value The value of the item.
         * @param parent The object owns the item.
         */
        constructor(key: string, value: any, parent: any);
        /**
        * Gets the parent object which owns the item.
        */
        get parent(): string;
        /**
         * Gets the value of the item.
         */
        get value(): any;
        /**
         * Gets the name of the item.
         */
        get key(): any;
        /**
         * Gets or sets the operation result for some item.
         */
        get result(): any;
        set result(value: any);
    }
}

/// <reference path="../../../../Shared/WijmoMVC/dist/controls/wijmo.d.ts" />
/**
 * Defines interfaces and classes related to data.
 */
declare module c1.mvc.collections {
    /**
     * Provides arguments for queryData events.
     */
    class QueryEventArgs extends wijmo.EventArgs {
        /**
         * Casts the specified object to @see:c1.mvc.collections.QueryEventArgs type.
         * @param obj The object to cast.
         * @return The object passed in.
         */
        static cast(obj: any): QueryEventArgs;
        /**
         * Gets or sets the extra data for the query.
         */
        extraRequestData: any;
    }
    /**
     * Provides arguments for queryComplete events.
     */
    class QueryCompleteEventArgs extends wijmo.EventArgs {
        private _result;
        /**
         * Casts the specified object to @see:c1.mvc.collections.QueryCompleteEventArgs type.
         * @param obj The object to cast.
         * @return The object passed in.
         */
        static cast(obj: any): QueryCompleteEventArgs;
        /**
         * Initializes a new instance of the @see:QueryCompleteEventArgs class.
         *
         * @param result The operation result of the query.
         */
        constructor(result: IOperationResult);
        /**
        * Gets the operation result of the query.
        */
        get result(): IOperationResult;
    }
    /**
     * Provides arguments for error events.
     */
    class ErrorEventArgs extends wijmo.CancelEventArgs {
        private _errors;
        /**
         * Casts the specified object to @see:c1.mvc.collections.ErrorEventArgs type.
         * @param obj The object to cast.
         * @return The object passed in.
         */
        static cast(obj: any): ErrorEventArgs;
        /**
         * Initializes a new instance of the @see:ErrorEventArgs class.
         *
         * @param errors The errors from server side.
         */
        constructor(errors: string[]);
        /**
         * Gets or sets the errors from server side.
         */
        get errors(): string[];
    }
    /**
     * Extends @see:wijmo.collections.CollectionView to support remote data service.
     *
     * You can use the result objects from the data service as data sources for any Wijmo controls,
     * and in addition to full CRUD support and real-time updates you automatically get
     * CollectionView features including sorting, filtering, paging, grouping, and editing.
     */
    class RemoteCollectionView extends wijmo.collections.CollectionView {
        private _totalItemCount;
        private _disableServerRead;
        private _requestParams;
        private _createActionUrl;
        private _readActionUrl;
        private _deleteActionUrl;
        private _updateActionUrl;
        _batchEditActionUrl: string;
        _batchEdit: boolean;
        _queryList: any[];
        private _errors;
        private _initialItemsCount;
        private _skip;
        private _top;
        private _isInitializing;
        private _isFillingData;
        private _query;
        private _isUpdatingItem;
        private _isGrouping;
        private _needMoveCurrentToFirst;
        _dataInfo: any;
        private _nullCount;
        private newItems;
        private _reservedItems;
        _flexGridSearchs: any[];
        _refreshOnEdit: boolean;
        _frozenRows: number;
        /**
         * Casts the specified object to @see:c1.mvc.collections.RemoteCollectionView type.
         * @param obj The object to cast.
         * @return The object passed in.
         */
        static cast(obj: any): RemoteCollectionView;
        /**
         * Raises the @see:sourceCollectionChanged event.
         */
        onSourceCollectionChanged(e?: wijmo.EventArgs): void;
        _ensureDataInfo(data: any[]): void;
        private _updateDataInfoForNull;
        private _updateDataInfo;
        private _updateObjectInfo;
        static _processRequestRowData(rowData: any, dataInfo: any): void;
        /**
         * Initializes a new instance of a @see:RemoteCollectionView.
         *
         * @param options A @see:IRemoteCollectionViewSettings object with query options (such as take, skip, sort, etc).
         */
        constructor(options: IRemoteCollectionViewSettings);
        /**
         * Occurs when the query requests complete.
         */
        queryComplete: wijmo.Event<any, wijmo.EventArgs>;
        /**
         * Raises the <b>queryComplete</b> event.
         *
         * @param e @see:QueryCompleteEventArgs that contains the event data.
         */
        onQueryComplete(e: QueryCompleteEventArgs): void;
        beginQuery: wijmo.Event<any, wijmo.EventArgs>;
        onBeginQuery(): void;
        endQuery: wijmo.Event<any, wijmo.EventArgs>;
        onEndQuery(): void;
        _isQuerying(): boolean;
        /**
         * The event fires when collect the ajax query data.
         */
        queryData: wijmo.Event<any, wijmo.EventArgs>;
        /**
         * Raises the @see:queryData event.
         *
         * @param e A @see:QueryEventArgs object.
         */
        onQueryData(e: QueryEventArgs): void;
        /**
         * The error event which raises when there are errors from the server side.
         */
        error: wijmo.Event<any, wijmo.EventArgs>;
        /**
         * Raises the @see:error event.
         *
         * @param e A @see:ErrorEventArgs object.
         */
        onError(e: ErrorEventArgs): boolean;
        /**
         * Occurs when parsing the response text.
         */
        reponseTextParsing: wijmo.Event<any, wijmo.EventArgs>;
        /**
         * Raises the @see:reponseTextParsing event.
         *
         * @param e A @see:JSONOperationEventArgs object.
         */
        onReponseTextParsing(e: JSONOperationEventArgs): boolean;
        /**
         * Occurs when serializing the request data.
         */
        requestDataStringifying: wijmo.Event<any, wijmo.EventArgs>;
        /**
         * Raises the @see:requestDataStringifying event.
         *
         * @param e A @see:JSONOperationEventArgs object.
         */
        onRequestDataStringifying(e: JSONOperationEventArgs): boolean;
        requireInitData(options: IRemoteCollectionViewSettings): void;
        private _applySettings;
        private _initEventsOpts;
        private _initialize;
        /**
         * Force to refresh the view using the current sort, filter and group parameters.
         * When calling this method, an ajax request will be sent to server side to fecth data.
         */
        forceRefresh(): void;
        /**
         * Re-creates the view using the current sort, filter, and group parameters.
         * When the data is not cached in client-side, an ajax request will be sent
         * to server side to fecth data.
         */
        refresh(): void;
        /**
         * Commit and refresh the view using the current sort, filter, and group parameters.
         * When the data is not cached in client-side, an ajax request will be sent
         * to server side to fecth data.
         */
        _commitAndRefresh(): void;
        _isSearching(): boolean;
        _performRefresh(): void;
        /**
         * Raises the @see:collectionChanged event.
         *
         * @param e Contains a description of the change.
         */
        onCollectionChanged(e?: wijmo.collections.NotifyCollectionChangedEventArgs): void;
        _getPageView(): any[];
        /**
         * Override pageCount to get the total number pages.
         */
        get pageCount(): number;
        /**
         * Raises the @see:pageChanging event.
         *
         * @param e @see:wijmo.collections.PageChangingEventArgs that contains the event data.
         */
        onPageChanging(e: wijmo.collections.PageChangingEventArgs): boolean;
        /**
         * Override commitNew to add the new item to the data source.
         * When @see:IRemoteCollectionViewSettings.createActionUrl or batch editing is
         * used, an ajax request will be sent to server side to update the data source.
         */
        commitNew(): void;
        /**
         * Override commitEdit to modify the item in the database.
         * When @see:IRemoteCollectionViewSettings.updateActionUrl or batch editing is
         * used, an ajax request will be sent to server side to update the data source.
         */
        commitEdit(): void;
        /**
         * Override remove to remove the item from the database.
         * When @see:IRemoteCollectionViewSettings.deleteActionUrl or batch editing is
         * used, an ajax request will be sent to server side to update the data source.
         *
         * @param item The item used to be removed.
         */
        remove(item: any): void;
        /**
         * Commit all the changes to the database.
         * When the editing url in @see:IRemoteCollectionViewSettings or batch editing is used,
         * an ajax request will be sent to server side to comment the changes to the data source.
         */
        commit(): void;
        private _processErrors;
        private _showErrors;
        private _success;
        _isPartialDataLoaded(): boolean;
        _isDynamicalLoadingEnabled(): boolean;
        _isDisableServerRead(): boolean;
        _fillData(items: any[], start: number, totalItemCount: number): void;
        _clearReservedItems(): void;
        _addReservedItem(index: number): void;
        private _reset;
        private _fail;
        private _updateAjaxSettings;
        private _upatePageAjaxSettings;
        private _updateSortAjaxSettings;
        private _getSortDesByExpression;
        private _updateQueryAjaxSettings;
        private _collectExtraRequestData;
        _ajax(settings: any): void;
        /**
         * Get the whole column data.
         *
         * @param column The column name.
         * @param distinct A boolean value indicates whether to get the distinct data records.
         * @param success A function to be called when the response comes back.
         */
        getColumnData(column: string, distinct: boolean, success: ICollectionViewResponseHandler): void;
        /**
         * Get the whole data.
         *
         * @param success A function to be called when the response comes back.
         */
        getAllData(success: ICollectionViewResponseHandler): void;
        _sendQueryWithoutUpdate(success: ICollectionViewResponseHandler, requestParams: any): void;
        private _sendRequest;
        private _sendQuery;
        /**
         * Prepare the items from startRow to endRow.
         *
         * @param startRow The start row index.
         * @param endRow The end row index.
         */
        requestItems(startRow: number, endRow: number): void;
        private _caculateRangeRow;
        private _requestRead;
        private _getWriteUrl;
        private _toCamelCase;
        private _updateOperatingItems;
        requestWrite(operationType: CommandType, items?: any): void;
        private _requestWrite;
        get totalItemCount(): number;
        _isRemoteMode(): boolean;
    }
    /**
     * Extends @see:RemoteCollectionView to support data service provided by control callback.
     *
     * You can use the result objects from the data service as data sources for any Wijmo controls,
     * and in addition to full CRUD support and real-time updates you automatically get
     * CollectionView features including sorting, filtering, paging, grouping, and editing.
     */
    class CallbackCollectionView extends RemoteCollectionView {
        private _uniqueId;
        private _cbk;
        /**
         * Casts the specified object to @see:c1.mvc.collections.CallbackCollectionView type.
         * @param obj The object to cast.
         * @return The object passed in.
         */
        static cast(obj: any): CallbackCollectionView;
        constructor(options: ICallBackCollectionViewSettings);
        requireInitData(options: ICallBackCollectionViewSettings): void;
        getCallbackManager(): any;
        _ajax(settings: any): void;
    }
    interface ICallBackCollectionViewSettings extends IRemoteCollectionViewSettings {
        sourceCollection?: any[];
        items?: any[];
        totalItemCount?: number;
        uniqueId: string;
    }
    /**
     * The @see:RemoteCollectionView startup options.
     */
    interface IRemoteCollectionViewSettings {
        /**
         * The page index.
         */
        pageIndex?: number;
        /**
         * The page size.
         */
        pageSize?: number;
        /**
         * An array of @see:ISortDescription for sort setting.
         */
        sortDescriptions?: ISortDescription[];
        /**
         * An array of @see:IGroupDescription for group setting.
         */
        groupDescriptions?: IGroupDescription[];
        /**
         * A boolean value indicates whether to get and cache all server side data.
         * True means to get all server side data and cache them in client side,
         * then not to call server side to fetch data for later.
         */
        disableServerRead?: boolean;
        /**
         * The url for creating item.
         */
        createActionUrl?: string;
        /**
         * The url for reading data.
         */
        readActionUrl?: string;
        /**
         * The url for deleting item.
         */
        deleteActionUrl?: string;
        /**
         * The url for updating item.
         */
        updateActionUrl?: string;
        /**
         * The url for batch editing items.
         */
        batchEditActionUrl?: string;
        /**
         * A boolean value indicates whether to edit items in batch.
         */
        batchEdit?: boolean;
        /**
         * The count of the data which are read from server side at first time.
         */
        initialItemsCount?: number;
        /**
         * The queryData event which raises when collect the ajax query data.
         */
        queryData?: wijmo.IEventHandler;
        /**
        * The queryComplete event which raises when the query requests complete.
        */
        queryComplete?: wijmo.IEventHandler;
        /**
         * The error event which raises when there are errors from the server side.
         */
        error?: wijmo.IEventHandler;
        /**
         * The underlying (unfiltered and unsorted) collection.
         */
        sourceCollection?: any;
        /**
         * Occurs when parsing the response text.
         */
        reponseTextParsing?: wijmo.IEventHandler;
        /**
         * Occurs when serializing the request data.
         */
        requestDataStringifying?: wijmo.IEventHandler;
        /**
         * A boolean value indicates whether to refresh all cells after a cell is edited.
         */
        refreshOnEdit?: boolean;
    }
    interface ICollectionViewRequest {
        pageIndex?: number;
        pageSize?: number;
        sortDescriptions?: ISortDescription[];
        command?: string;
        operatingItems?: any;
        extraRequestData?: any;
        skip?: number;
        top?: number;
    }
    /**
     * The data callback response messages.
     */
    interface ICollectionViewResponse extends IOperationResult {
        /**
         * The requested data items.
         */
        items?: any[];
        /**
         * The page index.
         */
        pageIndex?: number;
        /**
         * The total item count before paging.
         */
        totalItemCount?: number;
        /**
         * The results of the data operations: create, update, delete and batch edit.
         */
        operatedItemResults?: ICollectionViewItemResult[];
        /**
         * The number of items to skip before returning the request items.
         */
        skip?: number;
        /**
         * The request one column data.
         */
        columnData?: any[];
    }
    /**
     * Represents a handler of a @see:RemoteCollectionView response.
     */
    interface ICollectionViewResponseHandler {
        (res: ICollectionViewResponse): void;
    }
    /**
     * The result of operating a CollectionView item.
     */
    interface ICollectionViewItemResult extends IOperationResult {
        /**
         * The operated item.
         */
        item: any;
    }
    /**
     * The result of an operation.
     */
    interface IOperationResult {
        /**
         * A boolean value indicates wheter the operation is success.
         */
        success?: boolean;
        /**
         * The error message.
         */
        error?: string;
    }
    /**
     * Options that describes a sort operation.
     */
    interface ISortDescription {
        /**
         * The field name.
         */
        property: string;
        /**
         * Sort the data by ascending or descending.
         */
        ascending?: boolean;
        /**
         * Gets or sets a value that determines whether null values should appear
         * first or last when the collection is sorted (regardless of sort direction).
         */
        sortNullsFirst?: boolean;
        /**
         * Gets or sets a value that determines how null values should be sorted.
         *
         * This property is set to <b>Last</b> default, which causes null values
         * to appear last on the sorted collection, regardless of sort direction.
         * This is also the default behavior in Excel.
         */
        sortNulls: SortNulls;
    }
    /**
     * Options that describes a group operation.
     */
    interface IGroupDescription {
        /**
         * The class which is derived from @see:wijmo.collections.GroupDescription.
         */
        clientClass: Function;
    }
    /**
     * Options that describes a group operation by property.
     */
    interface IPropertyGroupDescription extends IGroupDescription {
        /**
         * The property name.
         */
        propertyName: string;
        /**
         * A callback function that takes an item and a property name and returns
         * the group name. If not specified, the group name is the property value
         * for the item.
         */
        converter?: wijmo.collections.IGroupConverter;
    }
    interface IRowRange {
        start: number;
        end: number;
    }
    interface _IReservedItem {
        index: number;
        data: any;
    }
    /**
     * The command type of CollectionView's request.
     */
    enum CommandType {
        /** The type of reading data. */
        Read = 0,
        /** The type of creating data. */
        Create = 1,
        /** The type of updating data. */
        Update = 2,
        /** The type of deleting data. */
        Delete = 3,
        /** The type of batch modifying data. */
        BatchEdit = 4
    }
    /**
     * Specifies constants that define how null values are sorted.
     */
    enum SortNulls {
        /** Null values are sorted in natural order (first in ascending, last in descending order). */
        Natural = 0,
        /** Null values appear first (regardless of sort order). */
        First = 1,
        /** Null values appear last (regardless of sort order). */
        Last = 2
    }
}

declare module wijmo.Control {
    /**
     * Casts the specified object to @see:wijmo.Control type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): Control;
}
declare module wijmo.CancelEventArgs {
    /**
     * Casts the specified object to @see:wijmo.CancelEventArgs type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): CancelEventArgs;
}
declare module wijmo.EventArgs {
    /**
     * Casts the specified object to @see:wijmo.EventArgs type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): EventArgs;
}
declare module wijmo.PropertyChangedEventArgs {
    /**
     * Casts the specified object to @see:wijmo.PropertyChangedEventArgs type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): PropertyChangedEventArgs;
}
declare module wijmo.RequestErrorEventArgs {
    /**
     * Casts the specified object to @see:wijmo.RequestErrorEventArgs type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): RequestErrorEventArgs;
}
declare module wijmo.Tooltip {
    /**
     * Casts the specified object to @see:wijmo.Tooltip type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): Tooltip;
}
declare module wijmo.TooltipEventArgs {
    /**
     * Casts the specified object to @see:wijmo.TooltipEventArgs type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): TooltipEventArgs;
}

declare module wijmo.collections.CollectionView {
    /**
     * Casts the specified object to @see:wijmo.collections.CollectionView type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): CollectionView;
}
declare module wijmo.collections.NotifyCollectionChangedEventArgs {
    /**
     * Casts the specified object to @see:wijmo.collections.NotifyCollectionChangedEventArgs type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): NotifyCollectionChangedEventArgs;
}
declare module wijmo.collections.PageChangingEventArgs {
    /**
     * Casts the specified object to @see:wijmo.collections.PageChangingEventArgs type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): PageChangingEventArgs;
}
declare module wijmo.collections.PropertyGroupDescription {
    /**
     * Casts the specified object to @see:wijmo.collections.PropertyGroupDescription type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): PropertyGroupDescription;
}
declare module wijmo.collections.SortDescription {
    /**
     * Casts the specified object to @see:wijmo.collections.SortDescription type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): SortDescription;
}
declare module wijmo.collections.GroupDescription {
    /**
     * Casts the specified object to @see:wijmo.collections.GroupDescription type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): GroupDescription;
}
declare module wijmo.collections.ICollectionView {
    /**
     * Casts the specified object to @see:wijmo.collections.ICollectionView type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): ICollectionView;
}
declare module wijmo.collections.IEditableCollectionView {
    /**
     * Casts the specified object to @see:wijmo.collections.IEditableCollectionView type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): IEditableCollectionView;
}
declare module wijmo.collections.IPagedCollectionView {
    /**
     * Casts the specified object to @see:wijmo.collections.IPagedCollectionView type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): IPagedCollectionView;
}

declare module wijmo.chart.FlexChartCore {
    /**
     * Casts the specified object to @see:wijmo.chart.FlexChartCore type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): FlexChartCore;
}
declare module wijmo.chart.FlexChartBase {
    /**
     * Casts the specified object to @see:wijmo.chart.FlexChartBase type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): FlexChartBase;
}
declare module wijmo.chart.FlexChart {
    /**
     * Casts the specified object to @see:wijmo.chart.FlexChart type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): FlexChart;
}
declare module wijmo.chart.Axis {
    /**
     * Casts the specified object to @see:wijmo.chart.Axis type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): Axis;
}
declare module wijmo.chart.DataLabelBase {
    /**
     * Casts the specified object to @see:wijmo.chart.DataLabelBase type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): DataLabelBase;
}
declare module wijmo.chart.DataLabel {
    /**
     * Casts the specified object to @see:wijmo.chart.DataLabel type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): DataLabel;
}
declare module wijmo.chart.PieDataLabel {
    /**
     * Casts the specified object to @see:wijmo.chart.PieDataLabel type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): PieDataLabel;
}
declare module wijmo.chart.ChartTooltip {
    /**
     * Casts the specified object to @see:wijmo.chart.ChartTooltip type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): ChartTooltip;
}
declare module wijmo.chart.FlexPie {
    /**
     * Casts the specified object to @see:wijmo.chart.FlexPie type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): FlexPie;
}
declare module wijmo.chart.HitTestInfo {
    /**
     * Casts the specified object to @see:wijmo.chart.HitTestInfo type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): HitTestInfo;
}
declare module wijmo.chart.IRenderEngine {
    /**
     * Casts the specified object to @see:wijmo.chart.IRenderEngine type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): IRenderEngine;
}
declare module wijmo.chart.Legend {
    /**
     * Casts the specified object to @see:wijmo.chart.Legend type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): Legend;
}
declare module wijmo.chart.LineMarker {
    /**
     * Casts the specified object to @see:wijmo.chart.LineMarker type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): LineMarker;
}
declare module wijmo.chart.PlotArea {
    /**
     * Casts the specified object to @see:wijmo.chart.PlotArea type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): PlotArea;
}
declare module wijmo.chart.SeriesBase {
    /**
     * Casts the specified object to @see:wijmo.chart.SeriesBase type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): SeriesBase;
}
declare module wijmo.chart.Series {
    /**
     * Casts the specified object to @see:wijmo.chart.Series type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): Series;
}
declare module wijmo.chart.SeriesEventArgs {
    /**
     * Casts the specified object to @see:wijmo.chart.SeriesEventArgs type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): SeriesEventArgs;
}
declare module wijmo.chart.RenderEventArgs {
    /**
     * Casts the specified object to @see:wijmo.chart.RenderEventArgs type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): RenderEventArgs;
}
declare module wijmo.chart.SeriesRenderingEventArgs {
    /**
     * Casts the specified object to @see:wijmo.chart.SeriesRenderingEventArgs type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): SeriesRenderingEventArgs;
}
declare module wijmo.chart.DataLabelRenderEventArgs {
    /**
     * Casts the specified object to @see:wijmo.chart.DataLabelRenderEventArgs type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): DataLabelRenderEventArgs;
}

declare module wijmo.chart.analytics.BoxWhisker {
    /**
     * Casts the specified object to @see:wijmo.chart.analytics.BoxWhisker type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): BoxWhisker;
}
declare module wijmo.chart.analytics.ErrorBar {
    /**
     * Casts the specified object to @see:wijmo.chart.analytics.ErrorBar type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): ErrorBar;
}
declare module wijmo.chart.analytics.FunctionSeries {
    /**
     * Casts the specified object to @see:wijmo.chart.analytics.FunctionSeries type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): FunctionSeries;
}
declare module wijmo.chart.analytics.ParametricFunctionSeries {
    /**
     * Casts the specified object to @see:wijmo.chart.analytics.ParametricFunctionSeries type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): ParametricFunctionSeries;
}
declare module wijmo.chart.analytics.YFunctionSeries {
    /**
     * Casts the specified object to @see:wijmo.chart.analytics.YFunctionSeries type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): YFunctionSeries;
}
declare module wijmo.chart.analytics.MovingAverage {
    /**
     * Casts the specified object to @see:wijmo.chart.analytics.MovingAverage type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): MovingAverage;
}
declare module wijmo.chart.analytics.TrendLineBase {
    /**
     * Casts the specified object to @see:wijmo.chart.analytics.TrendLineBase type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): TrendLineBase;
}
declare module wijmo.chart.analytics.TrendLine {
    /**
     * Casts the specified object to @see:wijmo.chart.analytics.TrendLine type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): TrendLine;
}
declare module wijmo.chart.analytics.Waterfall {
    /**
     * Casts the specified object to @see:wijmo.chart.analytics.Waterfall type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): Waterfall;
}
declare module wijmo.chart.analytics.BreakEven {
    /**
     * Casts the specified object to @see:wijmo.chart.analytics.BreakEven type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): BreakEven;
}

declare module wijmo.chart.animation.ChartAnimation {
    /**
     * Casts the specified object to @see:wijmo.chart.animation.ChartAnimation type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): ChartAnimation;
}

declare module wijmo.chart.annotation.AnnotationBase {
    /**
     * Casts the specified object to @see:wijmo.chart.annotation.AnnotationBase type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): AnnotationBase;
}
declare module wijmo.chart.annotation.Circle {
    /**
     * Casts the specified object to @see:wijmo.chart.annotation.Circle type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): Circle;
}
declare module wijmo.chart.annotation.Ellipse {
    /**
     * Casts the specified object to @see:wijmo.chart.annotation.Ellipse type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): Ellipse;
}
declare module wijmo.chart.annotation.Image {
    /**
     * Casts the specified object to @see:wijmo.chart.annotation.Image type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): Image;
}
declare module wijmo.chart.annotation.Line {
    /**
     * Casts the specified object to @see:wijmo.chart.annotation.Line type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): Line;
}
declare module wijmo.chart.annotation.Polygon {
    /**
     * Casts the specified object to @see:wijmo.chart.annotation.Polygon type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): Polygon;
}
declare module wijmo.chart.annotation.Rectangle {
    /**
     * Casts the specified object to @see:wijmo.chart.annotation.Rectangle type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): Rectangle;
}
declare module wijmo.chart.annotation.Shape {
    /**
     * Casts the specified object to @see:wijmo.chart.annotation.Shape type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): Shape;
}
declare module wijmo.chart.annotation.Square {
    /**
     * Casts the specified object to @see:wijmo.chart.annotation.Square type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): Square;
}
declare module wijmo.chart.annotation.Text {
    /**
     * Casts the specified object to @see:wijmo.chart.annotation.Text type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): Text;
}
declare module wijmo.chart.annotation.AnnotationLayer {
    /**
     * Casts the specified object to @see:wijmo.chart.annotation.AnnotationLayer type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): AnnotationLayer;
}

declare module wijmo.chart.hierarchical.Sunburst {
    /**
     * Casts the specified object to @see:wijmo.chart.hierarchical.Sunburst type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): Sunburst;
}
declare module wijmo.chart.hierarchical.TreeMap {
    /**
     * Casts the specified object to @see:wijmo.chart.hierarchical.TreeMap type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): TreeMap;
}

declare module wijmo.chart.interaction.ChartGestures {
    /**
     * Casts the specified object to @see:wijmo.chart.interaction.ChartGestures type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): ChartGestures;
}
declare module wijmo.chart.interaction.RangeSelector {
    /**
     * Casts the specified object to @see:wijmo.chart.interaction.RangeSelector type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): RangeSelector;
}

declare module wijmo.chart.radar.FlexRadar {
    /**
     * Casts the specified object to @see:wijmo.chart.radar.FlexRadar type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): FlexRadar;
}
declare module wijmo.chart.radar.FlexRadarAxis {
    /**
     * Casts the specified object to @see:wijmo.chart.radar.FlexRadarAxis type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): FlexRadarAxis;
}
declare module wijmo.chart.radar.FlexRadarSeries {
    /**
     * Casts the specified object to @see:wijmo.chart.radar.FlexRadarSeries type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): FlexRadarSeries;
}

declare module wijmo.gauge.BulletGraph {
    /**
     * Casts the specified object to @see:wijmo.gauge.BulletGraph type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): BulletGraph;
}
declare module wijmo.gauge.Gauge {
    /**
     * Casts the specified object to @see:wijmo.gauge.Gauge type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): Gauge;
}
declare module wijmo.gauge.LinearGauge {
    /**
     * Casts the specified object to @see:wijmo.gauge.LinearGauge type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): LinearGauge;
}
declare module wijmo.gauge.RadialGauge {
    /**
     * Casts the specified object to @see:wijmo.gauge.RadialGauge type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): RadialGauge;
}
declare module wijmo.gauge.Range {
    /**
     * Casts the specified object to @see:wijmo.gauge.Range type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): Range;
}

declare module wijmo.grid.CellRange {
    /**
     * Casts the specified object to @see:wijmo.grid.CellRange type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): CellRange;
}
declare module wijmo.grid.DataMap {
    /**
     * Casts the specified object to @see:wijmo.grid.DataMap type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): DataMap;
}
declare module wijmo.grid.FlexGrid {
    /**
     * Casts the specified object to @see:wijmo.grid.FlexGrid type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): FlexGrid;
}
declare module wijmo.grid.GridPanel {
    /**
     * Casts the specified object to @see:wijmo.grid.GridPanel type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): GridPanel;
}
declare module wijmo.grid.HitTestInfo {
    /**
     * Casts the specified object to @see:wijmo.grid.HitTestInfo type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): HitTestInfo;
}
declare module wijmo.grid.MergeManager {
    /**
     * Casts the specified object to @see:wijmo.grid.MergeManager type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): MergeManager;
}
declare module wijmo.grid.Column {
    /**
     * Casts the specified object to @see:wijmo.grid.Column type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): Column;
}
declare module wijmo.grid.GroupRow {
    /**
     * Casts the specified object to @see:wijmo.grid.GroupRow type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): GroupRow;
}
declare module wijmo.grid.Row {
    /**
     * Casts the specified object to @see:wijmo.grid.Row type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): Row;
}
declare module wijmo.grid.RowCol {
    /**
     * Casts the specified object to @see:wijmo.grid.RowCol type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): RowCol;
}
declare module wijmo.grid.CellEditEndingEventArgs {
    /**
     * Casts the specified object to @see:wijmo.grid.CellEditEndingEventArgs type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): CellEditEndingEventArgs;
}
declare module wijmo.grid.CellRangeEventArgs {
    /**
     * Casts the specified object to @see:wijmo.grid.CellRangeEventArgs type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): CellRangeEventArgs;
}
declare module wijmo.grid.FormatItemEventArgs {
    /**
     * Casts the specified object to @see:wijmo.grid.FormatItemEventArgs type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): FormatItemEventArgs;
}

declare module wijmo.grid.detail.DetailMergeManager {
    /**
     * Casts the specified object to @see:wijmo.grid.detail.DetailMergeManager type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): DetailMergeManager;
}
declare module wijmo.grid.detail.DetailRow {
    /**
     * Casts the specified object to @see:wijmo.grid.detail.DetailRow type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): DetailRow;
}
declare module wijmo.grid.detail.FlexGridDetailProvider {
    /**
     * Casts the specified object to @see:wijmo.grid.detail.FlexGridDetailProvider type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): FlexGridDetailProvider;
}

declare module wijmo.grid.filter.ConditionFilter {
    /**
     * Casts the specified object to @see:wijmo.grid.filter.ConditionFilter type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): ConditionFilter;
}
declare module wijmo.grid.filter.ValueFilter {
    /**
     * Casts the specified object to @see:wijmo.grid.filter.ValueFilter type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): ValueFilter;
}
declare module wijmo.grid.filter.ColumnFilter {
    /**
     * Casts the specified object to @see:wijmo.grid.filter.ColumnFilter type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): ColumnFilter;
}
declare module wijmo.grid.filter.FlexGridFilter {
    /**
     * Casts the specified object to @see:wijmo.grid.filter.FlexGridFilter type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): FlexGridFilter;
}
declare module wijmo.grid.filter.FilterCondition {
    /**
     * Casts the specified object to @see:wijmo.grid.filter.FilterCondition type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): FilterCondition;
}
declare module wijmo.grid.filter.ColumnFilterEditor {
    /**
     * Casts the specified object to @see:wijmo.grid.filter.ColumnFilterEditor type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): ColumnFilterEditor;
}
declare module wijmo.grid.filter.ConditionFilterEditor {
    /**
     * Casts the specified object to @see:wijmo.grid.filter.ConditionFilterEditor type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): ConditionFilterEditor;
}
declare module wijmo.grid.filter.ValueFilterEditor {
    /**
     * Casts the specified object to @see:wijmo.grid.filter.ValueFilterEditor type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): ValueFilterEditor;
}

declare module wijmo.grid.grouppanel.GroupPanel {
    /**
     * Casts the specified object to @see:wijmo.grid.grouppanel.GroupPanel type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): GroupPanel;
}

/// <reference path="../../../../Shared/WijmoMVC/dist/controls/wijmo.pdf.d.ts" />
/// <reference path="../../../../Shared/WijmoMVC/dist/controls/wijmo.grid.pdf.d.ts" />
/// <reference path="../../../../Shared/WijmoMVC/dist/controls/wijmo.grid.transposedmultirow.d.ts" />
declare module wijmo.grid.pdf.PdfFormatItemEventArgs {
    /**
     * Casts the specified object to @see:wijmo.grid.pdf.PdfFormatItemEventArgs type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): PdfFormatItemEventArgs;
}

/// <reference path="../../../../Shared/WijmoMVC/dist/controls/wijmo.xlsx.d.ts" />
/// <reference path="../../../../Shared/WijmoMVC/dist/controls/wijmo.grid.xlsx.d.ts" />
declare module wijmo.grid.xlsx.XlsxFormatItemEventArgs {
    /**
     * Casts the specified object to @see:wijmo.grid.xlsx.XlsxFormatItemEventArgs type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): XlsxFormatItemEventArgs;
}

declare module wijmo.input.AutoComplete {
    /**
     * Casts the specified object to @see:wijmo.input.AutoComplete type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): AutoComplete;
}
declare module wijmo.input.Calendar {
    /**
     * Casts the specified object to @see:wijmo.input.Calendar type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): Calendar;
}
declare module wijmo.input.ColorPicker {
    /**
     * Casts the specified object to @see:wijmo.input.ColorPicker type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): ColorPicker;
}
declare module wijmo.input.ComboBox {
    /**
     * Casts the specified object to @see:wijmo.input.ComboBox type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): ComboBox;
}
declare module wijmo.input.DropDown {
    /**
     * Casts the specified object to @see:wijmo.input.DropDown type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): DropDown;
}
declare module wijmo.input.InputColor {
    /**
     * Casts the specified object to @see:wijmo.input.InputColor type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): InputColor;
}
declare module wijmo.input.InputDate {
    /**
     * Casts the specified object to @see:wijmo.input.InputDate type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): InputDate;
}
declare module wijmo.input.InputDateTime {
    /**
     * Casts the specified object to @see:wijmo.input.InputDateTime type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): InputDateTime;
}
declare module wijmo.input.InputMask {
    /**
     * Casts the specified object to @see:wijmo.input.InputMask type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): InputMask;
}
declare module wijmo.input.InputNumber {
    /**
     * Casts the specified object to @see:wijmo.input.InputNumber type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): InputNumber;
}
declare module wijmo.input.InputTime {
    /**
     * Casts the specified object to @see:wijmo.input.InputTime type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): InputTime;
}
declare module wijmo.input.ListBox {
    /**
     * Casts the specified object to @see:wijmo.input.ListBox type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): ListBox;
}
declare module wijmo.input.Menu {
    /**
     * Casts the specified object to @see:wijmo.input.Menu type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): Menu;
}
declare module wijmo.input.MultiAutoComplete {
    /**
     * Casts the specified object to @see:wijmo.input.MultiAutoComplete type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): MultiAutoComplete;
}
declare module wijmo.input.MultiSelect {
    /**
     * Casts the specified object to @see:wijmo.input.MultiSelect type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): MultiSelect;
}
declare module wijmo.input.Popup {
    /**
     * Casts the specified object to @see:wijmo.input.Popup type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): Popup;
}
declare module wijmo.input.FormatItemEventArgs {
    /**
     * Casts the specified object to @see:wijmo.input.FormatItemEventArgs type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): FormatItemEventArgs;
}


declare module wijmo.nav.TreeNode {
    /**
     * Casts the specified object to @see:wijmo.nav.TreeNode type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): TreeNode;
}
declare module wijmo.nav.TreeView {
    /**
     * Casts the specified object to @see:wijmo.nav.TreeView type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): TreeView;
}
declare module wijmo.nav.FormatNodeEventArgs {
    /**
     * Casts the specified object to @see:wijmo.nav.FormatNodeEventArgs type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): FormatNodeEventArgs;
}
declare module wijmo.nav.TreeNodeEventArgs {
    /**
     * Casts the specified object to @see:wijmo.nav.TreeNodeEventArgs type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): TreeNodeEventArgs;
}
declare module wijmo.nav.TreeNodeDragDropEventArgs {
    /**
     * Casts the specified object to @see:wijmo.nav.TreeNodeDragDropEventArgs type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): TreeNodeDragDropEventArgs;
}
declare module wijmo.nav.TabPanel {
    /**
     * Casts the specified object to @see:wijmo.nav.TabPanel type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): TabPanel;
}
declare module wijmo.nav.Tab {
    /**
     * Casts the specified object to @see:wijmo.nav.Tab type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): Tab;
}

/// <reference path="../../../../Shared/WijmoMVC/dist/controls/wijmo.pdf.d.ts" />
/// <reference path="../../../../Shared/WijmoMVC/dist/controls/wijmo.pdf.security.d.ts" />
declare module wijmo.pdf.PdfDocument {
    /**
     * Casts the specified object to @see:wijmo.pdf.PdfDocument type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): PdfDocument;
}
declare module wijmo.pdf.PdfPageArea {
    /**
     * Casts the specified object to @see:wijmo.pdf.PdfPageArea type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): PdfPageArea;
}
declare module wijmo.pdf.PdfDocumentEndedEventArgs {
    /**
     * Casts the specified object to @see:wijmo.pdf.PdfDocumentEndedEventArgs type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): PdfDocumentEndedEventArgs;
}

declare module wijmo.odata.ODataCollectionView {
    /**
     * Casts the specified object to @see:wijmo.odata.ODataCollectionView type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): ODataCollectionView;
}
declare module wijmo.odata.ODataVirtualCollectionView {
    /**
     * Casts the specified object to @see:wijmo.odata.ODataVirtualCollectionView type.
     * @param obj The object to cast.
     * @return The object passed in.
     */
    function cast(obj: any): ODataVirtualCollectionView;
}
