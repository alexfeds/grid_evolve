@using C1.Web.Mvc.Grid

@model IEnumerable<grid_evolve.Models.TimeSheet>

@{
    ViewBag.Title = "Time Sheet";
}


@{
    List<string> state = new List<string>(new string[] { "Active", "Submitted" });

}
@{
    List<string> type = new List<string>(new string[] { "Telephone Call", "Research", "Drafting Document" });

}

<!--START: Cell templates-->
<script id="stateCombo" type="text/template">

    @(Html.C1().ComboBox()
        .IsEditable(false)
        .Bind(state)
        .CssStyle("width", "100%")
        .TemplateBind("Text", "Product").ToTemplate()
    )
</script>

<script id="typeCombo" type="text/template">

    @(Html.C1().ComboBox()
        .IsEditable(false)
        .Bind(type)
        .CssStyle("width", "100%")
        .TemplateBind("Text", "Product").ToTemplate()
    )
</script>
<!--END: Cell templates-->

@section Scripts{
    <script type="text/javascript">
        //global row index
        var selectedRowIndex;
        c1.documentReady(function () {

            var theGrid = wijmo.Control.getControl('#theGrid'); //gets reference to main grid table
            var popup = new wijmo.input.Popup("#popup");

            theGrid.allowAddNew = true; //allows to add new row in table
            theGrid.allowDelete = true; //allow delete row
            theGrid.rows.defaultSize = 45; //sets height of row
          

            //====================================START====================================
            // BUTTONS-COLOR-CHANGE
            // custom formatter to paint buttons and editors
            theGrid.formatItem.addHandler(function (s, e) {

                if (e.panel == s.cells) {
                    var col = s.columns[e.col],
                        item = s.rows[e.row].dataItem;

                    if (item == currentEditItem) {

                        // create editors and buttons for the item being edited
                        switch (col.binding) {
                            case 'Actions':
                                e.cell.innerHTML = document.getElementById('tplBtnEditMode').innerHTML;
                                e.cell.dataItem = item;
                                break;
                            case 'Id':
                            case 'State':
                            case 'Title':
                            case 'Type':
                            case 'Duration':
                                e.cell.innerHTML = '<input class="form-control" ' +
                                    'id="' + col.binding + '" ' +
                                    'value="' + s.getCellData(e.row, e.col, true) + '"/>';
                                break;
                        }
                    } else {

                        // create buttons for items not being edited
                        switch (col.binding) {
                            case 'Actions':
                                e.cell.innerHTML = document.getElementById('tplBtnViewMode').innerHTML;
                                e.cell.dataItem = item;
                                break;
                        }
                    }
                }


            });


            // BUTTONS-COLOR-CHANGE
            //====================================END======================================




            //====================================START====================================
            // LISTEN FOR CELL EDIT END
            theGrid.cellEditEnded.addHandler(function (s, e) {

                // create the new item, add it to the collection
                let rowItemObj = theGrid.collectionView.items[selectedRowIndex]

                console.log("viewitems", rowItemObj);

                var myDurationProp = 'Duration';
                var myHourlyRateProp = 'Hourly_Rate';

                var rate = 0;
                var duration = 0;

                if (rowItemObj) {
                    if (rowItemObj.hasOwnProperty(myDurationProp)) {
                        duration = rowItemObj.Duration.toTimeString().split(' ')[0];
                    }

                    if (rowItemObj.hasOwnProperty(myHourlyRateProp)) {
                        rate = rowItemObj.Hourly_Rate
                    }
                }
              

                var itemsData = theGrid.collectionView.items;
                var resultTimeWork = 0;
                var resultTonumfromCurrency = 0;
                //calculus
                if (duration) {
                    console.log("duration in", duration);
                    duration = roundTime(duration, 15)
                    console.log("roundTime duration out", duration);
                    var timeToDec = timeToDecimal(duration)
                    console.log("umberFromtimeToDec", timeToDec);
                    console.log("rate", rate);
                    if (typeof rate == "string") {
                        resultTonumfromCurrency = parseFloat(rate.substring(1));
                    } else {
                        resultTonumfromCurrency = rate;
                    }
                
                    resultTimeWork = timeToDec * resultTonumfromCurrency;
                    console.log("resultTimeWork", resultTimeWork);
                    console.log("rate", resultTonumfromCurrency);
                }
                itemsData[e.row].Total = resultTimeWork;
                theGrid.refresh();
                setChanged(e.row, e.col);
            });

            // LISTEN FOR CELL EDIT END
            //====================================END======================================


            //====================================START====================================
            // POP UP DIALOG
            //confirmation pop up
            function confirmDeletePopUp(s, e) {
                e.cancel = true;
                //show pop up to confirm
                popup.show(true, function (sender) {
                    var view = theGrid.collectionView;
                    // delete the row
                    if (sender.dialogResult == 'wj-hide-ok') {
                        view.remove(view.currentItem);
                    }
                    else {
                        e.cancel = true;
                    }
                });
            }
            // POP UP DIALOG
            //====================================END======================================


            //====================================START====================================
            // HANDLE-BUTTONS CLICKS
            theGrid.addEventListener(theGrid.hostElement, 'click', function (e) {
                if (e.target.tagName == 'BUTTON') {
                    // get button's data item
                    var item = wijmo.closest(e.target, '.wj-cell');
                    console.log("item", item)
                    if (item) {
                        console.log("item", item.dataItem)
                        var itemD = item.dataItem
                    }
                    // handle buttons
                    switch (e.target.id) {

                        // start editing this item
                        case 'btnEdit':
                            editItem(itemD);
                            break;

                        // remove this item from the collection
                        case 'btnDelete':
                            confirmDeletePopUp(null, e);
                            break;

                        // commit edits
                        case 'btnOK':
                            commitEdit();
                            break;

                        // cancel edits
                        case 'btnCancel':
                            cancelEdit();
                            break;
                    }
                }

            });

            theGrid.scrollPositionChanged.addHandler(cancelEdit);
            theGrid.lostFocus.addHandler(cancelEdit);

            // editing commands
            var currentEditItem = null;
           
            function editItem(item) {
                cancelEdit();
                currentEditItem = item;
                theGrid.invalidate();
            }
         
            function commitEdit() {
                if (currentEditItem) {
                    theGrid.columns.forEach(function (col) {
                        var input = theGrid.hostElement.querySelector('#' + col.binding);
                        if (input) {
                            var value = wijmo.changeType(input.value, col.dataType, col.format);
                            if (wijmo.getType(value) == col.dataType) {
                                currentEditItem[col.binding] = value;
                            }
                        }
                    });
                }
                currentEditItem = null;
                theGrid.invalidate();
            }
          
            function cancelEdit() {
                if (currentEditItem) {
                    currentEditItem = null;
                    theGrid.invalidate();
                }
            }
            // HANDLE-BUTTONS CLICKS
            //====================================END======================================



            //====================================START====================================
            // UTILS ACTIONS HELPERS
            var index = 0;
            //sets value on new row
            function setValueOnNewRowCreate() {

                var view = theGrid.collectionView
                var rate = 0; //default
                rate = parseFloat(rate).toFixed(2)
                var rateinDec = 0;
                rateinDec = parseFloat(rateinDec).toFixed(2);


                view.newItemCreator = function () {

                    rate = document.getElementById("hourSetf").value

                    if (rate) {
                        rate = parseFloat(rate);
                        rateinDec = rate.toFixed(2);
                        console.log("got rate")
                    } else {
                        console.log("no rate")
                        rateinDec = parseFloat(0).toFixed(2);
                    }
                    //console.log("rateinDec", rateinDec)
                  
                    return {
                        Id: index++,
                        State: "Active",
                        Hourly_Rate: '$' + rateinDec
                    };
          
                }
            }
            setValueOnNewRowCreate();

            // set new row at top
            document.getElementById('brBut').addEventListener('click', function (e) {
                var view = theGrid.collectionView
                // add a new empty item and commit it
                const newItem = view.addNew();
                view.commitNew();

                var len = theGrid.rows.length;
                // scroll to the new item
                theGrid.scrollIntoView(len, 0);
                // edit the new item using grid
                editItem(newItem);
            });
   

            // submit row
            document.getElementById('brSubt').addEventListener('click', function (e) {

                //makes row readonly
                var rows = theGrid.rows;
                var selectedRow = rows[selectedRowIndex]
                selectedRow.isReadOnly = true;

                //sets the state cell to submitted
                var itemsData = theGrid.collectionView.items;
                itemsData[selectedRowIndex].State = "Submitted";
                theGrid.refresh();

            })

            // submit row
            document.getElementById('brUnSubt').addEventListener('click', function (e) {

                //makes row readonly
                var rows = theGrid.rows;
                var selectedRow = rows[selectedRowIndex]
                selectedRow.isReadOnly = false;

                //sets the state cell to submitted
                var itemsData = theGrid.collectionView.items;
                itemsData[selectedRowIndex].State = "Active";
                theGrid.refresh();

            })



            //delting row handler
            theGrid.deletingRow.addHandler(function (s, e) {
                confirmDeletePopUp(s, e)
            });

            //gets selected row index
            theGrid.selectionChanged.addHandler(function (s, e) {
                this.selectedRowIndex = e.row;
            });
            theGrid.onSelectionChanged(); // initialize selection display

            // utility to keep track of changed items
            var changes = [];
            function setChanged(r, c) {
                if (!getChanged(r, c)) {
                    changes.push({
                        item: theGrid.rows[r].dataItem,
                        prop: theGrid.columns[c].binding
                    });
                }
            }
            function getChanged(r, c) {
                for (var i = 0; i < changes.length; i++) {
                    var item = theGrid.rows[r].dataItem;
                    var prop = theGrid.columns[c].binding;
                    var ch = changes[i];
                    if (ch.item == item && ch.prop == prop) {
                        return true;
                    }
                }
                return false;
            }

            function timeToDecimal(t) {
                var arr = t.split(':');
                var dec = parseInt((arr[1] / 6) * 10, 10);

                return parseFloat(parseInt(arr[0], 10) + '.' + (dec < 10 ? '0' : '') + dec);
            }

            let roundTime = (time, minutesToRound) => {

                time = time.slice(0, 5);
                console.log("sliced time", time)

                let [hours, minutes] = time.split(':');
                hours = parseInt(hours);
                minutes = parseInt(minutes);

                // Convert hours and minutes to time in minutes
                time = (hours * 60) + minutes;

                let rounded = Math.round(time / minutesToRound) * minutesToRound;
                let rHr = '' + Math.floor(rounded / 60)
                let rMin = '' + rounded % 60

                return rHr.padStart(2, '0') + ':' + (15 * Math.ceil(minutes / 15));
            }


            // UTILS ACTIONS HELPERS
            //====================================END======================================


        })

    </script>
}

<style type="text/css">
    .grid {
        height: 500px;
        border: 2px solid #e0e0e0;
        font-family: Cambria;
        font-weight: bold;
    }
</style>


<div class="container">
    <div class="row">
        <div class="col-8">
            <div class="row">
                <div class="col-6 button-sec-wrapper">
            
                    <div class="action-btn">
                        <button type="button" class="btn btn-primary" id="brBut">Add</button>
                    </div>
                    <div class="action-btn">
                        <button type="button" class="btn btn-primary" id="brSubt">Submit</button>
                    </div>
                    <div class="action-btn">
                        <button type="button" class="btn btn-primary" id="brUnSubt">Unsubmit</button>
                    </div>
                </div>
                <div class="col-6 button-sec-wrapper text-right">

                    <div class="form-group row hourly-wrapper">
                        <label class="col-sm-4 col-form-label">Horly Rate</label>
                        <div class="col-sm-8">
                            <input class="form-control" id="hourSetf" type="number" />
                        </div>


                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            @*Instantiate FlexGrid and set its properties*@
            @(Html.C1().FlexGrid<grid_evolve.Models.TimeSheet>()
        .Id("theGrid")
        .Width(1080)
        .AutoRowHeights(true)
        .CssClass("grid")
    //Binding columns data to FlexGrid
    .Columns(columns =>
    {
        columns.Add(column => column.Binding("Id").IsReadOnly(true));
        columns.Add(column => column.Binding("State").Width("145").CellTemplate(ctb => ctb.EditTemplateId("stateCombo")));
        columns.Add(column => column.Binding("Title"));
        columns.Add(column => column.Binding("Type").Width("165").CellTemplate(ctb => ctb.EditTemplateId("typeCombo")));
        columns.Add(column => column.Binding("Duration").DataType(C1.Web.Mvc.Grid.DataType.Date).Width("80").Format("HH:mm"));
        columns.Add(column => column.Binding("Hourly_Rate").Format("c").DataType(C1.Web.Mvc.Grid.DataType.Number));
        columns.Add(column => column.Binding("Total").Format("c").DataType(C1.Web.Mvc.Grid.DataType.Number).IsReadOnly(true));
        columns.Add(column => column.Binding("Actions").Width("150"));
    })
    )
        </div>
    </div>


    <!-- template for buttons on items in view mode -->
    <div id="tplBtnViewMode" style="display:none">
        <button id="btnEdit" class="btn btn-light btn-sm">
            <span class="glyphicon glyphicon-pencil"></span> Edit
        </button>
        <button id="btnDelete" class="btn btn-light btn-sm">
            <span class="glyphicon glyphicon-remove"></span> Delete
        </button>
        <div>

            <!-- template for buttons on items in edit mode -->
            <div id="tplBtnEditMode" style="display:none">
                <button id="btnOK" class="btn btn-primary btn-sm">
                    <span class="glyphicon glyphicon-ok"></span> OK
                </button>
                <button id="btnCancel" class="btn btn-warning btn-sm">
                    <span class="glyphicon glyphicon-ban-circle"></span> Cancel
                </button>
            </div>
        </div>
    </div>

    <!-- popup -->
    <div id="popup" style="display:none">
        <div class="wj-dialog-header">
            Deleting Row
        </div>
        <div class="wj-dialog-body" tabindex="-1">
            Do you really want to delete this row?
        </div>
        <div class="wj-dialog-footer">
            <button class="btn btn-primary wj-hide-ok">Yes</button>
            <button class="btn btn-light wj-hide">No</button>
        </div>
    </div>
</div>